
USBHIDBootMouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f0  00800100  00004af8  00004b8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004af8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000265  008002f0  008002f0  00004d7c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004d7c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004dac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a28  00000000  00000000  00004dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000279a7  00000000  00000000  00005814  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000050f3  00000000  00000000  0002d1bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000067d1  00000000  00000000  000322ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000244c  00000000  00000000  00038a80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000b13b  00000000  00000000  0003aecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000e089  00000000  00000000  00046007  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b10  00000000  00000000  00054090  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      40:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <__vector_16>
      44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      48:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__vector_18>
      4c:	0c 94 10 08 	jmp	0x1020	; 0x1020 <__vector_19>
      50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      54:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      60:	0c 94 b1 22 	jmp	0x4562	; 0x4562 <__vector_24>
      64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      68:	b1 0e       	add	r11, r17
      6a:	b1 0e       	add	r11, r17
      6c:	b1 0e       	add	r11, r17
      6e:	a4 0e       	add	r10, r20
      70:	b3 0e       	add	r11, r19
      72:	a6 0e       	add	r10, r22
      74:	a6 0e       	add	r10, r22
      76:	a6 0e       	add	r10, r22
      78:	a8 0e       	add	r10, r24
      7a:	a6 0e       	add	r10, r22

0000007c <__trampolines_end>:
      7c:	00 00       	nop
      7e:	00 08       	sbc	r0, r0
      80:	00 02       	muls	r16, r16
      82:	01 00       	.word	0x0001	; ????
      84:	00 03       	mulsu	r16, r16
      86:	04 07       	cpc	r16, r20
	...

00000090 <digital_pin_to_bit_mask_PGM>:
      90:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      a0:	04 08 10 20                                         ... 

000000a4 <digital_pin_to_port_PGM>:
      a4:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      b4:	03 03 03 03                                         ....

000000b8 <port_to_output_PGM>:
      b8:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000c2 <port_to_mode_PGM>:
      c2:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000cc <__ctors_start>:
      cc:	29 06       	cpc	r2, r25
      ce:	40 08       	sbc	r4, r0
      d0:	ca 21       	and	r28, r10

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	12 e0       	ldi	r17, 0x02	; 2
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	e8 ef       	ldi	r30, 0xF8	; 248
      e6:	fa e4       	ldi	r31, 0x4A	; 74
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	a0 3f       	cpi	r26, 0xF0	; 240
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	25 e0       	ldi	r18, 0x05	; 5
      f6:	a0 ef       	ldi	r26, 0xF0	; 240
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	a5 35       	cpi	r26, 0x55	; 85
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>

00000104 <__do_global_ctors>:
     104:	10 e0       	ldi	r17, 0x00	; 0
     106:	c9 e6       	ldi	r28, 0x69	; 105
     108:	d0 e0       	ldi	r29, 0x00	; 0
     10a:	04 c0       	rjmp	.+8      	; 0x114 <__do_global_ctors+0x10>
     10c:	21 97       	sbiw	r28, 0x01	; 1
     10e:	fe 01       	movw	r30, r28
     110:	0e 94 00 24 	call	0x4800	; 0x4800 <__tablejump2__>
     114:	c6 36       	cpi	r28, 0x66	; 102
     116:	d1 07       	cpc	r29, r17
     118:	c9 f7       	brne	.-14     	; 0x10c <__do_global_ctors+0x8>
     11a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <main>
     11e:	0c 94 7a 25 	jmp	0x4af4	; 0x4af4 <_exit>

00000122 <__bad_interrupt>:
     122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:
                return false;
        }

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
                return false;
        }
     126:	80 e0       	ldi	r24, 0x00	; 0
     128:	08 95       	ret

0000012a <_ZN15USBDeviceConfig12ResetHubPortEh>:
     12a:	08 95       	ret

0000012c <_ZN15USBDeviceConfig8VIDPIDOKEjj>:
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	08 95       	ret

00000130 <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
                return true;
        }
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	08 95       	ret

00000134 <_ZN7HIDBootILh2EE15SetReportParserEhP15HIDReportParser>:

public:
        HIDBoot(USB *p, bool bRptProtoEnable = false);

        virtual bool SetReportParser(uint8_t id, HIDReportParser *prs) {
                pRptParser[id] = prs;
     134:	86 0f       	add	r24, r22
     136:	91 1d       	adc	r25, r1
     138:	86 0f       	add	r24, r22
     13a:	91 1d       	adc	r25, r1
     13c:	fc 01       	movw	r30, r24
     13e:	56 87       	std	Z+14, r21	; 0x0e
     140:	45 87       	std	Z+13, r20	; 0x0d
                return true;
        };
     142:	81 e0       	ldi	r24, 0x01	; 1
     144:	08 95       	ret

00000146 <_ZN7HIDBootILh2EE7ReleaseEv>:

        }
}

template <const uint8_t BOOT_PROTOCOL>
uint8_t HIDBoot<BOOT_PROTOCOL>::Release() {
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
     14a:	ec 01       	movw	r28, r24
        pUsb->GetAddressPool().FreeAddress(bAddress);
     14c:	8c 81       	ldd	r24, Y+4	; 0x04
     14e:	9d 81       	ldd	r25, Y+5	; 0x05
     150:	dc 01       	movw	r26, r24
     152:	ed 91       	ld	r30, X+
     154:	fc 91       	ld	r31, X
     156:	04 80       	ldd	r0, Z+4	; 0x04
     158:	f5 81       	ldd	r31, Z+5	; 0x05
     15a:	e0 2d       	mov	r30, r0
     15c:	6e 81       	ldd	r22, Y+6	; 0x06
     15e:	09 95       	icall

        bConfNum = 0;
     160:	1f 86       	std	Y+15, r1	; 0x0f
        bIfaceNum = 0;
     162:	18 8a       	std	Y+16, r1	; 0x10
        bNumEP = 1;
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	8a 8b       	std	Y+18, r24	; 0x12
        bAddress = 0;
     168:	1e 82       	std	Y+6, r1	; 0x06
        qNextPollTime = 0;
     16a:	1b 8a       	std	Y+19, r1	; 0x13
     16c:	1c 8a       	std	Y+20, r1	; 0x14
     16e:	1d 8a       	std	Y+21, r1	; 0x15
     170:	1e 8a       	std	Y+22, r1	; 0x16
        bPollEnable = false;
     172:	1f 8a       	std	Y+23, r1	; 0x17

        return 0;
}
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	df 91       	pop	r29
     178:	cf 91       	pop	r28
     17a:	08 95       	ret

0000017c <_ZN7HIDBootILh2EE10GetAddressEv>:
        uint8_t Release();
        uint8_t Poll();

        virtual uint8_t GetAddress() {
                return bAddress;
        };
     17c:	fc 01       	movw	r30, r24
     17e:	86 81       	ldd	r24, Z+6	; 0x06
     180:	08 95       	ret

00000182 <_ZN7HIDBootILh2EE10DEVCLASSOKEh>:
        // UsbConfigXtracter implementation
        // Method should be defined here if virtual.
        virtual void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);

        virtual bool DEVCLASSOK(uint8_t klass) {
                return (klass == USB_CLASS_HID);
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	63 30       	cpi	r22, 0x03	; 3
     186:	09 f0       	breq	.+2      	; 0x18a <_ZN7HIDBootILh2EE10DEVCLASSOKEh+0x8>
     188:	80 e0       	ldi	r24, 0x00	; 0
        }
     18a:	08 95       	ret

0000018c <_ZN7HIDBootILh2EE13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass) {
                return (subklass == BOOT_PROTOCOL);
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	62 30       	cpi	r22, 0x02	; 2
     190:	09 f0       	breq	.+2      	; 0x194 <_ZN7HIDBootILh2EE13DEVSUBCLASSOKEh+0x8>
     192:	80 e0       	ldi	r24, 0x00	; 0
        }
     194:	08 95       	ret

00000196 <_ZN7HIDBootILh2EE15GetReportParserEh>:
        bool bRptProtoEnable; // Report Protocol enable flag

        void Initialize();

        virtual HIDReportParser* GetReportParser(uint8_t id) {
                return pRptParser[id];
     196:	86 0f       	add	r24, r22
     198:	91 1d       	adc	r25, r1
     19a:	86 0f       	add	r24, r22
     19c:	91 1d       	adc	r25, r1
        };
     19e:	fc 01       	movw	r30, r24
     1a0:	85 85       	ldd	r24, Z+13	; 0x0d
     1a2:	96 85       	ldd	r25, Z+14	; 0x0e
     1a4:	08 95       	ret

000001a6 <_ZN7HIDBootILh2EE7isReadyEv>:
                return bAddress;
        };

        virtual bool isReady() {
                return bPollEnable;
        };
     1a6:	fc 01       	movw	r30, r24
     1a8:	87 89       	ldd	r24, Z+23	; 0x17
     1aa:	08 95       	ret

000001ac <_ZN7HIDBootILh2EE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:

        return rcode;
}

template <const uint8_t BOOT_PROTOCOL>
void HIDBoot<BOOT_PROTOCOL>::EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *pep) {
     1ac:	ef 92       	push	r14
     1ae:	ff 92       	push	r15
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
     1b4:	dc 01       	movw	r26, r24
     1b6:	e7 01       	movw	r28, r14

        // If the first configuration satisfies, the others are not considered.
        //if(bNumEP > 1 && conf != bConfNum)
        if(bNumEP == totalEndpoints(BOOT_PROTOCOL))
     1b8:	52 96       	adiw	r26, 0x12	; 18
     1ba:	8c 91       	ld	r24, X
     1bc:	52 97       	sbiw	r26, 0x12	; 18
     1be:	82 30       	cpi	r24, 0x02	; 2
     1c0:	49 f1       	breq	.+82     	; 0x214 <_ZN7HIDBootILh2EE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x68>
                return;

        bConfNum = conf;
     1c2:	1f 96       	adiw	r26, 0x0f	; 15
     1c4:	6c 93       	st	X, r22
     1c6:	1f 97       	sbiw	r26, 0x0f	; 15
        bIfaceNum = iface;
     1c8:	50 96       	adiw	r26, 0x10	; 16
     1ca:	4c 93       	st	X, r20
     1cc:	50 97       	sbiw	r26, 0x10	; 16

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) {
     1ce:	9b 81       	ldd	r25, Y+3	; 0x03
     1d0:	93 70       	andi	r25, 0x03	; 3
     1d2:	93 30       	cpi	r25, 0x03	; 3
     1d4:	f9 f4       	brne	.+62     	; 0x214 <_ZN7HIDBootILh2EE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x68>
     1d6:	9a 81       	ldd	r25, Y+2	; 0x02
     1d8:	97 ff       	sbrs	r25, 7
     1da:	1c c0       	rjmp	.+56     	; 0x214 <_ZN7HIDBootILh2EE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x68>
                if(pep->bInterval > bInterval) bInterval = pep->bInterval;
     1dc:	9e 81       	ldd	r25, Y+6	; 0x06
     1de:	58 96       	adiw	r26, 0x18	; 24
     1e0:	2c 91       	ld	r18, X
     1e2:	58 97       	sbiw	r26, 0x18	; 24
     1e4:	29 17       	cp	r18, r25
     1e6:	18 f4       	brcc	.+6      	; 0x1ee <_ZN7HIDBootILh2EE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x42>
     1e8:	58 96       	adiw	r26, 0x18	; 24
     1ea:	9c 93       	st	X, r25
     1ec:	58 97       	sbiw	r26, 0x18	; 24

                // Fill in the endpoint info structure
                epInfo[bNumEP].epAddr = (pep->bEndpointAddress & 0x0F);
     1ee:	e8 2f       	mov	r30, r24
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	9f 01       	movw	r18, r30
     1f4:	22 0f       	add	r18, r18
     1f6:	33 1f       	adc	r19, r19
     1f8:	e2 0f       	add	r30, r18
     1fa:	f3 1f       	adc	r31, r19
     1fc:	ea 0f       	add	r30, r26
     1fe:	fb 1f       	adc	r31, r27
     200:	9a 81       	ldd	r25, Y+2	; 0x02
     202:	9f 70       	andi	r25, 0x0F	; 15
     204:	97 83       	std	Z+7, r25	; 0x07
                epInfo[bNumEP].maxPktSize = (uint8_t)pep->wMaxPacketSize;
     206:	9c 81       	ldd	r25, Y+4	; 0x04
     208:	90 87       	std	Z+8, r25	; 0x08
                epInfo[bNumEP].bmSndToggle = 0;
                epInfo[bNumEP].bmRcvToggle = 0;
                epInfo[bNumEP].bmNakPower = USB_NAK_NOWAIT;
     20a:	94 e0       	ldi	r25, 0x04	; 4
     20c:	91 87       	std	Z+9, r25	; 0x09
                bNumEP++;
     20e:	8f 5f       	subi	r24, 0xFF	; 255
     210:	52 96       	adiw	r26, 0x12	; 18
     212:	8c 93       	st	X, r24

        }
}
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	ff 90       	pop	r15
     21a:	ef 90       	pop	r14
     21c:	08 95       	ret

0000021e <_ZThn2_N7HIDBootILh2EE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
     21e:	ef 92       	push	r14
     220:	ff 92       	push	r15
     222:	0f 93       	push	r16
     224:	02 97       	sbiw	r24, 0x02	; 2
     226:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN7HIDBootILh2EE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>
     22a:	0f 91       	pop	r16
     22c:	ff 90       	pop	r15
     22e:	ef 90       	pop	r14
     230:	08 95       	ret

00000232 <_ZN10SinkParserI13USBReadParserjjE5ParseEjPKhRKj>:
        };

        void Initialize() {
        };

        void Parse(const LEN_TYPE len, const uint8_t *pbuf, const OFFSET_TYPE &offset) {
     232:	08 95       	ret

00000234 <_ZN7HIDBootILh2EE4PollEv>:

        return 0;
}

template <const uint8_t BOOT_PROTOCOL>
uint8_t HIDBoot<BOOT_PROTOCOL>::Poll() {
     234:	cf 92       	push	r12
     236:	df 92       	push	r13
     238:	ef 92       	push	r14
     23a:	ff 92       	push	r15
     23c:	0f 93       	push	r16
     23e:	1f 93       	push	r17
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	cd b7       	in	r28, 0x3d	; 61
     246:	de b7       	in	r29, 0x3e	; 62
     248:	62 97       	sbiw	r28, 0x12	; 18
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	f8 94       	cli
     24e:	de bf       	out	0x3e, r29	; 62
     250:	0f be       	out	0x3f, r0	; 63
     252:	cd bf       	out	0x3d, r28	; 61
        uint8_t rcode = 0;

        if(bPollEnable && ((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L)) {
     254:	dc 01       	movw	r26, r24
     256:	57 96       	adiw	r26, 0x17	; 23
     258:	2c 91       	ld	r18, X
     25a:	22 23       	and	r18, r18
     25c:	81 f0       	breq	.+32     	; 0x27e <_ZN7HIDBootILh2EE4PollEv+0x4a>
     25e:	6c 01       	movw	r12, r24
     260:	0e 94 1c 09 	call	0x1238	; 0x1238 <millis>
     264:	f6 01       	movw	r30, r12
     266:	03 89       	ldd	r16, Z+19	; 0x13
     268:	14 89       	ldd	r17, Z+20	; 0x14
     26a:	25 89       	ldd	r18, Z+21	; 0x15
     26c:	36 89       	ldd	r19, Z+22	; 0x16
     26e:	dc 01       	movw	r26, r24
     270:	cb 01       	movw	r24, r22
     272:	80 1b       	sub	r24, r16
     274:	91 0b       	sbc	r25, r17
     276:	a2 0b       	sbc	r26, r18
     278:	b3 0b       	sbc	r27, r19
     27a:	b7 ff       	sbrs	r27, 7
     27c:	02 c0       	rjmp	.+4      	; 0x282 <_ZN7HIDBootILh2EE4PollEv+0x4e>
        return 0;
}

template <const uint8_t BOOT_PROTOCOL>
uint8_t HIDBoot<BOOT_PROTOCOL>::Poll() {
        uint8_t rcode = 0;
     27e:	f1 2c       	mov	r15, r1
                        }

                }
                qNextPollTime = (uint32_t)millis() + bInterval;
        }
        return rcode;
     280:	3a c0       	rjmp	.+116    	; 0x2f6 <_ZN7HIDBootILh2EE4PollEv+0xc2>
                        uint8_t buf[const_buff_len];

                        USBTRACE3("(hidboot.h) i=", i, 0x81);
                        USBTRACE3("(hidboot.h) epInfo[epInterruptInIndex + i].epAddr=", epInfo[epInterruptInIndex + i].epAddr, 0x81);
                        USBTRACE3("(hidboot.h) epInfo[epInterruptInIndex + i].maxPktSize=", epInfo[epInterruptInIndex + i].maxPktSize, 0x81);
                        uint16_t read = (uint16_t)epInfo[epInterruptInIndex + i].maxPktSize;
     282:	83 85       	ldd	r24, Z+11	; 0x0b
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	9a 8b       	std	Y+18, r25	; 0x12
     288:	89 8b       	std	Y+17, r24	; 0x11

                        rcode = pUsb->inTransfer(bAddress, epInfo[epInterruptInIndex + i].epAddr, &read, buf);
     28a:	e1 2c       	mov	r14, r1
     28c:	8e 01       	movw	r16, r28
     28e:	0f 5f       	subi	r16, 0xFF	; 255
     290:	1f 4f       	sbci	r17, 0xFF	; 255
     292:	9e 01       	movw	r18, r28
     294:	2f 5e       	subi	r18, 0xEF	; 239
     296:	3f 4f       	sbci	r19, 0xFF	; 255
     298:	42 85       	ldd	r20, Z+10	; 0x0a
     29a:	66 81       	ldd	r22, Z+6	; 0x06
     29c:	84 81       	ldd	r24, Z+4	; 0x04
     29e:	95 81       	ldd	r25, Z+5	; 0x05
     2a0:	0e 94 44 1b 	call	0x3688	; 0x3688 <_ZN3USB10inTransferEhhPjPhh>
     2a4:	f8 2e       	mov	r15, r24
                        // SOME buggy dongles report extra keys (like sleep) using a 2 byte packet on the wrong endpoint.
                        // Since keyboard and mice must report at least 3 bytes, we ignore the extra data.
                        if(!rcode && read > 2) {
     2a6:	81 11       	cpse	r24, r1
     2a8:	18 c0       	rjmp	.+48     	; 0x2da <_ZN7HIDBootILh2EE4PollEv+0xa6>
     2aa:	29 89       	ldd	r18, Y+17	; 0x11
     2ac:	3a 89       	ldd	r19, Y+18	; 0x12
     2ae:	23 30       	cpi	r18, 0x03	; 3
     2b0:	31 05       	cpc	r19, r1
     2b2:	98 f0       	brcs	.+38     	; 0x2da <_ZN7HIDBootILh2EE4PollEv+0xa6>
                                if(pRptParser[i])
     2b4:	d6 01       	movw	r26, r12
     2b6:	1d 96       	adiw	r26, 0x0d	; 13
     2b8:	8d 91       	ld	r24, X+
     2ba:	9c 91       	ld	r25, X
     2bc:	1e 97       	sbiw	r26, 0x0e	; 14
     2be:	00 97       	sbiw	r24, 0x00	; 0
     2c0:	61 f0       	breq	.+24     	; 0x2da <_ZN7HIDBootILh2EE4PollEv+0xa6>
                                        pRptParser[i]->Parse((USBHID*)this, 0, (uint8_t)read, buf);
     2c2:	dc 01       	movw	r26, r24
     2c4:	ed 91       	ld	r30, X+
     2c6:	fc 91       	ld	r31, X
     2c8:	01 90       	ld	r0, Z+
     2ca:	f0 81       	ld	r31, Z
     2cc:	e0 2d       	mov	r30, r0
     2ce:	8e 01       	movw	r16, r28
     2d0:	0f 5f       	subi	r16, 0xFF	; 255
     2d2:	1f 4f       	sbci	r17, 0xFF	; 255
     2d4:	40 e0       	ldi	r20, 0x00	; 0
     2d6:	b6 01       	movw	r22, r12
     2d8:	09 95       	icall
                                        USBTRACE1("\r\n", 0x80);
#endif
                        }

                }
                qNextPollTime = (uint32_t)millis() + bInterval;
     2da:	0e 94 1c 09 	call	0x1238	; 0x1238 <millis>
     2de:	f6 01       	movw	r30, r12
     2e0:	20 8d       	ldd	r18, Z+24	; 0x18
     2e2:	dc 01       	movw	r26, r24
     2e4:	cb 01       	movw	r24, r22
     2e6:	82 0f       	add	r24, r18
     2e8:	91 1d       	adc	r25, r1
     2ea:	a1 1d       	adc	r26, r1
     2ec:	b1 1d       	adc	r27, r1
     2ee:	83 8b       	std	Z+19, r24	; 0x13
     2f0:	94 8b       	std	Z+20, r25	; 0x14
     2f2:	a5 8b       	std	Z+21, r26	; 0x15
     2f4:	b6 8b       	std	Z+22, r27	; 0x16
        }
        return rcode;
}
     2f6:	8f 2d       	mov	r24, r15
     2f8:	62 96       	adiw	r28, 0x12	; 18
     2fa:	0f b6       	in	r0, 0x3f	; 63
     2fc:	f8 94       	cli
     2fe:	de bf       	out	0x3e, r29	; 62
     300:	0f be       	out	0x3f, r0	; 63
     302:	cd bf       	out	0x3d, r28	; 61
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	1f 91       	pop	r17
     30a:	0f 91       	pop	r16
     30c:	ff 90       	pop	r15
     30e:	ef 90       	pop	r14
     310:	df 90       	pop	r13
     312:	cf 90       	pop	r12
     314:	08 95       	ret

00000316 <_ZN7HIDBootILh2EE4InitEhhb>:
        bNumIface = 0;
        bConfNum = 0;
}

template <const uint8_t BOOT_PROTOCOL>
uint8_t HIDBoot<BOOT_PROTOCOL>::Init(uint8_t parent, uint8_t port, bool lowspeed) {
     316:	2f 92       	push	r2
     318:	3f 92       	push	r3
     31a:	4f 92       	push	r4
     31c:	5f 92       	push	r5
     31e:	6f 92       	push	r6
     320:	7f 92       	push	r7
     322:	8f 92       	push	r8
     324:	9f 92       	push	r9
     326:	af 92       	push	r10
     328:	bf 92       	push	r11
     32a:	cf 92       	push	r12
     32c:	df 92       	push	r13
     32e:	ef 92       	push	r14
     330:	ff 92       	push	r15
     332:	0f 93       	push	r16
     334:	1f 93       	push	r17
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62
     33e:	eb 97       	sbiw	r28, 0x3b	; 59
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	f8 94       	cli
     344:	de bf       	out	0x3e, r29	; 62
     346:	0f be       	out	0x3f, r0	; 63
     348:	cd bf       	out	0x3d, r28	; 61

        USBTRACE("BM Init\r\n");
        //USBTRACE2("totalEndpoints:", (uint8_t) (totalEndpoints(BOOT_PROTOCOL)));
        //USBTRACE2("epMUL:", epMUL(BOOT_PROTOCOL));

        if(bAddress)
     34a:	dc 01       	movw	r26, r24
     34c:	16 96       	adiw	r26, 0x06	; 6
     34e:	5c 90       	ld	r5, X
     350:	51 10       	cpse	r5, r1
     352:	19 c1       	rjmp	.+562    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     354:	42 2e       	mov	r4, r18
     356:	24 2e       	mov	r2, r20
     358:	36 2e       	mov	r3, r22
     35a:	7c 01       	movw	r14, r24
        //uint16_t cd_len = 0;

        uint8_t num_of_conf; // number of configurations
        //uint8_t num_of_intf; // number of interfaces

        AddressPool &addrPool = pUsb->GetAddressPool();
     35c:	fc 01       	movw	r30, r24
     35e:	a4 80       	ldd	r10, Z+4	; 0x04
     360:	b5 80       	ldd	r11, Z+5	; 0x05
        //USBTRACE2("epMUL:", epMUL(BOOT_PROTOCOL));

        if(bAddress)
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;

        bInterval = 0;
     362:	10 8e       	std	Z+24, r1	; 0x18
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
     364:	d5 01       	movw	r26, r10
     366:	ed 91       	ld	r30, X+
     368:	fc 91       	ld	r31, X
     36a:	01 90       	ld	r0, Z+
     36c:	f0 81       	ld	r31, Z
     36e:	e0 2d       	mov	r30, r0
     370:	60 e0       	ldi	r22, 0x00	; 0
     372:	c5 01       	movw	r24, r10
     374:	09 95       	icall
     376:	6c 01       	movw	r12, r24

        if(!p)
     378:	00 97       	sbiw	r24, 0x00	; 0
     37a:	19 f4       	brne	.+6      	; 0x382 <_ZN7HIDBootILh2EE4InitEhhb+0x6c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
     37c:	46 ed       	ldi	r20, 0xD6	; 214
     37e:	54 2e       	mov	r5, r20
     380:	0f c1       	rjmp	.+542    	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>

        if(!p->epinfo) {
     382:	fc 01       	movw	r30, r24
     384:	80 80       	ld	r8, Z
     386:	91 80       	ldd	r9, Z+1	; 0x01
     388:	81 14       	cp	r8, r1
     38a:	91 04       	cpc	r9, r1
     38c:	09 f4       	brne	.+2      	; 0x390 <_ZN7HIDBootILh2EE4InitEhhb+0x7a>
     38e:	fe c0       	rjmp	.+508    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
     390:	37 01       	movw	r6, r14
     392:	f7 e0       	ldi	r31, 0x07	; 7
     394:	6f 0e       	add	r6, r31
     396:	71 1c       	adc	r7, r1
     398:	dc 01       	movw	r26, r24
     39a:	11 96       	adiw	r26, 0x01	; 1
     39c:	7c 92       	st	X, r7
     39e:	6e 92       	st	-X, r6

        p->lowspeed = lowspeed;
     3a0:	14 96       	adiw	r26, 0x04	; 4
     3a2:	4c 92       	st	X, r4

        // Get device descriptor
        rcode = pUsb->getDevDescr(0, 0, 8, (uint8_t*)buf);
     3a4:	8e 01       	movw	r16, r28
     3a6:	06 5d       	subi	r16, 0xD6	; 214
     3a8:	1f 4f       	sbci	r17, 0xFF	; 255
     3aa:	28 e0       	ldi	r18, 0x08	; 8
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	40 e0       	ldi	r20, 0x00	; 0
     3b0:	60 e0       	ldi	r22, 0x00	; 0
     3b2:	f7 01       	movw	r30, r14
     3b4:	84 81       	ldd	r24, Z+4	; 0x04
     3b6:	95 81       	ldd	r25, Z+5	; 0x05
     3b8:	0e 94 06 19 	call	0x320c	; 0x320c <_ZN3USB11getDevDescrEhhjPh>
     3bc:	18 2f       	mov	r17, r24

        if(!rcode)
     3be:	81 11       	cpse	r24, r1
     3c0:	eb c0       	rjmp	.+470    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
                len = (buf[0] > constBufSize) ? constBufSize : buf[0];
     3c2:	1a a5       	ldd	r17, Y+42	; 0x2a

                goto FailGetDevDescr;
        }

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
     3c4:	d6 01       	movw	r26, r12
     3c6:	8d 92       	st	X+, r8
     3c8:	9c 92       	st	X, r9

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
     3ca:	d5 01       	movw	r26, r10
     3cc:	ed 91       	ld	r30, X+
     3ce:	fc 91       	ld	r31, X
     3d0:	02 80       	ldd	r0, Z+2	; 0x02
     3d2:	f3 81       	ldd	r31, Z+3	; 0x03
     3d4:	e0 2d       	mov	r30, r0
     3d6:	22 2d       	mov	r18, r2
     3d8:	40 e0       	ldi	r20, 0x00	; 0
     3da:	63 2d       	mov	r22, r3
     3dc:	c5 01       	movw	r24, r10
     3de:	09 95       	icall
     3e0:	f7 01       	movw	r30, r14
     3e2:	86 83       	std	Z+6, r24	; 0x06

        if(!bAddress)
     3e4:	88 23       	and	r24, r24
     3e6:	09 f4       	brne	.+2      	; 0x3ea <_ZN7HIDBootILh2EE4InitEhhb+0xd4>
     3e8:	d4 c0       	rjmp	.+424    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;

        // Extract Max Packet Size from the device descriptor
        epInfo[0].maxPktSize = (uint8_t)(device->bMaxPacketSize0);
     3ea:	99 a9       	ldd	r25, Y+49	; 0x31
     3ec:	90 87       	std	Z+8, r25	; 0x08

        // Assign new address to the device
        rcode = pUsb->setAddr(0, 0, bAddress);
     3ee:	28 2f       	mov	r18, r24
     3f0:	40 e0       	ldi	r20, 0x00	; 0
     3f2:	60 e0       	ldi	r22, 0x00	; 0
     3f4:	84 81       	ldd	r24, Z+4	; 0x04
     3f6:	95 81       	ldd	r25, Z+5	; 0x05
     3f8:	0e 94 b1 19 	call	0x3362	; 0x3362 <_ZN3USB7setAddrEhhh>
     3fc:	98 2e       	mov	r9, r24
     3fe:	d5 01       	movw	r26, r10
     400:	ed 91       	ld	r30, X+
     402:	fc 91       	ld	r31, X

        if(rcode) {
                p->lowspeed = false;
     404:	d6 01       	movw	r26, r12
     406:	14 96       	adiw	r26, 0x04	; 4
     408:	1c 92       	st	X, r1
        epInfo[0].maxPktSize = (uint8_t)(device->bMaxPacketSize0);

        // Assign new address to the device
        rcode = pUsb->setAddr(0, 0, bAddress);

        if(rcode) {
     40a:	88 23       	and	r24, r24
     40c:	61 f0       	breq	.+24     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
                p->lowspeed = false;
                addrPool.FreeAddress(bAddress);
     40e:	04 80       	ldd	r0, Z+4	; 0x04
     410:	f5 81       	ldd	r31, Z+5	; 0x05
     412:	e0 2d       	mov	r30, r0
     414:	d7 01       	movw	r26, r14
     416:	16 96       	adiw	r26, 0x06	; 6
     418:	6c 91       	ld	r22, X
     41a:	c5 01       	movw	r24, r10
     41c:	09 95       	icall
                bAddress = 0;
     41e:	f7 01       	movw	r30, r14
     420:	16 82       	std	Z+6, r1	; 0x06
                USBTRACE2("setAddr:", rcode);
                return rcode;
     422:	59 2c       	mov	r5, r9
     424:	bd c0       	rjmp	.+378    	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>

        USBTRACE2("Addr:", bAddress);

        p->lowspeed = false;

        p = addrPool.GetUsbDevicePtr(bAddress);
     426:	01 90       	ld	r0, Z+
     428:	f0 81       	ld	r31, Z
     42a:	e0 2d       	mov	r30, r0
     42c:	d7 01       	movw	r26, r14
     42e:	16 96       	adiw	r26, 0x06	; 6
     430:	6c 91       	ld	r22, X
     432:	c5 01       	movw	r24, r10
     434:	09 95       	icall

        if(!p)
     436:	00 97       	sbiw	r24, 0x00	; 0
     438:	09 f4       	brne	.+2      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     43a:	a0 cf       	rjmp	.-192    	; 0x37c <_ZN7HIDBootILh2EE4InitEhhb+0x66>
     43c:	21 2f       	mov	r18, r17
     43e:	13 31       	cpi	r17, 0x13	; 19
     440:	08 f0       	brcs	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     442:	22 e1       	ldi	r18, 0x12	; 18
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;

        p->lowspeed = lowspeed;
     444:	fc 01       	movw	r30, r24
     446:	44 82       	std	Z+4, r4	; 0x04

        if(len)
     448:	21 11       	cpse	r18, r1
     44a:	0f c0       	rjmp	.+30     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
                rcode = pUsb->getDevDescr(bAddress, 0, len, (uint8_t*)buf);

        if(rcode)
                goto FailGetDevDescr;

        num_of_conf = device->bNumConfigurations;
     44c:	3b ac       	ldd	r3, Y+59	; 0x3b
                }

                // GCC will optimize unused stuff away.
                if(BOOT_PROTOCOL & USB_HID_PROTOCOL_MOUSE) {
                        USBTRACE("HID_PROTOCOL_MOUSE\r\n");
                        for(uint8_t i = 0; i < num_of_conf; i++) {
     44e:	41 2c       	mov	r4, r1
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
     450:	33 e9       	ldi	r19, 0x93	; 147
     452:	83 2e       	mov	r8, r19
     454:	31 e0       	ldi	r19, 0x01	; 1
     456:	93 2e       	mov	r9, r19
                                ConfigDescParser<
                                        USB_CLASS_HID,
                                        HID_BOOT_INTF_SUBCLASS,
                                        USB_HID_PROTOCOL_MOUSE,
                                        CP_MASK_COMPARE_ALL> confDescrParserB(this);
     458:	57 01       	movw	r10, r14
     45a:	f2 e0       	ldi	r31, 0x02	; 2
     45c:	af 0e       	add	r10, r31
     45e:	b1 1c       	adc	r11, r1
        theBuffer.pValue = varBuffer;
     460:	6e 01       	movw	r12, r28
     462:	81 e1       	ldi	r24, 0x11	; 17
     464:	c8 0e       	add	r12, r24
     466:	d1 1c       	adc	r13, r1
     468:	38 c0       	rjmp	.+112    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;

        p->lowspeed = lowspeed;

        if(len)
                rcode = pUsb->getDevDescr(bAddress, 0, len, (uint8_t*)buf);
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	8e 01       	movw	r16, r28
     46e:	06 5d       	subi	r16, 0xD6	; 214
     470:	1f 4f       	sbci	r17, 0xFF	; 255
     472:	40 e0       	ldi	r20, 0x00	; 0
     474:	d7 01       	movw	r26, r14
     476:	16 96       	adiw	r26, 0x06	; 6
     478:	6c 91       	ld	r22, X
     47a:	16 97       	sbiw	r26, 0x06	; 6
     47c:	14 96       	adiw	r26, 0x04	; 4
     47e:	8d 91       	ld	r24, X+
     480:	9c 91       	ld	r25, X
     482:	15 97       	sbiw	r26, 0x05	; 5
     484:	0e 94 06 19 	call	0x320c	; 0x320c <_ZN3USB11getDevDescrEhhjPh>
     488:	18 2f       	mov	r17, r24

        if(rcode)
     48a:	81 11       	cpse	r24, r1
     48c:	72 c0       	rjmp	.+228    	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
     48e:	de cf       	rjmp	.-68     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
     490:	9a 82       	std	Y+2, r9	; 0x02
     492:	89 82       	std	Y+1, r8	; 0x01
     494:	bc 82       	std	Y+4, r11	; 0x04
     496:	ab 82       	std	Y+3, r10	; 0x03
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
     498:	1e 86       	std	Y+14, r1	; 0x0e
     49a:	18 8a       	std	Y+16, r1	; 0x10
     49c:	1f 86       	std	Y+15, r1	; 0x0f
     49e:	19 a2       	std	Y+33, r1	; 0x21
     4a0:	1a a2       	std	Y+34, r1	; 0x22
     4a2:	1b a2       	std	Y+35, r1	; 0x23
     4a4:	19 a6       	std	Y+41, r1	; 0x29
        theBuffer.pValue = varBuffer;
     4a6:	df 82       	std	Y+7, r13	; 0x07
     4a8:	ce 82       	std	Y+6, r12	; 0x06
        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
                pBuf = (uint8_t*)pbuf->pValue;
     4aa:	d9 86       	std	Y+9, r13	; 0x09
     4ac:	c8 86       	std	Y+8, r12	; 0x08
                countDown = valueSize = pbuf->valueSize;
     4ae:	8d 81       	ldd	r24, Y+5	; 0x05
     4b0:	8b 87       	std	Y+11, r24	; 0x0b
     4b2:	8a 87       	std	Y+10, r24	; 0x0a

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
        };

        void Initialize(MultiValueBuffer *pbuf) {
                pBuf = (uint8_t*)pbuf->pValue;
     4b4:	dd 86       	std	Y+13, r13	; 0x0d
     4b6:	cc 86       	std	Y+12, r12	; 0x0c
                                        USB_CLASS_HID,
                                        HID_BOOT_INTF_SUBCLASS,
                                        USB_HID_PROTOCOL_MOUSE,
                                        CP_MASK_COMPARE_ALL> confDescrParserB(this);

                                pUsb->getConfDescr(bAddress, 0, i, &confDescrParserB);
     4b8:	8e 01       	movw	r16, r28
     4ba:	0f 5f       	subi	r16, 0xFF	; 255
     4bc:	1f 4f       	sbci	r17, 0xFF	; 255
     4be:	24 2d       	mov	r18, r4
     4c0:	40 e0       	ldi	r20, 0x00	; 0
     4c2:	f7 01       	movw	r30, r14
     4c4:	66 81       	ldd	r22, Z+6	; 0x06
     4c6:	84 81       	ldd	r24, Z+4	; 0x04
     4c8:	95 81       	ldd	r25, Z+5	; 0x05
     4ca:	0e 94 54 19 	call	0x32a8	; 0x32a8 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
                                if(bNumEP == ((uint8_t)(totalEndpoints(BOOT_PROTOCOL))))
     4ce:	d7 01       	movw	r26, r14
     4d0:	52 96       	adiw	r26, 0x12	; 18
     4d2:	8c 91       	ld	r24, X
     4d4:	82 30       	cpi	r24, 0x02	; 2
     4d6:	19 f0       	breq	.+6      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
                }

                // GCC will optimize unused stuff away.
                if(BOOT_PROTOCOL & USB_HID_PROTOCOL_MOUSE) {
                        USBTRACE("HID_PROTOCOL_MOUSE\r\n");
                        for(uint8_t i = 0; i < num_of_conf; i++) {
     4d8:	43 94       	inc	r4
     4da:	43 10       	cpse	r4, r3
     4dc:	d9 cf       	rjmp	.-78     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
                        }
                }
        }
        USBTRACE2("bNumEP:", bNumEP);

        if(bNumEP != (uint8_t)(totalEndpoints(BOOT_PROTOCOL))) {
     4de:	f7 01       	movw	r30, r14
     4e0:	82 89       	ldd	r24, Z+18	; 0x12
     4e2:	82 30       	cpi	r24, 0x02	; 2
     4e4:	09 f0       	breq	.+2      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     4e6:	44 c0       	rjmp	.+136    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
                rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
                goto Fail;
        }

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
     4e8:	93 01       	movw	r18, r6
     4ea:	42 e0       	ldi	r20, 0x02	; 2
     4ec:	66 81       	ldd	r22, Z+6	; 0x06
     4ee:	84 81       	ldd	r24, Z+4	; 0x04
     4f0:	95 81       	ldd	r25, Z+5	; 0x05
     4f2:	0e 94 21 14 	call	0x2842	; 0x2842 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
        //USBTRACE2("setEpInfoEntry returned ", rcode);
        USBTRACE2("Cnf:", bConfNum);

        delay(1000);
     4f6:	68 ee       	ldi	r22, 0xE8	; 232
     4f8:	73 e0       	ldi	r23, 0x03	; 3
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	0e 94 4d 09 	call	0x129a	; 0x129a <delay>

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
     502:	d7 01       	movw	r26, r14
     504:	1f 96       	adiw	r26, 0x0f	; 15
     506:	2c 91       	ld	r18, X
     508:	1f 97       	sbiw	r26, 0x0f	; 15
     50a:	40 e0       	ldi	r20, 0x00	; 0
     50c:	16 96       	adiw	r26, 0x06	; 6
     50e:	6c 91       	ld	r22, X
     510:	16 97       	sbiw	r26, 0x06	; 6
     512:	14 96       	adiw	r26, 0x04	; 4
     514:	8d 91       	ld	r24, X+
     516:	9c 91       	ld	r25, X
     518:	15 97       	sbiw	r26, 0x05	; 5
     51a:	0e 94 1f 1b 	call	0x363e	; 0x363e <_ZN3USB7setConfEhhh>
     51e:	18 2f       	mov	r17, r24

        if(rcode)
     520:	81 11       	cpse	r24, r1
     522:	27 c0       	rjmp	.+78     	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
                goto FailSetConfDescr;

        delay(1000);
     524:	68 ee       	ldi	r22, 0xE8	; 232
     526:	73 e0       	ldi	r23, 0x03	; 3
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0e 94 4d 09 	call	0x129a	; 0x129a <delay>
        USBTRACE2("bNumIface:", bNumIface);

        // Yes, mouse wants SetProtocol and SetIdle too!
        for(uint8_t i = 0; i < epMUL(BOOT_PROTOCOL); i++) {
                USBTRACE2("\r\nInterface:", i);
                rcode = SetProtocol(i, bRptProtoEnable ? HID_RPT_PROTOCOL : USB_HID_BOOT_PROTOCOL);
     530:	f7 01       	movw	r30, r14
     532:	41 8d       	ldd	r20, Z+25	; 0x19
     534:	60 e0       	ldi	r22, 0x00	; 0
     536:	c7 01       	movw	r24, r14
     538:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN6USBHID11SetProtocolEhh>
     53c:	18 2f       	mov	r17, r24
                if(rcode) goto FailSetProtocol;
     53e:	81 11       	cpse	r24, r1
     540:	18 c0       	rjmp	.+48     	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
                USBTRACE2("PROTOCOL SET HID_BOOT rcode:", rcode);
                rcode = SetIdle(i, 0, 0);
     542:	20 e0       	ldi	r18, 0x00	; 0
     544:	40 e0       	ldi	r20, 0x00	; 0
     546:	60 e0       	ldi	r22, 0x00	; 0
     548:	c7 01       	movw	r24, r14
     54a:	0e 94 bd 1c 	call	0x397a	; 0x397a <_ZN6USBHID7SetIdleEhhh>

template <class BASE_CLASS, class LEN_TYPE, class OFFSET_TYPE>
class SinkParser : public BASE_CLASS {
public:

        SinkParser() {
     54e:	89 e9       	ldi	r24, 0x99	; 153
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	9a 83       	std	Y+2, r25	; 0x02
     554:	89 83       	std	Y+1, r24	; 0x01
                USBTRACE2("SET_IDLE rcode:", rcode);
                // if(rcode) goto FailSetIdle; This can fail.
                // Get the RPIPE and just throw it away.
                SinkParser<USBReadParser, uint16_t, uint16_t> sink;
                rcode = GetReportDescr(i, &sink);
     556:	ae 01       	movw	r20, r28
     558:	4f 5f       	subi	r20, 0xFF	; 255
     55a:	5f 4f       	sbci	r21, 0xFF	; 255
     55c:	60 e0       	ldi	r22, 0x00	; 0
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	c7 01       	movw	r24, r14
     562:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <_ZN6USBHID14GetReportDescrEjP13USBReadParser>
                        delay(25);
                }
        }
        USBTRACE("BM configured\r\n");

        bPollEnable = true;
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	d7 01       	movw	r26, r14
     56a:	57 96       	adiw	r26, 0x17	; 23
     56c:	8c 93       	st	X, r24
        return 0;
     56e:	18 c0       	rjmp	.+48     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
                }
        }
        USBTRACE2("bNumEP:", bNumEP);

        if(bNumEP != (uint8_t)(totalEndpoints(BOOT_PROTOCOL))) {
                rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
     570:	11 ed       	ldi	r17, 0xD1	; 209

Fail:
#ifdef DEBUG_USB_HOST
        NotifyFail(rcode);
#endif
        Release();
     572:	d7 01       	movw	r26, r14
     574:	ed 91       	ld	r30, X+
     576:	fc 91       	ld	r31, X
     578:	04 80       	ldd	r0, Z+4	; 0x04
     57a:	f5 81       	ldd	r31, Z+5	; 0x05
     57c:	e0 2d       	mov	r30, r0
     57e:	c7 01       	movw	r24, r14
     580:	09 95       	icall

        return rcode;
     582:	51 2e       	mov	r5, r17
     584:	0d c0       	rjmp	.+26     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
        USBTRACE("BM Init\r\n");
        //USBTRACE2("totalEndpoints:", (uint8_t) (totalEndpoints(BOOT_PROTOCOL)));
        //USBTRACE2("epMUL:", epMUL(BOOT_PROTOCOL));

        if(bAddress)
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
     586:	29 ed       	ldi	r18, 0xD9	; 217
     588:	52 2e       	mov	r5, r18
     58a:	0a c0       	rjmp	.+20     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
        if(!p)
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;

        if(!p->epinfo) {
                USBTRACE("epinfo\r\n");
                return USB_ERROR_EPINFO_IS_NULL;
     58c:	97 ed       	ldi	r25, 0xD7	; 215
     58e:	59 2e       	mov	r5, r25
     590:	07 c0       	rjmp	.+14     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);

        if(!bAddress)
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
     592:	84 ed       	ldi	r24, 0xD4	; 212
     594:	58 2e       	mov	r5, r24
     596:	04 c0       	rjmp	.+8      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>

        device = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);

        if(rcode) {
                // Restore p->epinfo
                p->epinfo = oldep_ptr;
     598:	f6 01       	movw	r30, r12
     59a:	91 82       	std	Z+1, r9	; 0x01
     59c:	80 82       	st	Z, r8

                goto FailGetDevDescr;
     59e:	e9 cf       	rjmp	.-46     	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
        NotifyFail(rcode);
#endif
        Release();

        return rcode;
}
     5a0:	85 2d       	mov	r24, r5
     5a2:	eb 96       	adiw	r28, 0x3b	; 59
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	f8 94       	cli
     5a8:	de bf       	out	0x3e, r29	; 62
     5aa:	0f be       	out	0x3f, r0	; 63
     5ac:	cd bf       	out	0x3d, r28	; 61
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	1f 91       	pop	r17
     5b4:	0f 91       	pop	r16
     5b6:	ff 90       	pop	r15
     5b8:	ef 90       	pop	r14
     5ba:	df 90       	pop	r13
     5bc:	cf 90       	pop	r12
     5be:	bf 90       	pop	r11
     5c0:	af 90       	pop	r10
     5c2:	9f 90       	pop	r9
     5c4:	8f 90       	pop	r8
     5c6:	7f 90       	pop	r7
     5c8:	6f 90       	pop	r6
     5ca:	5f 90       	pop	r5
     5cc:	4f 90       	pop	r4
     5ce:	3f 90       	pop	r3
     5d0:	2f 90       	pop	r2
     5d2:	08 95       	ret

000005d4 <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj>:
        valParser.Initialize(&theBuffer);
        theSkipper.Initialize(&theBuffer);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
     5d4:	3f 92       	push	r3
     5d6:	4f 92       	push	r4
     5d8:	5f 92       	push	r5
     5da:	6f 92       	push	r6
     5dc:	7f 92       	push	r7
     5de:	8f 92       	push	r8
     5e0:	9f 92       	push	r9
     5e2:	af 92       	push	r10
     5e4:	bf 92       	push	r11
     5e6:	cf 92       	push	r12
     5e8:	df 92       	push	r13
     5ea:	ef 92       	push	r14
     5ec:	ff 92       	push	r15
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	00 d0       	rcall	.+0      	; 0x5f8 <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x24>
     5f8:	00 d0       	rcall	.+0      	; 0x5fa <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x26>
     5fa:	cd b7       	in	r28, 0x3d	; 61
     5fc:	de b7       	in	r29, 0x3e	; 62
     5fe:	6c 01       	movw	r12, r24
        uint16_t cntdn = (uint16_t)len;
     600:	7c 83       	std	Y+4, r23	; 0x04
     602:	6b 83       	std	Y+3, r22	; 0x03
        uint8_t *p = (uint8_t*)pbuf;
     604:	5a 83       	std	Y+2, r21	; 0x02
     606:	49 83       	std	Y+1, r20	; 0x01
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
     608:	4c 01       	movw	r8, r24
     60a:	80 e1       	ldi	r24, 0x10	; 16
     60c:	88 0e       	add	r8, r24
     60e:	91 1c       	adc	r9, r1
                                        if(!valParser.Parse(pp, pcntdn))
                                                return false;
                                        confValue = ucd->bConfigurationValue;
                                        break;
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
     610:	56 01       	movw	r10, r12
     612:	a7 e0       	ldi	r26, 0x07	; 7
     614:	aa 0e       	add	r10, r26
     616:	b1 1c       	adc	r11, r1
                                                        break;
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
                                                        break;
                                        }
                                        isGoodInterface = true;
     618:	11 e0       	ldi	r17, 0x01	; 1
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
                        valParser.Initialize(&theBuffer);
                        stateParseDescr = 4;
     61a:	84 e0       	ldi	r24, 0x04	; 4
     61c:	48 2e       	mov	r4, r24
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
     61e:	36 01       	movw	r6, r12
     620:	b2 e1       	ldi	r27, 0x12	; 18
     622:	6b 0e       	add	r6, r27
     624:	71 1c       	adc	r7, r1
                        stateParseDescr = 3;
     626:	93 e0       	ldi	r25, 0x03	; 3
     628:	39 2e       	mov	r3, r25
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
        switch(stateParseDescr) {
                case 0:
                        theBuffer.valueSize = 2;
     62a:	22 e0       	ldi	r18, 0x02	; 2
     62c:	52 2e       	mov	r5, r18
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
     62e:	8b 81       	ldd	r24, Y+3	; 0x03
     630:	9c 81       	ldd	r25, Y+4	; 0x04
     632:	89 2b       	or	r24, r25
     634:	09 f4       	brne	.+2      	; 0x638 <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x64>
     636:	fb c0       	rjmp	.+502    	; 0x82e <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x25a>
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
        switch(stateParseDescr) {
     638:	f6 01       	movw	r30, r12
     63a:	80 a1       	ldd	r24, Z+32	; 0x20
     63c:	82 30       	cpi	r24, 0x02	; 2
     63e:	59 f1       	breq	.+86     	; 0x696 <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0xc2>
     640:	28 f4       	brcc	.+10     	; 0x64c <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x78>
     642:	88 23       	and	r24, r24
     644:	41 f0       	breq	.+16     	; 0x656 <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x82>
     646:	81 30       	cpi	r24, 0x01	; 1
     648:	71 f0       	breq	.+28     	; 0x666 <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x92>
     64a:	f1 cf       	rjmp	.-30     	; 0x62e <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x5a>
     64c:	83 30       	cpi	r24, 0x03	; 3
     64e:	39 f1       	breq	.+78     	; 0x69e <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0xca>
     650:	84 30       	cpi	r24, 0x04	; 4
     652:	c1 f1       	breq	.+112    	; 0x6c4 <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0xf0>
     654:	ec cf       	rjmp	.-40     	; 0x62e <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x5a>
                case 0:
                        theBuffer.valueSize = 2;
     656:	54 82       	std	Z+4, r5	; 0x04
        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
                pBuf = (uint8_t*)pbuf->pValue;
     658:	85 81       	ldd	r24, Z+5	; 0x05
     65a:	96 81       	ldd	r25, Z+6	; 0x06
     65c:	90 87       	std	Z+8, r25	; 0x08
     65e:	87 83       	std	Z+7, r24	; 0x07
                countDown = valueSize = pbuf->valueSize;
     660:	52 86       	std	Z+10, r5	; 0x0a
     662:	51 86       	std	Z+9, r5	; 0x09
                        valParser.Initialize(&theBuffer);
                        stateParseDescr = 1;
     664:	10 a3       	std	Z+32, r17	; 0x20
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
     666:	ae 01       	movw	r20, r28
     668:	4d 5f       	subi	r20, 0xFD	; 253
     66a:	5f 4f       	sbci	r21, 0xFF	; 255
     66c:	be 01       	movw	r22, r28
     66e:	6f 5f       	subi	r22, 0xFF	; 255
     670:	7f 4f       	sbci	r23, 0xFF	; 255
     672:	c5 01       	movw	r24, r10
     674:	0e 94 93 12 	call	0x2526	; 0x2526 <_ZN20MultiByteValueParser5ParseEPPhPj>
     678:	88 23       	and	r24, r24
     67a:	09 f4       	brne	.+2      	; 0x67e <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0xaa>
     67c:	d8 c0       	rjmp	.+432    	; 0x82e <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x25a>
                                return false;
                        dscrLen = *((uint8_t*)theBuffer.pValue);
     67e:	d6 01       	movw	r26, r12
     680:	15 96       	adiw	r26, 0x05	; 5
     682:	ed 91       	ld	r30, X+
     684:	fc 91       	ld	r31, X
     686:	16 97       	sbiw	r26, 0x06	; 6
     688:	80 81       	ld	r24, Z
     68a:	91 96       	adiw	r26, 0x21	; 33
     68c:	8c 93       	st	X, r24
     68e:	91 97       	sbiw	r26, 0x21	; 33
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
     690:	81 81       	ldd	r24, Z+1	; 0x01
     692:	92 96       	adiw	r26, 0x22	; 34
     694:	8c 93       	st	X, r24
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
     696:	f6 01       	movw	r30, r12
     698:	76 82       	std	Z+6, r7	; 0x06
     69a:	65 82       	std	Z+5, r6	; 0x05
                        stateParseDescr = 3;
     69c:	30 a2       	std	Z+32, r3	; 0x20
                case 3:
                        switch(dscrType) {
     69e:	d6 01       	movw	r26, r12
     6a0:	92 96       	adiw	r26, 0x22	; 34
     6a2:	8c 91       	ld	r24, X
     6a4:	92 97       	sbiw	r26, 0x22	; 34
     6a6:	84 30       	cpi	r24, 0x04	; 4
     6a8:	11 f4       	brne	.+4      	; 0x6ae <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0xda>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
     6aa:	93 96       	adiw	r26, 0x23	; 35
     6ac:	1c 92       	st	X, r1
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
     6ae:	f6 01       	movw	r30, r12
     6b0:	81 a1       	ldd	r24, Z+33	; 0x21
     6b2:	82 50       	subi	r24, 0x02	; 2
     6b4:	84 83       	std	Z+4, r24	; 0x04
        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
                pBuf = (uint8_t*)pbuf->pValue;
     6b6:	25 81       	ldd	r18, Z+5	; 0x05
     6b8:	36 81       	ldd	r19, Z+6	; 0x06
     6ba:	30 87       	std	Z+8, r19	; 0x08
     6bc:	27 83       	std	Z+7, r18	; 0x07
                countDown = valueSize = pbuf->valueSize;
     6be:	82 87       	std	Z+10, r24	; 0x0a
     6c0:	81 87       	std	Z+9, r24	; 0x09
                        valParser.Initialize(&theBuffer);
                        stateParseDescr = 4;
     6c2:	40 a2       	std	Z+32, r4	; 0x20
                case 4:
                        switch(dscrType) {
     6c4:	d6 01       	movw	r26, r12
     6c6:	92 96       	adiw	r26, 0x22	; 34
     6c8:	8c 91       	ld	r24, X
     6ca:	84 30       	cpi	r24, 0x04	; 4
     6cc:	b1 f0       	breq	.+44     	; 0x6fa <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x126>
     6ce:	85 30       	cpi	r24, 0x05	; 5
     6d0:	09 f4       	brne	.+2      	; 0x6d4 <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x100>
     6d2:	42 c0       	rjmp	.+132    	; 0x758 <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x184>
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	09 f0       	breq	.+2      	; 0x6da <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x106>
     6d8:	6e c0       	rjmp	.+220    	; 0x7b6 <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x1e2>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
     6da:	ae 01       	movw	r20, r28
     6dc:	4d 5f       	subi	r20, 0xFD	; 253
     6de:	5f 4f       	sbci	r21, 0xFF	; 255
     6e0:	be 01       	movw	r22, r28
     6e2:	6f 5f       	subi	r22, 0xFF	; 255
     6e4:	7f 4f       	sbci	r23, 0xFF	; 255
     6e6:	c5 01       	movw	r24, r10
     6e8:	0e 94 93 12 	call	0x2526	; 0x2526 <_ZN20MultiByteValueParser5ParseEPPhPj>
     6ec:	88 23       	and	r24, r24
     6ee:	09 f4       	brne	.+2      	; 0x6f2 <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x11e>
     6f0:	9e c0       	rjmp	.+316    	; 0x82e <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x25a>
                                                return false;
                                        confValue = ucd->bConfigurationValue;
     6f2:	f6 01       	movw	r30, r12
     6f4:	85 89       	ldd	r24, Z+21	; 0x15
     6f6:	84 a3       	std	Z+36, r24	; 0x24
     6f8:	92 c0       	rjmp	.+292    	; 0x81e <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x24a>
                                        break;
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
     6fa:	ae 01       	movw	r20, r28
     6fc:	4d 5f       	subi	r20, 0xFD	; 253
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	be 01       	movw	r22, r28
     702:	6f 5f       	subi	r22, 0xFF	; 255
     704:	7f 4f       	sbci	r23, 0xFF	; 255
     706:	c5 01       	movw	r24, r10
     708:	0e 94 93 12 	call	0x2526	; 0x2526 <_ZN20MultiByteValueParser5ParseEPPhPj>
     70c:	88 23       	and	r24, r24
     70e:	09 f4       	brne	.+2      	; 0x712 <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x13e>
     710:	8e c0       	rjmp	.+284    	; 0x82e <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x25a>
                                                return false;
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
     712:	d6 01       	movw	r26, r12
     714:	55 96       	adiw	r26, 0x15	; 21
     716:	8c 91       	ld	r24, X
     718:	55 97       	sbiw	r26, 0x15	; 21
     71a:	83 30       	cpi	r24, 0x03	; 3
     71c:	09 f0       	breq	.+2      	; 0x720 <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x14c>
     71e:	7f c0       	rjmp	.+254    	; 0x81e <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x24a>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
     720:	56 96       	adiw	r26, 0x16	; 22
     722:	8c 91       	ld	r24, X
     724:	56 97       	sbiw	r26, 0x16	; 22
     726:	81 30       	cpi	r24, 0x01	; 1
     728:	09 f0       	breq	.+2      	; 0x72c <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x158>
     72a:	79 c0       	rjmp	.+242    	; 0x81e <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x24a>
                                                break;
                                        if(UseOr) {
     72c:	98 96       	adiw	r26, 0x28	; 40
     72e:	9c 91       	ld	r25, X
     730:	98 97       	sbiw	r26, 0x28	; 40
     732:	57 96       	adiw	r26, 0x17	; 23
     734:	8c 91       	ld	r24, X
     736:	99 23       	and	r25, r25
     738:	21 f0       	breq	.+8      	; 0x742 <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x16e>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
     73a:	88 23       	and	r24, r24
     73c:	09 f4       	brne	.+2      	; 0x740 <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x16c>
     73e:	6f c0       	rjmp	.+222    	; 0x81e <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x24a>
     740:	03 c0       	rjmp	.+6      	; 0x748 <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x174>
                                                        break;
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
     742:	82 30       	cpi	r24, 0x02	; 2
     744:	09 f0       	breq	.+2      	; 0x748 <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x174>
     746:	6b c0       	rjmp	.+214    	; 0x81e <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x24a>
                                                        break;
                                        }
                                        isGoodInterface = true;
     748:	f6 01       	movw	r30, r12
     74a:	13 a3       	std	Z+35, r17	; 0x23
                                        ifaceNumber = uid->bInterfaceNumber;
     74c:	92 89       	ldd	r25, Z+18	; 0x12
     74e:	96 a3       	std	Z+38, r25	; 0x26
                                        ifaceAltSet = uid->bAlternateSetting;
     750:	93 89       	ldd	r25, Z+19	; 0x13
     752:	97 a3       	std	Z+39, r25	; 0x27
                                        protoValue = uid->bInterfaceProtocol;
     754:	85 a3       	std	Z+37, r24	; 0x25
     756:	63 c0       	rjmp	.+198    	; 0x81e <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x24a>
                                        break;
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
     758:	ae 01       	movw	r20, r28
     75a:	4d 5f       	subi	r20, 0xFD	; 253
     75c:	5f 4f       	sbci	r21, 0xFF	; 255
     75e:	be 01       	movw	r22, r28
     760:	6f 5f       	subi	r22, 0xFF	; 255
     762:	7f 4f       	sbci	r23, 0xFF	; 255
     764:	c5 01       	movw	r24, r10
     766:	0e 94 93 12 	call	0x2526	; 0x2526 <_ZN20MultiByteValueParser5ParseEPPhPj>
     76a:	88 23       	and	r24, r24
     76c:	09 f4       	brne	.+2      	; 0x770 <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x19c>
     76e:	5f c0       	rjmp	.+190    	; 0x82e <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x25a>
                                                return false;
                                        if(isGoodInterface)
     770:	d6 01       	movw	r26, r12
     772:	93 96       	adiw	r26, 0x23	; 35
     774:	8c 91       	ld	r24, X
     776:	93 97       	sbiw	r26, 0x23	; 35
     778:	88 23       	and	r24, r24
     77a:	09 f4       	brne	.+2      	; 0x77e <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x1aa>
     77c:	50 c0       	rjmp	.+160    	; 0x81e <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x24a>
                                                if(theXtractor)
     77e:	12 96       	adiw	r26, 0x02	; 2
     780:	8d 91       	ld	r24, X+
     782:	9c 91       	ld	r25, X
     784:	13 97       	sbiw	r26, 0x03	; 3
     786:	00 97       	sbiw	r24, 0x00	; 0
     788:	09 f4       	brne	.+2      	; 0x78c <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x1b8>
     78a:	49 c0       	rjmp	.+146    	; 0x81e <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x24a>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
     78c:	dc 01       	movw	r26, r24
     78e:	ed 91       	ld	r30, X+
     790:	fc 91       	ld	r31, X
     792:	01 90       	ld	r0, Z+
     794:	f0 81       	ld	r31, Z
     796:	e0 2d       	mov	r30, r0
     798:	74 01       	movw	r14, r8
     79a:	d6 01       	movw	r26, r12
     79c:	95 96       	adiw	r26, 0x25	; 37
     79e:	0c 91       	ld	r16, X
     7a0:	95 97       	sbiw	r26, 0x25	; 37
     7a2:	97 96       	adiw	r26, 0x27	; 39
     7a4:	2c 91       	ld	r18, X
     7a6:	97 97       	sbiw	r26, 0x27	; 39
     7a8:	96 96       	adiw	r26, 0x26	; 38
     7aa:	4c 91       	ld	r20, X
     7ac:	96 97       	sbiw	r26, 0x26	; 38
     7ae:	94 96       	adiw	r26, 0x24	; 36
     7b0:	6c 91       	ld	r22, X
     7b2:	09 95       	icall
     7b4:	34 c0       	rjmp	.+104    	; 0x81e <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x24a>
                pBuf = (uint8_t*)pbuf->pValue;
                countDown = 0;
        };

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
                switch(nStage) {
     7b6:	f6 01       	movw	r30, r12
     7b8:	85 85       	ldd	r24, Z+13	; 0x0d
     7ba:	88 23       	and	r24, r24
     7bc:	19 f0       	breq	.+6      	; 0x7c4 <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x1f0>
     7be:	81 30       	cpi	r24, 0x01	; 1
     7c0:	39 f0       	breq	.+14     	; 0x7d0 <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x1fc>
     7c2:	28 c0       	rjmp	.+80     	; 0x814 <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x240>
                        case 0:
                                countDown = bytes_to_skip;
     7c4:	81 a1       	ldd	r24, Z+33	; 0x21
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	02 97       	sbiw	r24, 0x02	; 2
     7ca:	97 87       	std	Z+15, r25	; 0x0f
     7cc:	86 87       	std	Z+14, r24	; 0x0e
                                nStage++;
     7ce:	15 87       	std	Z+13, r17	; 0x0d
     7d0:	2b 81       	ldd	r18, Y+3	; 0x03
     7d2:	3c 81       	ldd	r19, Y+4	; 0x04
     7d4:	89 81       	ldd	r24, Y+1	; 0x01
     7d6:	9a 81       	ldd	r25, Y+2	; 0x02
     7d8:	78 2f       	mov	r23, r24
     7da:	69 2f       	mov	r22, r25
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
     7dc:	f6 01       	movw	r30, r12
     7de:	46 85       	ldd	r20, Z+14	; 0x0e
     7e0:	57 85       	ldd	r21, Z+15	; 0x0f
     7e2:	41 15       	cp	r20, r1
     7e4:	51 05       	cpc	r21, r1
     7e6:	81 f0       	breq	.+32     	; 0x808 <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x234>
     7e8:	01 96       	adiw	r24, 0x01	; 1
     7ea:	21 15       	cp	r18, r1
     7ec:	31 05       	cpc	r19, r1
     7ee:	29 f4       	brne	.+10     	; 0x7fa <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x226>
     7f0:	79 83       	std	Y+1, r23	; 0x01
     7f2:	6a 83       	std	Y+2, r22	; 0x02
     7f4:	1c 82       	std	Y+4, r1	; 0x04
     7f6:	1b 82       	std	Y+3, r1	; 0x03
     7f8:	0d c0       	rjmp	.+26     	; 0x814 <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x240>
     7fa:	41 50       	subi	r20, 0x01	; 1
     7fc:	51 09       	sbc	r21, r1
     7fe:	57 87       	std	Z+15, r21	; 0x0f
     800:	46 87       	std	Z+14, r20	; 0x0e
     802:	21 50       	subi	r18, 0x01	; 1
     804:	31 09       	sbc	r19, r1
     806:	e8 cf       	rjmp	.-48     	; 0x7d8 <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x204>
     808:	9a 83       	std	Y+2, r25	; 0x02
     80a:	89 83       	std	Y+1, r24	; 0x01
     80c:	3c 83       	std	Y+4, r19	; 0x04
     80e:	2b 83       	std	Y+3, r18	; 0x03

                                if(!countDown)
                                        nStage = 0;
     810:	f6 01       	movw	r30, r12
     812:	15 86       	std	Z+13, r1	; 0x0d
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
     814:	f6 01       	movw	r30, r12
     816:	86 85       	ldd	r24, Z+14	; 0x0e
     818:	97 85       	ldd	r25, Z+15	; 0x0f
     81a:	89 2b       	or	r24, r25
     81c:	41 f4       	brne	.+16     	; 0x82e <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x25a>
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
     81e:	d6 01       	movw	r26, r12
     820:	16 96       	adiw	r26, 0x06	; 6
     822:	9c 92       	st	X, r9
     824:	8e 92       	st	-X, r8
     826:	15 97       	sbiw	r26, 0x05	; 5
                        stateParseDescr = 0;
     828:	90 96       	adiw	r26, 0x20	; 32
     82a:	1c 92       	st	X, r1
     82c:	00 cf       	rjmp	.-512    	; 0x62e <_ZN16ConfigDescParserILh3ELh1ELh2ELh7EE5ParseEjPKhRKj+0x5a>
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
                if(!ParseDescriptor(&p, &cntdn))
                        return;
}
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	df 91       	pop	r29
     838:	cf 91       	pop	r28
     83a:	1f 91       	pop	r17
     83c:	0f 91       	pop	r16
     83e:	ff 90       	pop	r15
     840:	ef 90       	pop	r14
     842:	df 90       	pop	r13
     844:	cf 90       	pop	r12
     846:	bf 90       	pop	r11
     848:	af 90       	pop	r10
     84a:	9f 90       	pop	r9
     84c:	8f 90       	pop	r8
     84e:	7f 90       	pop	r7
     850:	6f 90       	pop	r6
     852:	5f 90       	pop	r5
     854:	4f 90       	pop	r4
     856:	3f 90       	pop	r3
     858:	08 95       	ret

0000085a <_ZN8SPIClass14endTransactionEv.part.3>:
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
     85a:	9f b7       	in	r25, 0x3f	; 63
      #endif
      noInterrupts();
     85c:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
     85e:	20 91 86 04 	lds	r18, 0x0486	; 0x800486 <_ZN8SPIClass13interruptModeE>
     862:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <_ZN8SPIClass13interruptSaveE>
     866:	21 30       	cpi	r18, 0x01	; 1
     868:	19 f4       	brne	.+6      	; 0x870 <_ZN8SPIClass14endTransactionEv.part.3+0x16>
        SPI_AVR_EIMSK = interruptSave;
     86a:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
     86c:	9f bf       	out	0x3f, r25	; 63
     86e:	08 95       	ret
      } else
      #endif
      {
        SREG = interruptSave;
     870:	8f bf       	out	0x3f, r24	; 63
     872:	08 95       	ret

00000874 <_ZL17push_mouse_updateP12_MouseUpdate.constprop.14>:
USB     Usb;
USBHub     Hub(&Usb);
HIDBoot<USB_HID_PROTOCOL_MOUSE>    HidMouse(&Usb);
MouseRptParser                               Prs;

static void push_mouse_update(MouseUpdate *mouse_update){
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	cd b7       	in	r28, 0x3d	; 61
     87a:	de b7       	in	r29, 0x3e	; 62
     87c:	2a 97       	sbiw	r28, 0x0a	; 10
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	f8 94       	cli
     882:	de bf       	out	0x3e, r29	; 62
     884:	0f be       	out	0x3f, r0	; 63
     886:	cd bf       	out	0x3d, r28	; 61
	stream = pb_ostream_from_buffer(rec.buffer, sizeof(rec.buffer));
     888:	40 e2       	ldi	r20, 0x20	; 32
     88a:	50 e0       	ldi	r21, 0x00	; 0
     88c:	68 ea       	ldi	r22, 0xA8	; 168
     88e:	73 e0       	ldi	r23, 0x03	; 3
     890:	ce 01       	movw	r24, r28
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	0e 94 c9 0b 	call	0x1792	; 0x1792 <pb_ostream_from_buffer>
     898:	8a e0       	ldi	r24, 0x0A	; 10
     89a:	fe 01       	movw	r30, r28
     89c:	31 96       	adiw	r30, 0x01	; 1
     89e:	a8 e9       	ldi	r26, 0x98	; 152
     8a0:	b3 e0       	ldi	r27, 0x03	; 3
     8a2:	01 90       	ld	r0, Z+
     8a4:	0d 92       	st	X+, r0
     8a6:	8a 95       	dec	r24
     8a8:	e1 f7       	brne	.-8      	; 0x8a2 <_ZL17push_mouse_updateP12_MouseUpdate.constprop.14+0x2e>
	status = pb_encode_delimited(&stream, MouseUpdate_fields, mouse_update);
     8aa:	42 ea       	ldi	r20, 0xA2	; 162
     8ac:	53 e0       	ldi	r21, 0x03	; 3
     8ae:	66 e0       	ldi	r22, 0x06	; 6
     8b0:	71 e0       	ldi	r23, 0x01	; 1
     8b2:	88 e9       	ldi	r24, 0x98	; 152
     8b4:	93 e0       	ldi	r25, 0x03	; 3
     8b6:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <pb_encode_delimited>
     8ba:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <status>

	if(status == true){
     8be:	88 23       	and	r24, r24
     8c0:	19 f1       	breq	.+70     	; 0x908 <__stack+0x9>
		status = q_push(&q, &rec);
     8c2:	68 ea       	ldi	r22, 0xA8	; 168
     8c4:	73 e0       	ldi	r23, 0x03	; 3
     8c6:	88 ec       	ldi	r24, 0xC8	; 200
     8c8:	93 e0       	ldi	r25, 0x03	; 3
     8ca:	0e 94 a9 0a 	call	0x1552	; 0x1552 <q_push>
     8ce:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <status>
		if(status == false){
     8d2:	81 11       	cpse	r24, r1
     8d4:	34 c0       	rjmp	.+104    	; 0x93e <__stack+0x3f>
			Serial.println("Circular Buffer Overflow!");
     8d6:	6d e2       	ldi	r22, 0x2D	; 45
     8d8:	71 e0       	ldi	r23, 0x01	; 1
     8da:	8e ed       	ldi	r24, 0xDE	; 222
     8dc:	93 e0       	ldi	r25, 0x03	; 3
     8de:	0e 94 c0 08 	call	0x1180	; 0x1180 <_ZN5Print7printlnEPKc>
			delay(100);
     8e2:	64 e6       	ldi	r22, 0x64	; 100
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 4d 09 	call	0x129a	; 0x129a <delay>
			resetFunc();
     8ee:	e0 91 dc 03 	lds	r30, 0x03DC	; 0x8003dc <resetFunc>
     8f2:	f0 91 dd 03 	lds	r31, 0x03DD	; 0x8003dd <resetFunc+0x1>
	}
	else{
		Serial.println("PB Encoding Error!");
		Serial.println(PB_GET_ERROR(&stream));
	}
}
     8f6:	2a 96       	adiw	r28, 0x0a	; 10
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	f8 94       	cli
     8fc:	de bf       	out	0x3e, r29	; 62
     8fe:	0f be       	out	0x3f, r0	; 63
     900:	cd bf       	out	0x3d, r28	; 61
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
	if(status == true){
		status = q_push(&q, &rec);
		if(status == false){
			Serial.println("Circular Buffer Overflow!");
			delay(100);
			resetFunc();
     906:	09 94       	ijmp
		}
	}
	else{
		Serial.println("PB Encoding Error!");
     908:	67 e4       	ldi	r22, 0x47	; 71
     90a:	71 e0       	ldi	r23, 0x01	; 1
     90c:	8e ed       	ldi	r24, 0xDE	; 222
     90e:	93 e0       	ldi	r25, 0x03	; 3
     910:	0e 94 c0 08 	call	0x1180	; 0x1180 <_ZN5Print7printlnEPKc>
		Serial.println(PB_GET_ERROR(&stream));
     914:	60 91 a0 03 	lds	r22, 0x03A0	; 0x8003a0 <stream+0x8>
     918:	70 91 a1 03 	lds	r23, 0x03A1	; 0x8003a1 <stream+0x9>
     91c:	61 15       	cp	r22, r1
     91e:	71 05       	cpc	r23, r1
     920:	11 f4       	brne	.+4      	; 0x926 <__stack+0x27>
     922:	66 e2       	ldi	r22, 0x26	; 38
     924:	71 e0       	ldi	r23, 0x01	; 1
     926:	8e ed       	ldi	r24, 0xDE	; 222
     928:	93 e0       	ldi	r25, 0x03	; 3
	}
}
     92a:	2a 96       	adiw	r28, 0x0a	; 10
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	f8 94       	cli
     930:	de bf       	out	0x3e, r29	; 62
     932:	0f be       	out	0x3f, r0	; 63
     934:	cd bf       	out	0x3d, r28	; 61
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
			resetFunc();
		}
	}
	else{
		Serial.println("PB Encoding Error!");
		Serial.println(PB_GET_ERROR(&stream));
     93a:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <_ZN5Print7printlnEPKc>
	}
}
     93e:	2a 96       	adiw	r28, 0x0a	; 10
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	de bf       	out	0x3e, r29	; 62
     946:	0f be       	out	0x3f, r0	; 63
     948:	cd bf       	out	0x3d, r28	; 61
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	08 95       	ret

00000950 <_ZN14MouseRptParser18OnMiddleButtonDownEP9MOUSEINFO>:
	mouse_update.type = MouseUpdate_Type_MIDDLE;
	push_mouse_update(&mouse_update);
};
void MouseRptParser::OnMiddleButtonDown (MOUSEINFO *mi)
{
	mouse_update = MouseUpdate_init_zero;
     950:	e2 ea       	ldi	r30, 0xA2	; 162
     952:	f3 e0       	ldi	r31, 0x03	; 3
     954:	14 82       	std	Z+4, r1	; 0x04
     956:	13 82       	std	Z+3, r1	; 0x03
	mouse_update.type = MouseUpdate_Type_MIDDLE;
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	80 83       	st	Z, r24
	mouse_update.x = 1;
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	92 83       	std	Z+2, r25	; 0x02
     962:	81 83       	std	Z+1, r24	; 0x01
	push_mouse_update(&mouse_update);
     964:	0c 94 3a 04 	jmp	0x874	; 0x874 <_ZL17push_mouse_updateP12_MouseUpdate.constprop.14>

00000968 <_ZN14MouseRptParser16OnMiddleButtonUpEP9MOUSEINFO>:
	mouse_update.x = 1;
	push_mouse_update(&mouse_update);
};
void MouseRptParser::OnMiddleButtonUp (MOUSEINFO *mi)
{
	mouse_update = MouseUpdate_init_zero;
     968:	e2 ea       	ldi	r30, 0xA2	; 162
     96a:	f3 e0       	ldi	r31, 0x03	; 3
     96c:	12 82       	std	Z+2, r1	; 0x02
     96e:	11 82       	std	Z+1, r1	; 0x01
     970:	14 82       	std	Z+4, r1	; 0x04
     972:	13 82       	std	Z+3, r1	; 0x03
	mouse_update.type = MouseUpdate_Type_MIDDLE;
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	80 83       	st	Z, r24
	push_mouse_update(&mouse_update);
     978:	0c 94 3a 04 	jmp	0x874	; 0x874 <_ZL17push_mouse_updateP12_MouseUpdate.constprop.14>

0000097c <_ZN14MouseRptParser17OnRightButtonDownEP9MOUSEINFO>:
	mouse_update.type = MouseUpdate_Type_RIGHT;
	push_mouse_update(&mouse_update);
};
void MouseRptParser::OnRightButtonDown  (MOUSEINFO *mi)
{
	mouse_update = MouseUpdate_init_zero;
     97c:	e2 ea       	ldi	r30, 0xA2	; 162
     97e:	f3 e0       	ldi	r31, 0x03	; 3
     980:	14 82       	std	Z+4, r1	; 0x04
     982:	13 82       	std	Z+3, r1	; 0x03
	mouse_update.type = MouseUpdate_Type_RIGHT;
     984:	82 e0       	ldi	r24, 0x02	; 2
     986:	80 83       	st	Z, r24
	mouse_update.x = 1;
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	92 83       	std	Z+2, r25	; 0x02
     98e:	81 83       	std	Z+1, r24	; 0x01
	push_mouse_update(&mouse_update);
     990:	0c 94 3a 04 	jmp	0x874	; 0x874 <_ZL17push_mouse_updateP12_MouseUpdate.constprop.14>

00000994 <_ZN14MouseRptParser15OnRightButtonUpEP9MOUSEINFO>:
	mouse_update.x = 1;
	push_mouse_update(&mouse_update);
};
void MouseRptParser::OnRightButtonUp  (MOUSEINFO *mi)
{
	mouse_update = MouseUpdate_init_zero;
     994:	e2 ea       	ldi	r30, 0xA2	; 162
     996:	f3 e0       	ldi	r31, 0x03	; 3
     998:	12 82       	std	Z+2, r1	; 0x02
     99a:	11 82       	std	Z+1, r1	; 0x01
     99c:	14 82       	std	Z+4, r1	; 0x04
     99e:	13 82       	std	Z+3, r1	; 0x03
	mouse_update.type = MouseUpdate_Type_RIGHT;
     9a0:	82 e0       	ldi	r24, 0x02	; 2
     9a2:	80 83       	st	Z, r24
	push_mouse_update(&mouse_update);
     9a4:	0c 94 3a 04 	jmp	0x874	; 0x874 <_ZL17push_mouse_updateP12_MouseUpdate.constprop.14>

000009a8 <_ZN14MouseRptParser16OnLeftButtonDownEP9MOUSEINFO>:
	mouse_update.type = MouseUpdate_Type_LEFT;
	push_mouse_update(&mouse_update);
};
void MouseRptParser::OnLeftButtonDown (MOUSEINFO *mi)
{
	mouse_update = MouseUpdate_init_zero;
     9a8:	e2 ea       	ldi	r30, 0xA2	; 162
     9aa:	f3 e0       	ldi	r31, 0x03	; 3
     9ac:	10 82       	st	Z, r1
     9ae:	14 82       	std	Z+4, r1	; 0x04
     9b0:	13 82       	std	Z+3, r1	; 0x03
	mouse_update.type = MouseUpdate_Type_LEFT;
	mouse_update.x = 1;
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	92 83       	std	Z+2, r25	; 0x02
     9b8:	81 83       	std	Z+1, r24	; 0x01
	push_mouse_update(&mouse_update);
     9ba:	0c 94 3a 04 	jmp	0x874	; 0x874 <_ZL17push_mouse_updateP12_MouseUpdate.constprop.14>

000009be <_ZN14MouseRptParser14OnLeftButtonUpEP9MOUSEINFO>:
	mouse_update.y = mi->dY;
	push_mouse_update(&mouse_update);
};
void MouseRptParser::OnLeftButtonUp  (MOUSEINFO *mi)
{
	mouse_update = MouseUpdate_init_zero;
     9be:	e2 ea       	ldi	r30, 0xA2	; 162
     9c0:	f3 e0       	ldi	r31, 0x03	; 3
     9c2:	10 82       	st	Z, r1
     9c4:	12 82       	std	Z+2, r1	; 0x02
     9c6:	11 82       	std	Z+1, r1	; 0x01
     9c8:	14 82       	std	Z+4, r1	; 0x04
     9ca:	13 82       	std	Z+3, r1	; 0x03
	mouse_update.type = MouseUpdate_Type_LEFT;
	push_mouse_update(&mouse_update);
     9cc:	0c 94 3a 04 	jmp	0x874	; 0x874 <_ZL17push_mouse_updateP12_MouseUpdate.constprop.14>

000009d0 <_ZN14MouseRptParser11OnMouseMoveEP9MOUSEINFO>:
}

void MouseRptParser::OnMouseMove(MOUSEINFO *mi)
{
	mouse_update = MouseUpdate_init_zero;
	mouse_update.type = MouseUpdate_Type_XY;
     9d0:	e2 ea       	ldi	r30, 0xA2	; 162
     9d2:	f3 e0       	ldi	r31, 0x03	; 3
     9d4:	83 e0       	ldi	r24, 0x03	; 3
     9d6:	80 83       	st	Z, r24
	mouse_update.x = mi->dX;
     9d8:	db 01       	movw	r26, r22
     9da:	11 96       	adiw	r26, 0x01	; 1
     9dc:	8c 91       	ld	r24, X
     9de:	11 97       	sbiw	r26, 0x01	; 1
     9e0:	08 2e       	mov	r0, r24
     9e2:	00 0c       	add	r0, r0
     9e4:	99 0b       	sbc	r25, r25
     9e6:	92 83       	std	Z+2, r25	; 0x02
     9e8:	81 83       	std	Z+1, r24	; 0x01
	mouse_update.y = mi->dY;
     9ea:	12 96       	adiw	r26, 0x02	; 2
     9ec:	8c 91       	ld	r24, X
     9ee:	08 2e       	mov	r0, r24
     9f0:	00 0c       	add	r0, r0
     9f2:	99 0b       	sbc	r25, r25
     9f4:	94 83       	std	Z+4, r25	; 0x04
     9f6:	83 83       	std	Z+3, r24	; 0x03
	push_mouse_update(&mouse_update);
     9f8:	0c 94 3a 04 	jmp	0x874	; 0x874 <_ZL17push_mouse_updateP12_MouseUpdate.constprop.14>

000009fc <_ZN8SPIClass16beginTransactionE11SPISettings>:

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
     9fc:	20 91 86 04 	lds	r18, 0x0486	; 0x800486 <_ZN8SPIClass13interruptModeE>
     a00:	22 23       	and	r18, r18
     a02:	99 f0       	breq	.+38     	; 0xa2a <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
      uint8_t sreg = SREG;
     a04:	4f b7       	in	r20, 0x3f	; 63
      noInterrupts();
     a06:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
     a08:	20 91 86 04 	lds	r18, 0x0486	; 0x800486 <_ZN8SPIClass13interruptModeE>
     a0c:	21 30       	cpi	r18, 0x01	; 1
     a0e:	59 f4       	brne	.+22     	; 0xa26 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
        interruptSave = SPI_AVR_EIMSK;
     a10:	2d b3       	in	r18, 0x1d	; 29
     a12:	20 93 84 04 	sts	0x0484, r18	; 0x800484 <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
     a16:	3d b3       	in	r19, 0x1d	; 29
     a18:	20 91 85 04 	lds	r18, 0x0485	; 0x800485 <_ZN8SPIClass13interruptMaskE>
     a1c:	20 95       	com	r18
     a1e:	23 23       	and	r18, r19
     a20:	2d bb       	out	0x1d, r18	; 29
        SREG = sreg;
     a22:	4f bf       	out	0x3f, r20	; 63
     a24:	02 c0       	rjmp	.+4      	; 0xa2a <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
      } else
      #endif
      {
        interruptSave = sreg;
     a26:	40 93 84 04 	sts	0x0484, r20	; 0x800484 <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
     a2a:	8c bd       	out	0x2c, r24	; 44
    SPSR = settings.spsr;
     a2c:	9d bd       	out	0x2d, r25	; 45
     a2e:	08 95       	ret

00000a30 <loop>:
	digitalWrite(8, LOW);
}

void loop()
{
	Usb.Task();
     a30:	81 e2       	ldi	r24, 0x21	; 33
     a32:	93 e0       	ldi	r25, 0x03	; 3
     a34:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <_ZN3USB4TaskEv>
	if(q_isEmpty(&q) == false){
     a38:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <q+0x10>
     a3c:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <q+0x11>
     a40:	89 2b       	or	r24, r25
     a42:	11 f0       	breq	.+4      	; 0xa48 <loop+0x18>
		digitalWrite(8, HIGH);
     a44:	61 e0       	ldi	r22, 0x01	; 1
     a46:	01 c0       	rjmp	.+2      	; 0xa4a <loop+0x1a>
	}
	else{
		digitalWrite(8, LOW);
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	88 e0       	ldi	r24, 0x08	; 8
     a4c:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <digitalWrite>

00000a50 <_ZN4TPinI5PortbLh2EE3SetEv>:
#ifdef USE_PORTA

MAKE_PORT(PORTA, DDRA, PINA, Porta, 'A')
#endif
#ifdef USE_PORTB
MAKE_PORT(PORTB, DDRB, PINB, Portb, 'B')
     a50:	2a 9a       	sbi	0x05, 2	; 5
     a52:	08 95       	ret

00000a54 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.5>:
        return;
}

/* single host register read    */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
     a54:	cf 93       	push	r28
     a56:	c8 2f       	mov	r28, r24
        XMEM_ACQUIRE_SPI();
#if defined(SPI_HAS_TRANSACTION)
        USB_SPI.beginTransaction(SPISettings(26000000, MSBFIRST, SPI_MODE0)); // The MAX3421E can handle up to 26MHz, use MSB First and SPI mode 0
     a58:	80 e5       	ldi	r24, 0x50	; 80
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	0e 94 fe 04 	call	0x9fc	; 0x9fc <_ZN8SPIClass16beginTransactionE11SPISettings>
     a60:	2a 98       	cbi	0x05, 2	; 5
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
     a62:	ce bd       	out	0x2e, r28	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
     a64:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
     a66:	0d b4       	in	r0, 0x2d	; 45
     a68:	07 fe       	sbrs	r0, 7
     a6a:	fd cf       	rjmp	.-6      	; 0xa66 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.5+0x12>
    return SPDR;
     a6c:	8e b5       	in	r24, 0x2e	; 46
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
     a6e:	1e bc       	out	0x2e, r1	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
     a70:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
     a72:	0d b4       	in	r0, 0x2d	; 45
     a74:	07 fe       	sbrs	r0, 7
     a76:	fd cf       	rjmp	.-6      	; 0xa72 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.5+0x1e>
    return SPDR;
     a78:	ce b5       	in	r28, 0x2e	; 46
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
        SPI_SS::Set();
#elif !defined(SPDR) || defined(SPI_HAS_TRANSACTION)
        USB_SPI.transfer(reg);
        uint8_t rv = USB_SPI.transfer(0); // Send empty byte
        SPI_SS::Set();
     a7a:	0e 94 28 05 	call	0xa50	; 0xa50 <_ZN4TPinI5PortbLh2EE3SetEv>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
     a7e:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <_ZN8SPIClass13interruptModeE>
     a82:	81 11       	cpse	r24, r1
     a84:	0e 94 2d 04 	call	0x85a	; 0x85a <_ZN8SPIClass14endTransactionEv.part.3>
#if defined(SPI_HAS_TRANSACTION)
        USB_SPI.endTransaction();
#endif
        XMEM_RELEASE_SPI();
        return (rv);
}
     a88:	8c 2f       	mov	r24, r28
     a8a:	cf 91       	pop	r28
     a8c:	08 95       	ret

00000a8e <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>:
#endif
};

/* write single byte into MAX3421 register */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	c8 2f       	mov	r28, r24
     a94:	d6 2f       	mov	r29, r22
        XMEM_ACQUIRE_SPI();
#if defined(SPI_HAS_TRANSACTION)
        USB_SPI.beginTransaction(SPISettings(26000000, MSBFIRST, SPI_MODE0)); // The MAX3421E can handle up to 26MHz, use MSB First and SPI mode 0
     a96:	80 e5       	ldi	r24, 0x50	; 80
     a98:	91 e0       	ldi	r25, 0x01	; 1
     a9a:	0e 94 fe 04 	call	0x9fc	; 0x9fc <_ZN8SPIClass16beginTransactionE11SPISettings>
     a9e:	2a 98       	cbi	0x05, 2	; 5
        c[0] = reg | 0x02;
        c[1] = data;
        spi4teensy3::send(c, 2);
#elif defined(SPI_HAS_TRANSACTION) && !defined(ESP8266) && !defined(ESP32)
        uint8_t c[2];
        c[0] = reg | 0x02;
     aa0:	c2 60       	ori	r28, 0x02	; 2
    return out.val;
  }
  inline static void transfer(void *buf, size_t count) {
    if (count == 0) return;
    uint8_t *p = (uint8_t *)buf;
    SPDR = *p;
     aa2:	ce bd       	out	0x2e, r28	; 46
    while (--count > 0) {
      uint8_t out = *(p + 1);
      while (!(SPSR & _BV(SPIF))) ;
     aa4:	0d b4       	in	r0, 0x2d	; 45
     aa6:	07 fe       	sbrs	r0, 7
     aa8:	fd cf       	rjmp	.-6      	; 0xaa4 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6+0x16>
      uint8_t in = SPDR;
     aaa:	8e b5       	in	r24, 0x2e	; 46
      SPDR = out;
     aac:	de bd       	out	0x2e, r29	; 46
      *p++ = in;
    }
    while (!(SPSR & _BV(SPIF))) ;
     aae:	0d b4       	in	r0, 0x2d	; 45
     ab0:	07 fe       	sbrs	r0, 7
     ab2:	fd cf       	rjmp	.-6      	; 0xaae <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6+0x20>
    *p = SPDR;
     ab4:	8e b5       	in	r24, 0x2e	; 46
        while(!(SPSR & (1 << SPIF)));
        SPDR = data;
        while(!(SPSR & (1 << SPIF)));
#endif

        SPI_SS::Set();
     ab6:	0e 94 28 05 	call	0xa50	; 0xa50 <_ZN4TPinI5PortbLh2EE3SetEv>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
     aba:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <_ZN8SPIClass13interruptModeE>
     abe:	88 23       	and	r24, r24
     ac0:	21 f0       	breq	.+8      	; 0xaca <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6+0x3c>
#if defined(SPI_HAS_TRANSACTION)
        USB_SPI.endTransaction();
#endif
        XMEM_RELEASE_SPI();
        return;
};
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	0c 94 2d 04 	jmp	0x85a	; 0x85a <_ZN8SPIClass14endTransactionEv.part.3>
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	08 95       	ret

00000ad0 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv>:

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
     ad0:	88 ef       	ldi	r24, 0xF8	; 248
     ad2:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.5>
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
        switch(bus_sample) { //start full-speed or low-speed host
     ad6:	80 7c       	andi	r24, 0xC0	; 192
     ad8:	80 34       	cpi	r24, 0x40	; 64
     ada:	a1 f0       	breq	.+40     	; 0xb04 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0x34>
     adc:	18 f4       	brcc	.+6      	; 0xae4 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0x14>
     ade:	88 23       	and	r24, r24
     ae0:	01 f1       	breq	.+64     	; 0xb22 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0x52>
     ae2:	08 95       	ret
     ae4:	80 38       	cpi	r24, 0x80	; 128
     ae6:	19 f0       	breq	.+6      	; 0xaee <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0x1e>
     ae8:	80 3c       	cpi	r24, 0xC0	; 192
     aea:	b9 f0       	breq	.+46     	; 0xb1a <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0x4a>
     aec:	08 95       	ret
                case( bmJSTATUS):
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
     aee:	88 ed       	ldi	r24, 0xD8	; 216
     af0:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.5>
     af4:	81 fd       	sbrc	r24, 1
     af6:	0b c0       	rjmp	.+22     	; 0xb0e <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0x3e>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
     af8:	69 ec       	ldi	r22, 0xC9	; 201
     afa:	88 ed       	ldi	r24, 0xD8	; 216
     afc:	0e 94 47 05 	call	0xa8e	; 0xa8e <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
                                vbusState = FSHOST;
     b00:	82 e0       	ldi	r24, 0x02	; 2
     b02:	0c c0       	rjmp	.+24     	; 0xb1c <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0x4c>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
                                vbusState = LSHOST;
                        }
                        break;
                case( bmKSTATUS):
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
     b04:	88 ed       	ldi	r24, 0xD8	; 216
     b06:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.5>
     b0a:	81 fd       	sbrc	r24, 1
     b0c:	f5 cf       	rjmp	.-22     	; 0xaf8 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0x28>
                case( bmJSTATUS):
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
                                vbusState = FSHOST;
                        } else {
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
     b0e:	6b ec       	ldi	r22, 0xCB	; 203
     b10:	88 ed       	ldi	r24, 0xD8	; 216
     b12:	0e 94 47 05 	call	0xa8e	; 0xa8e <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
                                vbusState = LSHOST;
     b16:	83 e0       	ldi	r24, 0x03	; 3
     b18:	01 c0       	rjmp	.+2      	; 0xb1c <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0x4c>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
                                vbusState = FSHOST;
                        }
                        break;
                case( bmSE1): //illegal state
                        vbusState = SE1;
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <__data_end>
                        break;
     b20:	08 95       	ret
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
     b22:	61 ed       	ldi	r22, 0xD1	; 209
     b24:	88 ed       	ldi	r24, 0xD8	; 216
     b26:	0e 94 47 05 	call	0xa8e	; 0xa8e <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
                        vbusState = SE0;
     b2a:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <__data_end>
     b2e:	08 95       	ret

00000b30 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	8c 01       	movw	r16, r24
     b3a:	22 9a       	sbi	0x04, 2	; 4
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
        SPI_SS::Set();
     b3c:	0e 94 28 05 	call	0xa50	; 0xa50 <_ZN4TPinI5PortbLh2EE3SetEv>
                SPI_SS::SetDirWrite();
                SPI_SS::Set();
        }
#elif defined(SPI_HAS_TRANSACTION)
        static void init() {
                USB_SPI.begin(); // The SPI library with transaction will take care of setting up the pins - settings is set in beginTransaction()
     b40:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <_ZN8SPIClass5beginEv>
     b44:	22 9a       	sbi	0x04, 2	; 4
                SPI_SS::SetDirWrite();
                SPI_SS::Set();
     b46:	0e 94 28 05 	call	0xa50	; 0xa50 <_ZN4TPinI5PortbLh2EE3SetEv>
     b4a:	21 98       	cbi	0x04, 1	; 4
        spi::init();
        INTR::SetDirRead();
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
     b4c:	68 e1       	ldi	r22, 0x18	; 24
     b4e:	88 e8       	ldi	r24, 0x88	; 136
     b50:	0e 94 47 05 	call	0xa8e	; 0xa8e <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
/* reset MAX3421E. Returns number of cycles it took for PLL to stabilize after reset
  or zero if PLL haven't stabilized in 65535 cycles */
template< typename SPI_SS, typename INTR >
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
        uint16_t i = 0;
        regWr(rUSBCTL, bmCHIPRES);
     b54:	60 e2       	ldi	r22, 0x20	; 32
     b56:	88 e7       	ldi	r24, 0x78	; 120
     b58:	0e 94 47 05 	call	0xa8e	; 0xa8e <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
        regWr(rUSBCTL, 0x00);
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	88 e7       	ldi	r24, 0x78	; 120
     b60:	0e 94 47 05 	call	0xa8e	; 0xa8e <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
     b64:	c0 e0       	ldi	r28, 0x00	; 0
     b66:	d0 e0       	ldi	r29, 0x00	; 0
        while(++i) {
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
     b68:	88 e6       	ldi	r24, 0x68	; 104
     b6a:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.5>
     b6e:	21 96       	adiw	r28, 0x01	; 1
     b70:	80 fd       	sbrc	r24, 0
     b72:	06 c0       	rjmp	.+12     	; 0xb80 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE4InitEv+0x50>
template< typename SPI_SS, typename INTR >
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
        uint16_t i = 0;
        regWr(rUSBCTL, bmCHIPRES);
        regWr(rUSBCTL, 0x00);
        while(++i) {
     b74:	cf 3f       	cpi	r28, 0xFF	; 255
     b76:	8f ef       	ldi	r24, 0xFF	; 255
     b78:	d8 07       	cpc	r29, r24
     b7a:	b1 f7       	brne	.-20     	; 0xb68 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE4InitEv+0x38>
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
                return ( -1);
     b7c:	8f ef       	ldi	r24, 0xFF	; 255
     b7e:	1d c0       	rjmp	.+58     	; 0xbba <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE4InitEv+0x8a>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
     b80:	61 ec       	ldi	r22, 0xC1	; 193
     b82:	88 ed       	ldi	r24, 0xD8	; 216
     b84:	0e 94 47 05 	call	0xa8e	; 0xa8e <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
     b88:	60 e6       	ldi	r22, 0x60	; 96
     b8a:	80 ed       	ldi	r24, 0xD0	; 208
     b8c:	0e 94 47 05 	call	0xa8e	; 0xa8e <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
     b90:	64 e0       	ldi	r22, 0x04	; 4
     b92:	88 ee       	ldi	r24, 0xE8	; 232
     b94:	0e 94 47 05 	call	0xa8e	; 0xa8e <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
     b98:	88 ee       	ldi	r24, 0xE8	; 232
     b9a:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.5>
     b9e:	82 ff       	sbrs	r24, 2
     ba0:	fb cf       	rjmp	.-10     	; 0xb98 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE4InitEv+0x68>

        busprobe(); //check if anything is connected
     ba2:	c8 01       	movw	r24, r16
     ba4:	0e 94 68 05 	call	0xad0	; 0xad0 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
     ba8:	60 e2       	ldi	r22, 0x20	; 32
     baa:	88 ec       	ldi	r24, 0xC8	; 200
     bac:	0e 94 47 05 	call	0xa8e	; 0xa8e <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
     bb0:	61 e0       	ldi	r22, 0x01	; 1
     bb2:	80 e8       	ldi	r24, 0x80	; 128
     bb4:	0e 94 47 05 	call	0xa8e	; 0xa8e <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
     bb8:	80 e0       	ldi	r24, 0x00	; 0

        return ( 0);
}
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	1f 91       	pop	r17
     bc0:	0f 91       	pop	r16
     bc2:	08 95       	ret

00000bc4 <setup>:
};



void setup()
{
     bc4:	0f 93       	push	r16
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     bc6:	26 e0       	ldi	r18, 0x06	; 6
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	52 ec       	ldi	r21, 0xC2	; 194
     bcc:	61 e0       	ldi	r22, 0x01	; 1
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	8e ed       	ldi	r24, 0xDE	; 222
     bd2:	93 e0       	ldi	r25, 0x03	; 3
     bd4:	0e 94 7e 07 	call	0xefc	; 0xefc <_ZN14HardwareSerial5beginEmh>
	Serial.begin( 115200 );
	#if !defined(__MIPSEL__)
	while (!Serial); // Wait for serial port to connect - used on Leonardo, Teensy and other boards with built-in USB CDC serial connection
	#endif
	Serial.println("Start");
     bd8:	6a e5       	ldi	r22, 0x5A	; 90
     bda:	71 e0       	ldi	r23, 0x01	; 1
     bdc:	8e ed       	ldi	r24, 0xDE	; 222
     bde:	93 e0       	ldi	r25, 0x03	; 3
     be0:	0e 94 c0 08 	call	0x1180	; 0x1180 <_ZN5Print7printlnEPKc>

	if (Usb.Init() == -1)
     be4:	81 e2       	ldi	r24, 0x21	; 33
     be6:	93 e0       	ldi	r25, 0x03	; 3
     be8:	0e 94 98 05 	call	0xb30	; 0xb30 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE4InitEv>
     bec:	8f 3f       	cpi	r24, 0xFF	; 255
     bee:	31 f4       	brne	.+12     	; 0xbfc <setup+0x38>
	Serial.println("OSC did not start.");
     bf0:	60 e6       	ldi	r22, 0x60	; 96
     bf2:	71 e0       	ldi	r23, 0x01	; 1
     bf4:	8e ed       	ldi	r24, 0xDE	; 222
     bf6:	93 e0       	ldi	r25, 0x03	; 3
     bf8:	0e 94 c0 08 	call	0x1180	; 0x1180 <_ZN5Print7printlnEPKc>

	delay( 200 );
     bfc:	68 ec       	ldi	r22, 0xC8	; 200
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 4d 09 	call	0x129a	; 0x129a <delay>

public:
        HIDBoot(USB *p, bool bRptProtoEnable = false);

        virtual bool SetReportParser(uint8_t id, HIDReportParser *prs) {
                pRptParser[id] = prs;
     c08:	81 ef       	ldi	r24, 0xF1	; 241
     c0a:	92 e0       	ldi	r25, 0x02	; 2
     c0c:	90 93 04 03 	sts	0x0304, r25	; 0x800304 <HidMouse+0xe>
     c10:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <HidMouse+0xd>

	HidMouse.SetReportParser(0, &Prs);
	Wire.begin(0x08);
     c14:	68 e0       	ldi	r22, 0x08	; 8
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	8e e8       	ldi	r24, 0x8E	; 142
     c1a:	94 e0       	ldi	r25, 0x04	; 4
     c1c:	0e 94 c3 21 	call	0x4386	; 0x4386 <_ZN7TwoWire5beginEi>
	Wire.onRequest(requestEvent);
     c20:	68 e8       	ldi	r22, 0x88	; 136
     c22:	76 e0       	ldi	r23, 0x06	; 6
     c24:	8e e8       	ldi	r24, 0x8E	; 142
     c26:	94 e0       	ldi	r25, 0x04	; 4
     c28:	0e 94 c5 21 	call	0x438a	; 0x438a <_ZN7TwoWire9onRequestEPFvvE>

	q_init(&q, sizeof(Rec), 10, IMPLEMENTATION, false);
     c2c:	00 e0       	ldi	r16, 0x00	; 0
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	4a e0       	ldi	r20, 0x0A	; 10
     c32:	50 e0       	ldi	r21, 0x00	; 0
     c34:	60 e2       	ldi	r22, 0x20	; 32
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	88 ec       	ldi	r24, 0xC8	; 200
     c3a:	93 e0       	ldi	r25, 0x03	; 3
     c3c:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <q_init>
	pinMode(8, OUTPUT);
     c40:	61 e0       	ldi	r22, 0x01	; 1
     c42:	88 e0       	ldi	r24, 0x08	; 8
     c44:	0e 94 ed 09 	call	0x13da	; 0x13da <pinMode>
	digitalWrite(8, LOW);
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	88 e0       	ldi	r24, 0x08	; 8
}
     c4c:	0f 91       	pop	r16
	Wire.begin(0x08);
	Wire.onRequest(requestEvent);

	q_init(&q, sizeof(Rec), 10, IMPLEMENTATION, false);
	pinMode(8, OUTPUT);
	digitalWrite(8, LOW);
     c4e:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <digitalWrite>

00000c52 <_GLOBAL__sub_I_resetFunc>:

Rec rec;
bool status;
MouseUpdate mouse_update;
pb_ostream_t stream;
USB     Usb;
     c52:	81 e2       	ldi	r24, 0x21	; 33
     c54:	93 e0       	ldi	r25, 0x03	; 3
     c56:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <_ZN3USBC1Ev>
USBHub     Hub(&Usb);
     c5a:	61 e2       	ldi	r22, 0x21	; 33
     c5c:	73 e0       	ldi	r23, 0x03	; 3
     c5e:	80 e1       	ldi	r24, 0x10	; 16
     c60:	93 e0       	ldi	r25, 0x03	; 3
     c62:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <_ZN6USBHubC1EP3USB>
                return NULL;
        };

public:

        USBHID(USB *pusb) : pUsb(pusb) {
     c66:	81 e2       	ldi	r24, 0x21	; 33
     c68:	93 e0       	ldi	r25, 0x03	; 3
     c6a:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <HidMouse+0x5>
     c6e:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <HidMouse+0x4>
template <const uint8_t BOOT_PROTOCOL>
HIDBoot<BOOT_PROTOCOL>::HIDBoot(USB *p, bool bRptProtoEnable/* = false*/) :
USBHID(p),
qNextPollTime(0),
bPollEnable(false),
bRptProtoEnable(bRptProtoEnable) {
     c72:	8f e9       	ldi	r24, 0x9F	; 159
     c74:	91 e0       	ldi	r25, 0x01	; 1
     c76:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <HidMouse+0x1>
     c7a:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <HidMouse>
     c7e:	8d eb       	ldi	r24, 0xBD	; 189
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <HidMouse+0x3>
     c86:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <HidMouse+0x2>
     c8a:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <HidMouse+0x13>
     c8e:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <HidMouse+0x14>
     c92:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <HidMouse+0x15>
     c96:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <HidMouse+0x16>
     c9a:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <HidMouse+0x17>
     c9e:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <HidMouse+0x19>
}

template <const uint8_t BOOT_PROTOCOL>
void HIDBoot<BOOT_PROTOCOL>::Initialize() {
        for(int i = 0; i < totalEndpoints(BOOT_PROTOCOL); i++) {
                epInfo[i].epAddr = 0;
     ca2:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <HidMouse+0x7>
                epInfo[i].maxPktSize = (i) ? 0 : 8;
     ca6:	88 e0       	ldi	r24, 0x08	; 8
     ca8:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <HidMouse+0x8>
                epInfo[i].bmSndToggle = 0;
                epInfo[i].bmRcvToggle = 0;
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
     cac:	8c e3       	ldi	r24, 0x3C	; 60
     cae:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <HidMouse+0x9>
}

template <const uint8_t BOOT_PROTOCOL>
void HIDBoot<BOOT_PROTOCOL>::Initialize() {
        for(int i = 0; i < totalEndpoints(BOOT_PROTOCOL); i++) {
                epInfo[i].epAddr = 0;
     cb2:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <HidMouse+0xa>
                epInfo[i].maxPktSize = (i) ? 0 : 8;
     cb6:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <HidMouse+0xb>
                epInfo[i].bmSndToggle = 0;
                epInfo[i].bmRcvToggle = 0;
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
     cba:	84 e0       	ldi	r24, 0x04	; 4
     cbc:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <HidMouse+0xc>
        }
        bNumEP = 1;
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <HidMouse+0x12>
        bNumIface = 0;
     cc6:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <HidMouse+0x11>
        bConfNum = 0;
     cca:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <HidMouse+0xf>
bPollEnable(false),
bRptProtoEnable(bRptProtoEnable) {
        Initialize();

        for(int i = 0; i < epMUL(BOOT_PROTOCOL); i++) {
                pRptParser[i] = NULL;
     cce:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <HidMouse+0xe>
     cd2:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <HidMouse+0xd>
     cd6:	e7 e7       	ldi	r30, 0x77	; 119
     cd8:	f3 e0       	ldi	r31, 0x03	; 3
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
                        if(!devConfig[i]) {
     cde:	21 91       	ld	r18, Z+
     ce0:	31 91       	ld	r19, Z+
     ce2:	23 2b       	or	r18, r19
     ce4:	51 f4       	brne	.+20     	; 0xcfa <_GLOBAL__sub_I_resetFunc+0xa8>
                                devConfig[i] = pdev;
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	fc 01       	movw	r30, r24
     cec:	e9 58       	subi	r30, 0x89	; 137
     cee:	fc 4f       	sbci	r31, 0xFC	; 252
     cf0:	86 ef       	ldi	r24, 0xF6	; 246
     cf2:	92 e0       	ldi	r25, 0x02	; 2
     cf4:	91 83       	std	Z+1, r25	; 0x01
     cf6:	80 83       	st	Z, r24
     cf8:	04 c0       	rjmp	.+8      	; 0xd02 <_GLOBAL__sub_I_resetFunc+0xb0>
     cfa:	01 96       	adiw	r24, 0x01	; 1
        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
     cfc:	80 31       	cpi	r24, 0x10	; 16
     cfe:	91 05       	cpc	r25, r1
     d00:	71 f7       	brne	.-36     	; 0xcde <_GLOBAL__sub_I_resetFunc+0x8c>

void requestEvent();
void(* resetFunc) (void) = 0;


class MouseRptParser : public MouseReportParser
     d02:	83 ec       	ldi	r24, 0xC3	; 195
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <Prs+0x1>
     d0a:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <Prs>
     d0e:	08 95       	ret

00000d10 <_Z12requestEventv>:
	}
	else{
		digitalWrite(8, LOW);
	}
}
void requestEvent() {
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
     d18:	a0 97       	sbiw	r28, 0x20	; 32
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
	Rec rec;
	if(q_isEmpty(&q) == false){
     d24:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <q+0x10>
     d28:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <q+0x11>
     d2c:	89 2b       	or	r24, r25
     d2e:	89 f0       	breq	.+34     	; 0xd52 <_Z12requestEventv+0x42>
		q_pop(&q, &rec);
     d30:	be 01       	movw	r22, r28
     d32:	6f 5f       	subi	r22, 0xFF	; 255
     d34:	7f 4f       	sbci	r23, 0xFF	; 255
     d36:	88 ec       	ldi	r24, 0xC8	; 200
     d38:	93 e0       	ldi	r25, 0x03	; 3
     d3a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <q_pop>
		Wire.write(rec.buffer, BUFFER_SIZE);
     d3e:	40 e2       	ldi	r20, 0x20	; 32
     d40:	50 e0       	ldi	r21, 0x00	; 0
     d42:	be 01       	movw	r22, r28
     d44:	6f 5f       	subi	r22, 0xFF	; 255
     d46:	7f 4f       	sbci	r23, 0xFF	; 255
     d48:	8e e8       	ldi	r24, 0x8E	; 142
     d4a:	94 e0       	ldi	r25, 0x04	; 4
     d4c:	0e 94 3d 21 	call	0x427a	; 0x427a <_ZN7TwoWire5writeEPKhj>
     d50:	06 c0       	rjmp	.+12     	; 0xd5e <_Z12requestEventv+0x4e>
	}
	else{
		Serial.println("Request on non-empty queue!");
     d52:	63 e7       	ldi	r22, 0x73	; 115
     d54:	71 e0       	ldi	r23, 0x01	; 1
     d56:	8e ed       	ldi	r24, 0xDE	; 222
     d58:	93 e0       	ldi	r25, 0x03	; 3
     d5a:	0e 94 c0 08 	call	0x1180	; 0x1180 <_ZN5Print7printlnEPKc>
	}
}
     d5e:	a0 96       	adiw	r28, 0x20	; 32
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	08 95       	ret

00000d70 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     d70:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     d72:	91 8d       	ldd	r25, Z+25	; 0x19
     d74:	22 8d       	ldd	r18, Z+26	; 0x1a
     d76:	89 2f       	mov	r24, r25
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	80 5c       	subi	r24, 0xC0	; 192
     d7c:	9f 4f       	sbci	r25, 0xFF	; 255
     d7e:	82 1b       	sub	r24, r18
     d80:	91 09       	sbc	r25, r1
}
     d82:	8f 73       	andi	r24, 0x3F	; 63
     d84:	99 27       	eor	r25, r25
     d86:	08 95       	ret

00000d88 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     d88:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     d8a:	91 8d       	ldd	r25, Z+25	; 0x19
     d8c:	82 8d       	ldd	r24, Z+26	; 0x1a
     d8e:	98 17       	cp	r25, r24
     d90:	31 f0       	breq	.+12     	; 0xd9e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     d92:	82 8d       	ldd	r24, Z+26	; 0x1a
     d94:	e8 0f       	add	r30, r24
     d96:	f1 1d       	adc	r31, r1
     d98:	85 8d       	ldd	r24, Z+29	; 0x1d
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     d9e:	8f ef       	ldi	r24, 0xFF	; 255
     da0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     da2:	08 95       	ret

00000da4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     da4:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     da6:	91 8d       	ldd	r25, Z+25	; 0x19
     da8:	82 8d       	ldd	r24, Z+26	; 0x1a
     daa:	98 17       	cp	r25, r24
     dac:	61 f0       	breq	.+24     	; 0xdc6 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     dae:	82 8d       	ldd	r24, Z+26	; 0x1a
     db0:	df 01       	movw	r26, r30
     db2:	a8 0f       	add	r26, r24
     db4:	b1 1d       	adc	r27, r1
     db6:	5d 96       	adiw	r26, 0x1d	; 29
     db8:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     dba:	92 8d       	ldd	r25, Z+26	; 0x1a
     dbc:	9f 5f       	subi	r25, 0xFF	; 255
     dbe:	9f 73       	andi	r25, 0x3F	; 63
     dc0:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     dc6:	8f ef       	ldi	r24, 0xFF	; 255
     dc8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     dca:	08 95       	ret

00000dcc <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     dcc:	86 e3       	ldi	r24, 0x36	; 54
     dce:	98 e0       	ldi	r25, 0x08	; 8
     dd0:	89 2b       	or	r24, r25
     dd2:	49 f0       	breq	.+18     	; 0xde6 <_Z14serialEventRunv+0x1a>
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	89 2b       	or	r24, r25
     dda:	29 f0       	breq	.+10     	; 0xde6 <_Z14serialEventRunv+0x1a>
     ddc:	0e 94 36 08 	call	0x106c	; 0x106c <_Z17Serial0_availablev>
     de0:	81 11       	cpse	r24, r1
     de2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     de6:	08 95       	ret

00000de8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     de8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     dea:	84 8d       	ldd	r24, Z+28	; 0x1c
     dec:	df 01       	movw	r26, r30
     dee:	a8 0f       	add	r26, r24
     df0:	b1 1d       	adc	r27, r1
     df2:	a3 5a       	subi	r26, 0xA3	; 163
     df4:	bf 4f       	sbci	r27, 0xFF	; 255
     df6:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     df8:	84 8d       	ldd	r24, Z+28	; 0x1c
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	01 96       	adiw	r24, 0x01	; 1
     dfe:	8f 73       	andi	r24, 0x3F	; 63
     e00:	99 27       	eor	r25, r25
     e02:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     e04:	a6 89       	ldd	r26, Z+22	; 0x16
     e06:	b7 89       	ldd	r27, Z+23	; 0x17
     e08:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     e0a:	a0 89       	ldd	r26, Z+16	; 0x10
     e0c:	b1 89       	ldd	r27, Z+17	; 0x11
     e0e:	8c 91       	ld	r24, X
     e10:	80 64       	ori	r24, 0x40	; 64
     e12:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     e14:	93 8d       	ldd	r25, Z+27	; 0x1b
     e16:	84 8d       	ldd	r24, Z+28	; 0x1c
     e18:	98 13       	cpse	r25, r24
     e1a:	06 c0       	rjmp	.+12     	; 0xe28 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     e1c:	02 88       	ldd	r0, Z+18	; 0x12
     e1e:	f3 89       	ldd	r31, Z+19	; 0x13
     e20:	e0 2d       	mov	r30, r0
     e22:	80 81       	ld	r24, Z
     e24:	8f 7d       	andi	r24, 0xDF	; 223
     e26:	80 83       	st	Z, r24
     e28:	08 95       	ret

00000e2a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     e2a:	ef 92       	push	r14
     e2c:	ff 92       	push	r15
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
     e36:	ec 01       	movw	r28, r24
  _written = true;
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     e3c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     e3e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e40:	98 13       	cpse	r25, r24
     e42:	05 c0       	rjmp	.+10     	; 0xe4e <_ZN14HardwareSerial5writeEh+0x24>
     e44:	e8 89       	ldd	r30, Y+16	; 0x10
     e46:	f9 89       	ldd	r31, Y+17	; 0x11
     e48:	80 81       	ld	r24, Z
     e4a:	85 fd       	sbrc	r24, 5
     e4c:	24 c0       	rjmp	.+72     	; 0xe96 <_ZN14HardwareSerial5writeEh+0x6c>
     e4e:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     e50:	0b 8d       	ldd	r16, Y+27	; 0x1b
     e52:	10 e0       	ldi	r17, 0x00	; 0
     e54:	0f 5f       	subi	r16, 0xFF	; 255
     e56:	1f 4f       	sbci	r17, 0xFF	; 255
     e58:	0f 73       	andi	r16, 0x3F	; 63
     e5a:	11 27       	eor	r17, r17
     e5c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     e5e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e60:	e8 12       	cpse	r14, r24
     e62:	0c c0       	rjmp	.+24     	; 0xe7c <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	07 fc       	sbrc	r0, 7
     e68:	fa cf       	rjmp	.-12     	; 0xe5e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     e6a:	e8 89       	ldd	r30, Y+16	; 0x10
     e6c:	f9 89       	ldd	r31, Y+17	; 0x11
     e6e:	80 81       	ld	r24, Z
     e70:	85 ff       	sbrs	r24, 5
     e72:	f5 cf       	rjmp	.-22     	; 0xe5e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     e74:	ce 01       	movw	r24, r28
     e76:	0e 94 f4 06 	call	0xde8	; 0xde8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     e7a:	f1 cf       	rjmp	.-30     	; 0xe5e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     e7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e7e:	fe 01       	movw	r30, r28
     e80:	e8 0f       	add	r30, r24
     e82:	f1 1d       	adc	r31, r1
     e84:	e3 5a       	subi	r30, 0xA3	; 163
     e86:	ff 4f       	sbci	r31, 0xFF	; 255
     e88:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     e8a:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     e8c:	ea 89       	ldd	r30, Y+18	; 0x12
     e8e:	fb 89       	ldd	r31, Y+19	; 0x13
     e90:	80 81       	ld	r24, Z
     e92:	80 62       	ori	r24, 0x20	; 32
     e94:	07 c0       	rjmp	.+14     	; 0xea4 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     e96:	ee 89       	ldd	r30, Y+22	; 0x16
     e98:	ff 89       	ldd	r31, Y+23	; 0x17
     e9a:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     e9c:	e8 89       	ldd	r30, Y+16	; 0x10
     e9e:	f9 89       	ldd	r31, Y+17	; 0x11
     ea0:	80 81       	ld	r24, Z
     ea2:	80 64       	ori	r24, 0x40	; 64
     ea4:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	1f 91       	pop	r17
     eb0:	0f 91       	pop	r16
     eb2:	ff 90       	pop	r15
     eb4:	ef 90       	pop	r14
     eb6:	08 95       	ret

00000eb8 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
     ebc:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     ebe:	88 8d       	ldd	r24, Y+24	; 0x18
     ec0:	88 23       	and	r24, r24
     ec2:	c9 f0       	breq	.+50     	; 0xef6 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     ec4:	ea 89       	ldd	r30, Y+18	; 0x12
     ec6:	fb 89       	ldd	r31, Y+19	; 0x13
     ec8:	80 81       	ld	r24, Z
     eca:	85 fd       	sbrc	r24, 5
     ecc:	05 c0       	rjmp	.+10     	; 0xed8 <_ZN14HardwareSerial5flushEv+0x20>
     ece:	a8 89       	ldd	r26, Y+16	; 0x10
     ed0:	b9 89       	ldd	r27, Y+17	; 0x11
     ed2:	8c 91       	ld	r24, X
     ed4:	86 fd       	sbrc	r24, 6
     ed6:	0f c0       	rjmp	.+30     	; 0xef6 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	07 fc       	sbrc	r0, 7
     edc:	f5 cf       	rjmp	.-22     	; 0xec8 <_ZN14HardwareSerial5flushEv+0x10>
     ede:	80 81       	ld	r24, Z
     ee0:	85 ff       	sbrs	r24, 5
     ee2:	f2 cf       	rjmp	.-28     	; 0xec8 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     ee4:	a8 89       	ldd	r26, Y+16	; 0x10
     ee6:	b9 89       	ldd	r27, Y+17	; 0x11
     ee8:	8c 91       	ld	r24, X
     eea:	85 ff       	sbrs	r24, 5
     eec:	ed cf       	rjmp	.-38     	; 0xec8 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     eee:	ce 01       	movw	r24, r28
     ef0:	0e 94 f4 06 	call	0xde8	; 0xde8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     ef4:	e7 cf       	rjmp	.-50     	; 0xec4 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     efc:	cf 92       	push	r12
     efe:	df 92       	push	r13
     f00:	ef 92       	push	r14
     f02:	ff 92       	push	r15
     f04:	1f 93       	push	r17
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	ec 01       	movw	r28, r24
     f0c:	6a 01       	movw	r12, r20
     f0e:	7b 01       	movw	r14, r22
     f10:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     f12:	60 e8       	ldi	r22, 0x80	; 128
     f14:	74 e8       	ldi	r23, 0x84	; 132
     f16:	8e e1       	ldi	r24, 0x1E	; 30
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	a7 01       	movw	r20, r14
     f1c:	96 01       	movw	r18, r12
     f1e:	0e 94 de 23 	call	0x47bc	; 0x47bc <__udivmodsi4>
     f22:	da 01       	movw	r26, r20
     f24:	c9 01       	movw	r24, r18
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	a1 09       	sbc	r26, r1
     f2a:	b1 09       	sbc	r27, r1
     f2c:	b6 95       	lsr	r27
     f2e:	a7 95       	ror	r26
     f30:	97 95       	ror	r25
     f32:	87 95       	ror	r24
     f34:	9c 01       	movw	r18, r24
  *_ucsra = 1 << U2X0;
     f36:	e8 89       	ldd	r30, Y+16	; 0x10
     f38:	f9 89       	ldd	r31, Y+17	; 0x11
     f3a:	82 e0       	ldi	r24, 0x02	; 2
     f3c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     f3e:	21 15       	cp	r18, r1
     f40:	80 e1       	ldi	r24, 0x10	; 16
     f42:	38 07       	cpc	r19, r24
     f44:	a8 f0       	brcs	.+42     	; 0xf70 <_ZN14HardwareSerial5beginEmh+0x74>
  {
    *_ucsra = 0;
     f46:	e8 89       	ldd	r30, Y+16	; 0x10
     f48:	f9 89       	ldd	r31, Y+17	; 0x11
     f4a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     f4c:	60 e4       	ldi	r22, 0x40	; 64
     f4e:	72 e4       	ldi	r23, 0x42	; 66
     f50:	8f e0       	ldi	r24, 0x0F	; 15
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	a7 01       	movw	r20, r14
     f56:	96 01       	movw	r18, r12
     f58:	0e 94 de 23 	call	0x47bc	; 0x47bc <__udivmodsi4>
     f5c:	da 01       	movw	r26, r20
     f5e:	c9 01       	movw	r24, r18
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	a1 09       	sbc	r26, r1
     f64:	b1 09       	sbc	r27, r1
     f66:	b6 95       	lsr	r27
     f68:	a7 95       	ror	r26
     f6a:	97 95       	ror	r25
     f6c:	87 95       	ror	r24
     f6e:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     f70:	ec 85       	ldd	r30, Y+12	; 0x0c
     f72:	fd 85       	ldd	r31, Y+13	; 0x0d
     f74:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     f76:	ee 85       	ldd	r30, Y+14	; 0x0e
     f78:	ff 85       	ldd	r31, Y+15	; 0x0f
     f7a:	20 83       	st	Z, r18

  _written = false;
     f7c:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     f7e:	ec 89       	ldd	r30, Y+20	; 0x14
     f80:	fd 89       	ldd	r31, Y+21	; 0x15
     f82:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     f84:	ea 89       	ldd	r30, Y+18	; 0x12
     f86:	fb 89       	ldd	r31, Y+19	; 0x13
     f88:	80 81       	ld	r24, Z
     f8a:	80 61       	ori	r24, 0x10	; 16
     f8c:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     f8e:	ea 89       	ldd	r30, Y+18	; 0x12
     f90:	fb 89       	ldd	r31, Y+19	; 0x13
     f92:	80 81       	ld	r24, Z
     f94:	88 60       	ori	r24, 0x08	; 8
     f96:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     f98:	ea 89       	ldd	r30, Y+18	; 0x12
     f9a:	fb 89       	ldd	r31, Y+19	; 0x13
     f9c:	80 81       	ld	r24, Z
     f9e:	80 68       	ori	r24, 0x80	; 128
     fa0:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     fa2:	ea 89       	ldd	r30, Y+18	; 0x12
     fa4:	fb 89       	ldd	r31, Y+19	; 0x13
     fa6:	80 81       	ld	r24, Z
     fa8:	8f 7d       	andi	r24, 0xDF	; 223
     faa:	80 83       	st	Z, r24
}
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	1f 91       	pop	r17
     fb2:	ff 90       	pop	r15
     fb4:	ef 90       	pop	r14
     fb6:	df 90       	pop	r13
     fb8:	cf 90       	pop	r12
     fba:	08 95       	ret

00000fbc <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     fbc:	1f 92       	push	r1
     fbe:	0f 92       	push	r0
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	0f 92       	push	r0
     fc4:	11 24       	eor	r1, r1
     fc6:	2f 93       	push	r18
     fc8:	8f 93       	push	r24
     fca:	9f 93       	push	r25
     fcc:	ef 93       	push	r30
     fce:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     fd0:	e0 91 ee 03 	lds	r30, 0x03EE	; 0x8003ee <Serial+0x10>
     fd4:	f0 91 ef 03 	lds	r31, 0x03EF	; 0x8003ef <Serial+0x11>
     fd8:	80 81       	ld	r24, Z
     fda:	e0 91 f4 03 	lds	r30, 0x03F4	; 0x8003f4 <Serial+0x16>
     fde:	f0 91 f5 03 	lds	r31, 0x03F5	; 0x8003f5 <Serial+0x17>
     fe2:	82 fd       	sbrc	r24, 2
     fe4:	12 c0       	rjmp	.+36     	; 0x100a <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     fe6:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     fe8:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <Serial+0x19>
     fec:	8f 5f       	subi	r24, 0xFF	; 255
     fee:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     ff0:	20 91 f8 03 	lds	r18, 0x03F8	; 0x8003f8 <Serial+0x1a>
     ff4:	82 17       	cp	r24, r18
     ff6:	51 f0       	breq	.+20     	; 0x100c <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     ff8:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <Serial+0x19>
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	e2 52       	subi	r30, 0x22	; 34
    1000:	fc 4f       	sbci	r31, 0xFC	; 252
    1002:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1004:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <Serial+0x19>
    1008:	01 c0       	rjmp	.+2      	; 0x100c <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    100a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    100c:	ff 91       	pop	r31
    100e:	ef 91       	pop	r30
    1010:	9f 91       	pop	r25
    1012:	8f 91       	pop	r24
    1014:	2f 91       	pop	r18
    1016:	0f 90       	pop	r0
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	0f 90       	pop	r0
    101c:	1f 90       	pop	r1
    101e:	18 95       	reti

00001020 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1020:	1f 92       	push	r1
    1022:	0f 92       	push	r0
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	0f 92       	push	r0
    1028:	11 24       	eor	r1, r1
    102a:	2f 93       	push	r18
    102c:	3f 93       	push	r19
    102e:	4f 93       	push	r20
    1030:	5f 93       	push	r21
    1032:	6f 93       	push	r22
    1034:	7f 93       	push	r23
    1036:	8f 93       	push	r24
    1038:	9f 93       	push	r25
    103a:	af 93       	push	r26
    103c:	bf 93       	push	r27
    103e:	ef 93       	push	r30
    1040:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1042:	8e ed       	ldi	r24, 0xDE	; 222
    1044:	93 e0       	ldi	r25, 0x03	; 3
    1046:	0e 94 f4 06 	call	0xde8	; 0xde8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    104a:	ff 91       	pop	r31
    104c:	ef 91       	pop	r30
    104e:	bf 91       	pop	r27
    1050:	af 91       	pop	r26
    1052:	9f 91       	pop	r25
    1054:	8f 91       	pop	r24
    1056:	7f 91       	pop	r23
    1058:	6f 91       	pop	r22
    105a:	5f 91       	pop	r21
    105c:	4f 91       	pop	r20
    105e:	3f 91       	pop	r19
    1060:	2f 91       	pop	r18
    1062:	0f 90       	pop	r0
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	0f 90       	pop	r0
    1068:	1f 90       	pop	r1
    106a:	18 95       	reti

0000106c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    106c:	8e ed       	ldi	r24, 0xDE	; 222
    106e:	93 e0       	ldi	r25, 0x03	; 3
    1070:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN14HardwareSerial9availableEv>
    1074:	21 e0       	ldi	r18, 0x01	; 1
    1076:	89 2b       	or	r24, r25
    1078:	09 f4       	brne	.+2      	; 0x107c <_Z17Serial0_availablev+0x10>
    107a:	20 e0       	ldi	r18, 0x00	; 0
}
    107c:	82 2f       	mov	r24, r18
    107e:	08 95       	ret

00001080 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1080:	ee ed       	ldi	r30, 0xDE	; 222
    1082:	f3 e0       	ldi	r31, 0x03	; 3
    1084:	13 82       	std	Z+3, r1	; 0x03
    1086:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1088:	88 ee       	ldi	r24, 0xE8	; 232
    108a:	93 e0       	ldi	r25, 0x03	; 3
    108c:	a0 e0       	ldi	r26, 0x00	; 0
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	84 83       	std	Z+4, r24	; 0x04
    1092:	95 83       	std	Z+5, r25	; 0x05
    1094:	a6 83       	std	Z+6, r26	; 0x06
    1096:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1098:	87 ed       	ldi	r24, 0xD7	; 215
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	91 83       	std	Z+1, r25	; 0x01
    109e:	80 83       	st	Z, r24
    10a0:	85 ec       	ldi	r24, 0xC5	; 197
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	95 87       	std	Z+13, r25	; 0x0d
    10a6:	84 87       	std	Z+12, r24	; 0x0c
    10a8:	84 ec       	ldi	r24, 0xC4	; 196
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	97 87       	std	Z+15, r25	; 0x0f
    10ae:	86 87       	std	Z+14, r24	; 0x0e
    10b0:	80 ec       	ldi	r24, 0xC0	; 192
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	91 8b       	std	Z+17, r25	; 0x11
    10b6:	80 8b       	std	Z+16, r24	; 0x10
    10b8:	81 ec       	ldi	r24, 0xC1	; 193
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	93 8b       	std	Z+19, r25	; 0x13
    10be:	82 8b       	std	Z+18, r24	; 0x12
    10c0:	82 ec       	ldi	r24, 0xC2	; 194
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	95 8b       	std	Z+21, r25	; 0x15
    10c6:	84 8b       	std	Z+20, r24	; 0x14
    10c8:	86 ec       	ldi	r24, 0xC6	; 198
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	97 8b       	std	Z+23, r25	; 0x17
    10ce:	86 8b       	std	Z+22, r24	; 0x16
    10d0:	11 8e       	std	Z+25, r1	; 0x19
    10d2:	12 8e       	std	Z+26, r1	; 0x1a
    10d4:	13 8e       	std	Z+27, r1	; 0x1b
    10d6:	14 8e       	std	Z+28, r1	; 0x1c
    10d8:	08 95       	ret

000010da <initVariant>:
    10da:	08 95       	ret

000010dc <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    10dc:	0e 94 89 09 	call	0x1312	; 0x1312 <init>

	initVariant();
    10e0:	0e 94 6d 08 	call	0x10da	; 0x10da <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    10e4:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    10e8:	c6 ee       	ldi	r28, 0xE6	; 230
    10ea:	d6 e0       	ldi	r29, 0x06	; 6
#endif
	
	setup();
    
	for (;;) {
		loop();
    10ec:	0e 94 18 05 	call	0xa30	; 0xa30 <loop>
		if (serialEventRun) serialEventRun();
    10f0:	20 97       	sbiw	r28, 0x00	; 0
    10f2:	e1 f3       	breq	.-8      	; 0x10ec <main+0x10>
    10f4:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_Z14serialEventRunv>
    10f8:	f9 cf       	rjmp	.-14     	; 0x10ec <main+0x10>

000010fa <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
    10fa:	cf 92       	push	r12
    10fc:	df 92       	push	r13
    10fe:	ef 92       	push	r14
    1100:	ff 92       	push	r15
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	6c 01       	movw	r12, r24
    110c:	7a 01       	movw	r14, r20
    110e:	8b 01       	movw	r16, r22
    1110:	c0 e0       	ldi	r28, 0x00	; 0
    1112:	d0 e0       	ldi	r29, 0x00	; 0
    1114:	ce 15       	cp	r28, r14
    1116:	df 05       	cpc	r29, r15
    1118:	81 f0       	breq	.+32     	; 0x113a <_ZN5Print5writeEPKhj+0x40>
    111a:	d8 01       	movw	r26, r16
    111c:	6d 91       	ld	r22, X+
    111e:	8d 01       	movw	r16, r26
    1120:	d6 01       	movw	r26, r12
    1122:	ed 91       	ld	r30, X+
    1124:	fc 91       	ld	r31, X
    1126:	01 90       	ld	r0, Z+
    1128:	f0 81       	ld	r31, Z
    112a:	e0 2d       	mov	r30, r0
    112c:	c6 01       	movw	r24, r12
    112e:	09 95       	icall
    1130:	89 2b       	or	r24, r25
    1132:	11 f0       	breq	.+4      	; 0x1138 <_ZN5Print5writeEPKhj+0x3e>
    1134:	21 96       	adiw	r28, 0x01	; 1
    1136:	ee cf       	rjmp	.-36     	; 0x1114 <_ZN5Print5writeEPKhj+0x1a>
    1138:	7e 01       	movw	r14, r28
    113a:	c7 01       	movw	r24, r14
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	1f 91       	pop	r17
    1142:	0f 91       	pop	r16
    1144:	ff 90       	pop	r15
    1146:	ef 90       	pop	r14
    1148:	df 90       	pop	r13
    114a:	cf 90       	pop	r12
    114c:	08 95       	ret

0000114e <_ZN5Print5writeEPKc>:
    114e:	61 15       	cp	r22, r1
    1150:	71 05       	cpc	r23, r1
    1152:	79 f0       	breq	.+30     	; 0x1172 <_ZN5Print5writeEPKc+0x24>
    1154:	fb 01       	movw	r30, r22
    1156:	01 90       	ld	r0, Z+
    1158:	00 20       	and	r0, r0
    115a:	e9 f7       	brne	.-6      	; 0x1156 <_ZN5Print5writeEPKc+0x8>
    115c:	31 97       	sbiw	r30, 0x01	; 1
    115e:	af 01       	movw	r20, r30
    1160:	46 1b       	sub	r20, r22
    1162:	57 0b       	sbc	r21, r23
    1164:	dc 01       	movw	r26, r24
    1166:	ed 91       	ld	r30, X+
    1168:	fc 91       	ld	r31, X
    116a:	02 80       	ldd	r0, Z+2	; 0x02
    116c:	f3 81       	ldd	r31, Z+3	; 0x03
    116e:	e0 2d       	mov	r30, r0
    1170:	09 94       	ijmp
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	08 95       	ret

00001178 <_ZN5Print7printlnEv>:
    1178:	63 ee       	ldi	r22, 0xE3	; 227
    117a:	71 e0       	ldi	r23, 0x01	; 1
    117c:	0c 94 a7 08 	jmp	0x114e	; 0x114e <_ZN5Print5writeEPKc>

00001180 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    1180:	0f 93       	push	r16
    1182:	1f 93       	push	r17
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
    1188:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    118a:	0e 94 a7 08 	call	0x114e	; 0x114e <_ZN5Print5writeEPKc>
    118e:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    1190:	ce 01       	movw	r24, r28
    1192:	0e 94 bc 08 	call	0x1178	; 0x1178 <_ZN5Print7printlnEv>
  return n;
}
    1196:	80 0f       	add	r24, r16
    1198:	91 1f       	adc	r25, r17
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	1f 91       	pop	r17
    11a0:	0f 91       	pop	r16
    11a2:	08 95       	ret

000011a4 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    11a4:	1f 92       	push	r1
    11a6:	0f 92       	push	r0
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	0f 92       	push	r0
    11ac:	11 24       	eor	r1, r1
    11ae:	2f 93       	push	r18
    11b0:	3f 93       	push	r19
    11b2:	8f 93       	push	r24
    11b4:	9f 93       	push	r25
    11b6:	af 93       	push	r26
    11b8:	bf 93       	push	r27
    11ba:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <timer0_millis>
    11be:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <timer0_millis+0x1>
    11c2:	a0 91 7e 04 	lds	r26, 0x047E	; 0x80047e <timer0_millis+0x2>
    11c6:	b0 91 7f 04 	lds	r27, 0x047F	; 0x80047f <timer0_millis+0x3>
    11ca:	30 91 7b 04 	lds	r19, 0x047B	; 0x80047b <timer0_fract>
    11ce:	26 e0       	ldi	r18, 0x06	; 6
    11d0:	23 0f       	add	r18, r19
    11d2:	2d 37       	cpi	r18, 0x7D	; 125
    11d4:	20 f4       	brcc	.+8      	; 0x11de <__vector_16+0x3a>
    11d6:	02 96       	adiw	r24, 0x02	; 2
    11d8:	a1 1d       	adc	r26, r1
    11da:	b1 1d       	adc	r27, r1
    11dc:	05 c0       	rjmp	.+10     	; 0x11e8 <__vector_16+0x44>
    11de:	29 e8       	ldi	r18, 0x89	; 137
    11e0:	23 0f       	add	r18, r19
    11e2:	03 96       	adiw	r24, 0x03	; 3
    11e4:	a1 1d       	adc	r26, r1
    11e6:	b1 1d       	adc	r27, r1
    11e8:	20 93 7b 04 	sts	0x047B, r18	; 0x80047b <timer0_fract>
    11ec:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <timer0_millis>
    11f0:	90 93 7d 04 	sts	0x047D, r25	; 0x80047d <timer0_millis+0x1>
    11f4:	a0 93 7e 04 	sts	0x047E, r26	; 0x80047e <timer0_millis+0x2>
    11f8:	b0 93 7f 04 	sts	0x047F, r27	; 0x80047f <timer0_millis+0x3>
    11fc:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <timer0_overflow_count>
    1200:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <timer0_overflow_count+0x1>
    1204:	a0 91 82 04 	lds	r26, 0x0482	; 0x800482 <timer0_overflow_count+0x2>
    1208:	b0 91 83 04 	lds	r27, 0x0483	; 0x800483 <timer0_overflow_count+0x3>
    120c:	01 96       	adiw	r24, 0x01	; 1
    120e:	a1 1d       	adc	r26, r1
    1210:	b1 1d       	adc	r27, r1
    1212:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <timer0_overflow_count>
    1216:	90 93 81 04 	sts	0x0481, r25	; 0x800481 <timer0_overflow_count+0x1>
    121a:	a0 93 82 04 	sts	0x0482, r26	; 0x800482 <timer0_overflow_count+0x2>
    121e:	b0 93 83 04 	sts	0x0483, r27	; 0x800483 <timer0_overflow_count+0x3>
    1222:	bf 91       	pop	r27
    1224:	af 91       	pop	r26
    1226:	9f 91       	pop	r25
    1228:	8f 91       	pop	r24
    122a:	3f 91       	pop	r19
    122c:	2f 91       	pop	r18
    122e:	0f 90       	pop	r0
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	0f 90       	pop	r0
    1234:	1f 90       	pop	r1
    1236:	18 95       	reti

00001238 <millis>:
    1238:	2f b7       	in	r18, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	60 91 7c 04 	lds	r22, 0x047C	; 0x80047c <timer0_millis>
    1240:	70 91 7d 04 	lds	r23, 0x047D	; 0x80047d <timer0_millis+0x1>
    1244:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <timer0_millis+0x2>
    1248:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <timer0_millis+0x3>
    124c:	2f bf       	out	0x3f, r18	; 63
    124e:	08 95       	ret

00001250 <micros>:
    1250:	3f b7       	in	r19, 0x3f	; 63
    1252:	f8 94       	cli
    1254:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <timer0_overflow_count>
    1258:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <timer0_overflow_count+0x1>
    125c:	a0 91 82 04 	lds	r26, 0x0482	; 0x800482 <timer0_overflow_count+0x2>
    1260:	b0 91 83 04 	lds	r27, 0x0483	; 0x800483 <timer0_overflow_count+0x3>
    1264:	26 b5       	in	r18, 0x26	; 38
    1266:	a8 9b       	sbis	0x15, 0	; 21
    1268:	05 c0       	rjmp	.+10     	; 0x1274 <micros+0x24>
    126a:	2f 3f       	cpi	r18, 0xFF	; 255
    126c:	19 f0       	breq	.+6      	; 0x1274 <micros+0x24>
    126e:	01 96       	adiw	r24, 0x01	; 1
    1270:	a1 1d       	adc	r26, r1
    1272:	b1 1d       	adc	r27, r1
    1274:	3f bf       	out	0x3f, r19	; 63
    1276:	ba 2f       	mov	r27, r26
    1278:	a9 2f       	mov	r26, r25
    127a:	98 2f       	mov	r25, r24
    127c:	88 27       	eor	r24, r24
    127e:	82 0f       	add	r24, r18
    1280:	91 1d       	adc	r25, r1
    1282:	a1 1d       	adc	r26, r1
    1284:	b1 1d       	adc	r27, r1
    1286:	bc 01       	movw	r22, r24
    1288:	cd 01       	movw	r24, r26
    128a:	43 e0       	ldi	r20, 0x03	; 3
    128c:	66 0f       	add	r22, r22
    128e:	77 1f       	adc	r23, r23
    1290:	88 1f       	adc	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	4a 95       	dec	r20
    1296:	d1 f7       	brne	.-12     	; 0x128c <micros+0x3c>
    1298:	08 95       	ret

0000129a <delay>:
    129a:	8f 92       	push	r8
    129c:	9f 92       	push	r9
    129e:	af 92       	push	r10
    12a0:	bf 92       	push	r11
    12a2:	cf 92       	push	r12
    12a4:	df 92       	push	r13
    12a6:	ef 92       	push	r14
    12a8:	ff 92       	push	r15
    12aa:	6b 01       	movw	r12, r22
    12ac:	7c 01       	movw	r14, r24
    12ae:	0e 94 28 09 	call	0x1250	; 0x1250 <micros>
    12b2:	4b 01       	movw	r8, r22
    12b4:	5c 01       	movw	r10, r24
    12b6:	c1 14       	cp	r12, r1
    12b8:	d1 04       	cpc	r13, r1
    12ba:	e1 04       	cpc	r14, r1
    12bc:	f1 04       	cpc	r15, r1
    12be:	01 f1       	breq	.+64     	; 0x1300 <delay+0x66>
    12c0:	0e 94 ce 21 	call	0x439c	; 0x439c <yield>
    12c4:	0e 94 28 09 	call	0x1250	; 0x1250 <micros>
    12c8:	dc 01       	movw	r26, r24
    12ca:	cb 01       	movw	r24, r22
    12cc:	88 19       	sub	r24, r8
    12ce:	99 09       	sbc	r25, r9
    12d0:	aa 09       	sbc	r26, r10
    12d2:	bb 09       	sbc	r27, r11
    12d4:	88 3e       	cpi	r24, 0xE8	; 232
    12d6:	93 40       	sbci	r25, 0x03	; 3
    12d8:	a1 05       	cpc	r26, r1
    12da:	b1 05       	cpc	r27, r1
    12dc:	60 f3       	brcs	.-40     	; 0x12b6 <delay+0x1c>
    12de:	21 e0       	ldi	r18, 0x01	; 1
    12e0:	c2 1a       	sub	r12, r18
    12e2:	d1 08       	sbc	r13, r1
    12e4:	e1 08       	sbc	r14, r1
    12e6:	f1 08       	sbc	r15, r1
    12e8:	88 ee       	ldi	r24, 0xE8	; 232
    12ea:	88 0e       	add	r8, r24
    12ec:	83 e0       	ldi	r24, 0x03	; 3
    12ee:	98 1e       	adc	r9, r24
    12f0:	a1 1c       	adc	r10, r1
    12f2:	b1 1c       	adc	r11, r1
    12f4:	c1 14       	cp	r12, r1
    12f6:	d1 04       	cpc	r13, r1
    12f8:	e1 04       	cpc	r14, r1
    12fa:	f1 04       	cpc	r15, r1
    12fc:	19 f7       	brne	.-58     	; 0x12c4 <delay+0x2a>
    12fe:	db cf       	rjmp	.-74     	; 0x12b6 <delay+0x1c>
    1300:	ff 90       	pop	r15
    1302:	ef 90       	pop	r14
    1304:	df 90       	pop	r13
    1306:	cf 90       	pop	r12
    1308:	bf 90       	pop	r11
    130a:	af 90       	pop	r10
    130c:	9f 90       	pop	r9
    130e:	8f 90       	pop	r8
    1310:	08 95       	ret

00001312 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1312:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1314:	84 b5       	in	r24, 0x24	; 36
    1316:	82 60       	ori	r24, 0x02	; 2
    1318:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    131a:	84 b5       	in	r24, 0x24	; 36
    131c:	81 60       	ori	r24, 0x01	; 1
    131e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1320:	85 b5       	in	r24, 0x25	; 37
    1322:	82 60       	ori	r24, 0x02	; 2
    1324:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1326:	85 b5       	in	r24, 0x25	; 37
    1328:	81 60       	ori	r24, 0x01	; 1
    132a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    132c:	ee e6       	ldi	r30, 0x6E	; 110
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	81 60       	ori	r24, 0x01	; 1
    1334:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1336:	e1 e8       	ldi	r30, 0x81	; 129
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    133c:	80 81       	ld	r24, Z
    133e:	82 60       	ori	r24, 0x02	; 2
    1340:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1342:	80 81       	ld	r24, Z
    1344:	81 60       	ori	r24, 0x01	; 1
    1346:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1348:	e0 e8       	ldi	r30, 0x80	; 128
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	81 60       	ori	r24, 0x01	; 1
    1350:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1352:	e1 eb       	ldi	r30, 0xB1	; 177
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	84 60       	ori	r24, 0x04	; 4
    135a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    135c:	e0 eb       	ldi	r30, 0xB0	; 176
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	81 60       	ori	r24, 0x01	; 1
    1364:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1366:	ea e7       	ldi	r30, 0x7A	; 122
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	84 60       	ori	r24, 0x04	; 4
    136e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1370:	80 81       	ld	r24, Z
    1372:	82 60       	ori	r24, 0x02	; 2
    1374:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS0);
    1376:	80 81       	ld	r24, Z
    1378:	8e 7f       	andi	r24, 0xFE	; 254
    137a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    137c:	80 81       	ld	r24, Z
    137e:	80 68       	ori	r24, 0x80	; 128
    1380:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1382:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1386:	08 95       	ret

00001388 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1388:	83 30       	cpi	r24, 0x03	; 3
    138a:	81 f0       	breq	.+32     	; 0x13ac <turnOffPWM+0x24>
    138c:	28 f4       	brcc	.+10     	; 0x1398 <turnOffPWM+0x10>
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	99 f0       	breq	.+38     	; 0x13b8 <turnOffPWM+0x30>
    1392:	82 30       	cpi	r24, 0x02	; 2
    1394:	a1 f0       	breq	.+40     	; 0x13be <turnOffPWM+0x36>
    1396:	08 95       	ret
    1398:	87 30       	cpi	r24, 0x07	; 7
    139a:	a9 f0       	breq	.+42     	; 0x13c6 <turnOffPWM+0x3e>
    139c:	88 30       	cpi	r24, 0x08	; 8
    139e:	b9 f0       	breq	.+46     	; 0x13ce <turnOffPWM+0x46>
    13a0:	84 30       	cpi	r24, 0x04	; 4
    13a2:	d1 f4       	brne	.+52     	; 0x13d8 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    13a4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    13a8:	8f 7d       	andi	r24, 0xDF	; 223
    13aa:	03 c0       	rjmp	.+6      	; 0x13b2 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    13ac:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    13b0:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    13b2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    13b6:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    13b8:	84 b5       	in	r24, 0x24	; 36
    13ba:	8f 77       	andi	r24, 0x7F	; 127
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    13be:	84 b5       	in	r24, 0x24	; 36
    13c0:	8f 7d       	andi	r24, 0xDF	; 223
    13c2:	84 bd       	out	0x24, r24	; 36
    13c4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    13c6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    13ca:	8f 77       	andi	r24, 0x7F	; 127
    13cc:	03 c0       	rjmp	.+6      	; 0x13d4 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    13ce:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    13d2:	8f 7d       	andi	r24, 0xDF	; 223
    13d4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    13d8:	08 95       	ret

000013da <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	fc 01       	movw	r30, r24
    13e2:	e0 57       	subi	r30, 0x70	; 112
    13e4:	ff 4f       	sbci	r31, 0xFF	; 255
    13e6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    13e8:	fc 01       	movw	r30, r24
    13ea:	ec 55       	subi	r30, 0x5C	; 92
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    13f0:	88 23       	and	r24, r24
    13f2:	61 f1       	breq	.+88     	; 0x144c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	fc 01       	movw	r30, r24
    13fc:	ee 53       	subi	r30, 0x3E	; 62
    13fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1400:	c5 91       	lpm	r28, Z+
    1402:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1404:	fc 01       	movw	r30, r24
    1406:	e8 54       	subi	r30, 0x48	; 72
    1408:	ff 4f       	sbci	r31, 0xFF	; 255
    140a:	a5 91       	lpm	r26, Z+
    140c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    140e:	61 11       	cpse	r22, r1
    1410:	09 c0       	rjmp	.+18     	; 0x1424 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1412:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1414:	f8 94       	cli
		*reg &= ~bit;
    1416:	88 81       	ld	r24, Y
    1418:	20 95       	com	r18
    141a:	82 23       	and	r24, r18
    141c:	88 83       	st	Y, r24
		*out &= ~bit;
    141e:	ec 91       	ld	r30, X
    1420:	2e 23       	and	r18, r30
    1422:	0b c0       	rjmp	.+22     	; 0x143a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1424:	62 30       	cpi	r22, 0x02	; 2
    1426:	61 f4       	brne	.+24     	; 0x1440 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1428:	9f b7       	in	r25, 0x3f	; 63
                cli();
    142a:	f8 94       	cli
		*reg &= ~bit;
    142c:	88 81       	ld	r24, Y
    142e:	32 2f       	mov	r19, r18
    1430:	30 95       	com	r19
    1432:	83 23       	and	r24, r19
    1434:	88 83       	st	Y, r24
		*out |= bit;
    1436:	ec 91       	ld	r30, X
    1438:	2e 2b       	or	r18, r30
    143a:	2c 93       	st	X, r18
		SREG = oldSREG;
    143c:	9f bf       	out	0x3f, r25	; 63
    143e:	06 c0       	rjmp	.+12     	; 0x144c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1440:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1442:	f8 94       	cli
		*reg |= bit;
    1444:	e8 81       	ld	r30, Y
    1446:	2e 2b       	or	r18, r30
    1448:	28 83       	st	Y, r18
		SREG = oldSREG;
    144a:	8f bf       	out	0x3f, r24	; 63
	}
}
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	08 95       	ret

00001452 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1452:	1f 93       	push	r17
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	f9 01       	movw	r30, r18
    145e:	e4 58       	subi	r30, 0x84	; 132
    1460:	ff 4f       	sbci	r31, 0xFF	; 255
    1462:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1464:	f9 01       	movw	r30, r18
    1466:	e0 57       	subi	r30, 0x70	; 112
    1468:	ff 4f       	sbci	r31, 0xFF	; 255
    146a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    146c:	f9 01       	movw	r30, r18
    146e:	ec 55       	subi	r30, 0x5C	; 92
    1470:	ff 4f       	sbci	r31, 0xFF	; 255
    1472:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1474:	cc 23       	and	r28, r28
    1476:	c1 f0       	breq	.+48     	; 0x14a8 <digitalWrite+0x56>
    1478:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    147a:	81 11       	cpse	r24, r1
    147c:	0e 94 c4 09 	call	0x1388	; 0x1388 <turnOffPWM>

	out = portOutputRegister(port);
    1480:	ec 2f       	mov	r30, r28
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	ee 0f       	add	r30, r30
    1486:	ff 1f       	adc	r31, r31
    1488:	e8 54       	subi	r30, 0x48	; 72
    148a:	ff 4f       	sbci	r31, 0xFF	; 255
    148c:	a5 91       	lpm	r26, Z+
    148e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1490:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1492:	f8 94       	cli

	if (val == LOW) {
    1494:	11 11       	cpse	r17, r1
    1496:	04 c0       	rjmp	.+8      	; 0x14a0 <digitalWrite+0x4e>
		*out &= ~bit;
    1498:	8c 91       	ld	r24, X
    149a:	d0 95       	com	r29
    149c:	d8 23       	and	r29, r24
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <digitalWrite+0x52>
	} else {
		*out |= bit;
    14a0:	ec 91       	ld	r30, X
    14a2:	de 2b       	or	r29, r30
    14a4:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    14a6:	9f bf       	out	0x3f, r25	; 63
}
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	08 95       	ret

000014b0 <q_kill>:

void q_flush(Queue_t * q)
{
	q->in = 0;
	q->out = 0;
	q->cnt = 0;
    14b0:	cf 93       	push	r28
    14b2:	df 93       	push	r29
    14b4:	ec 01       	movw	r28, r24
    14b6:	8a 89       	ldd	r24, Y+18	; 0x12
    14b8:	9b 89       	ldd	r25, Y+19	; 0x13
    14ba:	85 3a       	cpi	r24, 0xA5	; 165
    14bc:	9a 45       	sbci	r25, 0x5A	; 90
    14be:	21 f4       	brne	.+8      	; 0x14c8 <q_kill+0x18>
    14c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    14c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    14c4:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <free>
    14c8:	1b 8a       	std	Y+19, r1	; 0x13
    14ca:	1a 8a       	std	Y+18, r1	; 0x12
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	08 95       	ret

000014d2 <q_init>:
    14d2:	8f 92       	push	r8
    14d4:	9f 92       	push	r9
    14d6:	af 92       	push	r10
    14d8:	bf 92       	push	r11
    14da:	ef 92       	push	r14
    14dc:	ff 92       	push	r15
    14de:	0f 93       	push	r16
    14e0:	cf 93       	push	r28
    14e2:	df 93       	push	r29
    14e4:	ec 01       	movw	r28, r24
    14e6:	46 9f       	mul	r20, r22
    14e8:	70 01       	movw	r14, r0
    14ea:	47 9f       	mul	r20, r23
    14ec:	f0 0c       	add	r15, r0
    14ee:	56 9f       	mul	r21, r22
    14f0:	f0 0c       	add	r15, r0
    14f2:	11 24       	eor	r1, r1
    14f4:	47 01       	movw	r8, r14
    14f6:	a1 2c       	mov	r10, r1
    14f8:	b1 2c       	mov	r11, r1
    14fa:	5b 83       	std	Y+3, r21	; 0x03
    14fc:	4a 83       	std	Y+2, r20	; 0x02
    14fe:	7d 83       	std	Y+5, r23	; 0x05
    1500:	6c 83       	std	Y+4, r22	; 0x04
    1502:	28 83       	st	Y, r18
    1504:	09 83       	std	Y+1, r16	; 0x01
    1506:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <q_kill>
    150a:	c7 01       	movw	r24, r14
    150c:	0e 94 49 24 	call	0x4892	; 0x4892 <malloc>
    1510:	9b 87       	std	Y+11, r25	; 0x0b
    1512:	8a 87       	std	Y+10, r24	; 0x0a
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	29 f4       	brne	.+10     	; 0x1522 <q_init+0x50>
    1518:	1e 82       	std	Y+6, r1	; 0x06
    151a:	1f 82       	std	Y+7, r1	; 0x07
    151c:	18 86       	std	Y+8, r1	; 0x08
    151e:	19 86       	std	Y+9, r1	; 0x09
    1520:	0e c0       	rjmp	.+28     	; 0x153e <q_init+0x6c>
    1522:	8e 82       	std	Y+6, r8	; 0x06
    1524:	9f 82       	std	Y+7, r9	; 0x07
    1526:	a8 86       	std	Y+8, r10	; 0x08
    1528:	b9 86       	std	Y+9, r11	; 0x09
    152a:	25 ea       	ldi	r18, 0xA5	; 165
    152c:	3a e5       	ldi	r19, 0x5A	; 90
    152e:	3b 8b       	std	Y+19, r19	; 0x13
    1530:	2a 8b       	std	Y+18, r18	; 0x12
    1532:	1d 86       	std	Y+13, r1	; 0x0d
    1534:	1c 86       	std	Y+12, r1	; 0x0c
    1536:	1f 86       	std	Y+15, r1	; 0x0f
    1538:	1e 86       	std	Y+14, r1	; 0x0e
    153a:	19 8a       	std	Y+17, r1	; 0x11
    153c:	18 8a       	std	Y+16, r1	; 0x10
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	0f 91       	pop	r16
    1544:	ff 90       	pop	r15
    1546:	ef 90       	pop	r14
    1548:	bf 90       	pop	r11
    154a:	af 90       	pop	r10
    154c:	9f 90       	pop	r9
    154e:	8f 90       	pop	r8
    1550:	08 95       	ret

00001552 <q_push>:
}


bool q_push(Queue_t * q, const void * record)
{
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	ec 01       	movw	r28, r24
	if ((!q->ovw) && q_isFull(q))	{ return false; }
    1558:	99 81       	ldd	r25, Y+1	; 0x01
    155a:	91 11       	cpse	r25, r1
    155c:	07 c0       	rjmp	.+14     	; 0x156c <q_push+0x1a>
    155e:	4a 81       	ldd	r20, Y+2	; 0x02
    1560:	5b 81       	ldd	r21, Y+3	; 0x03
    1562:	28 89       	ldd	r18, Y+16	; 0x10
    1564:	39 89       	ldd	r19, Y+17	; 0x11
    1566:	42 17       	cp	r20, r18
    1568:	53 07       	cpc	r21, r19
    156a:	f1 f1       	breq	.+124    	; 0x15e8 <q_push+0x96>
	
	uint8_t * pStart = q->queue + (q->rec_sz * q->in);
    156c:	4c 81       	ldd	r20, Y+4	; 0x04
    156e:	5d 81       	ldd	r21, Y+5	; 0x05
	memcpy(pStart, record, q->rec_sz);
    1570:	2c 85       	ldd	r18, Y+12	; 0x0c
    1572:	3d 85       	ldd	r19, Y+13	; 0x0d
    1574:	42 9f       	mul	r20, r18
    1576:	c0 01       	movw	r24, r0
    1578:	43 9f       	mul	r20, r19
    157a:	90 0d       	add	r25, r0
    157c:	52 9f       	mul	r21, r18
    157e:	90 0d       	add	r25, r0
    1580:	11 24       	eor	r1, r1
    1582:	2a 85       	ldd	r18, Y+10	; 0x0a
    1584:	3b 85       	ldd	r19, Y+11	; 0x0b
    1586:	82 0f       	add	r24, r18
    1588:	93 1f       	adc	r25, r19
    158a:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <memcpy>

	INC_IDX(q->in, q->rec_nb, 0);
    158e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1590:	9d 85       	ldd	r25, Y+13	; 0x0d
    1592:	2a 81       	ldd	r18, Y+2	; 0x02
    1594:	3b 81       	ldd	r19, Y+3	; 0x03
    1596:	a9 01       	movw	r20, r18
    1598:	41 50       	subi	r20, 0x01	; 1
    159a:	51 09       	sbc	r21, r1
    159c:	84 17       	cp	r24, r20
    159e:	95 07       	cpc	r25, r21
    15a0:	20 f4       	brcc	.+8      	; 0x15aa <q_push+0x58>
    15a2:	01 96       	adiw	r24, 0x01	; 1
    15a4:	9d 87       	std	Y+13, r25	; 0x0d
    15a6:	8c 87       	std	Y+12, r24	; 0x0c
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <q_push+0x5c>
    15aa:	1d 86       	std	Y+13, r1	; 0x0d
    15ac:	1c 86       	std	Y+12, r1	; 0x0c
**	\return Queue fullness status
**	\retval true if queue is full
**	\retval false is not full
**/
inline bool __attribute__((always_inline)) q_isFull(const Queue_t * q) {
	return (q->cnt == q->rec_nb) ? true : false; }
    15ae:	88 89       	ldd	r24, Y+16	; 0x10
    15b0:	99 89       	ldd	r25, Y+17	; 0x11

	if (!q_isFull(q))	{ q->cnt++; }	// Increase records count
    15b2:	28 17       	cp	r18, r24
    15b4:	39 07       	cpc	r19, r25
    15b6:	21 f0       	breq	.+8      	; 0x15c0 <q_push+0x6e>
    15b8:	01 96       	adiw	r24, 0x01	; 1
    15ba:	99 8b       	std	Y+17, r25	; 0x11
    15bc:	88 8b       	std	Y+16, r24	; 0x10
    15be:	13 c0       	rjmp	.+38     	; 0x15e6 <q_push+0x94>
	else if (q->ovw)					// Queue is full and overwrite is allowed
    15c0:	99 81       	ldd	r25, Y+1	; 0x01
    15c2:	99 23       	and	r25, r25
    15c4:	81 f0       	breq	.+32     	; 0x15e6 <q_push+0x94>
	{
		if (q->impl == FIFO)			{ INC_IDX(q->out, q->rec_nb, 0); }	// as oldest record is overwritten, increment out
    15c6:	88 81       	ld	r24, Y
    15c8:	81 11       	cpse	r24, r1
    15ca:	0e c0       	rjmp	.+28     	; 0x15e8 <q_push+0x96>
    15cc:	2e 85       	ldd	r18, Y+14	; 0x0e
    15ce:	3f 85       	ldd	r19, Y+15	; 0x0f
    15d0:	24 17       	cp	r18, r20
    15d2:	35 07       	cpc	r19, r21
    15d4:	28 f4       	brcc	.+10     	; 0x15e0 <q_push+0x8e>
    15d6:	2f 5f       	subi	r18, 0xFF	; 255
    15d8:	3f 4f       	sbci	r19, 0xFF	; 255
    15da:	3f 87       	std	Y+15, r19	; 0x0f
    15dc:	2e 87       	std	Y+14, r18	; 0x0e
    15de:	04 c0       	rjmp	.+8      	; 0x15e8 <q_push+0x96>
    15e0:	1f 86       	std	Y+15, r1	; 0x0f
    15e2:	1e 86       	std	Y+14, r1	; 0x0e
    15e4:	01 c0       	rjmp	.+2      	; 0x15e8 <q_push+0x96>
		//else if (q->impl == LIFO)	{}										// Nothing to do in this case
	}
	
	return true;
    15e6:	91 e0       	ldi	r25, 0x01	; 1
}
    15e8:	89 2f       	mov	r24, r25
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	08 95       	ret

000015f0 <q_pop>:

bool q_pop(Queue_t * q, void * record)
{
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
    15f4:	fc 01       	movw	r30, r24
    15f6:	cb 01       	movw	r24, r22
	uint8_t * pStart;
	
	if (q_isEmpty(q))	{ return false; }	// No more records
    15f8:	20 89       	ldd	r18, Z+16	; 0x10
    15fa:	31 89       	ldd	r19, Z+17	; 0x11
    15fc:	23 2b       	or	r18, r19
    15fe:	09 f4       	brne	.+2      	; 0x1602 <q_pop+0x12>
    1600:	4a c0       	rjmp	.+148    	; 0x1696 <q_pop+0xa6>
	
	if (q->impl == FIFO)
    1602:	20 81       	ld	r18, Z
    1604:	21 11       	cpse	r18, r1
    1606:	1e c0       	rjmp	.+60     	; 0x1644 <q_pop+0x54>
	{
		pStart = q->queue + (q->rec_sz * q->out);
    1608:	46 85       	ldd	r20, Z+14	; 0x0e
    160a:	57 85       	ldd	r21, Z+15	; 0x0f
    160c:	64 81       	ldd	r22, Z+4	; 0x04
    160e:	75 81       	ldd	r23, Z+5	; 0x05
    1610:	46 9f       	mul	r20, r22
    1612:	90 01       	movw	r18, r0
    1614:	47 9f       	mul	r20, r23
    1616:	30 0d       	add	r19, r0
    1618:	56 9f       	mul	r21, r22
    161a:	30 0d       	add	r19, r0
    161c:	11 24       	eor	r1, r1
    161e:	62 85       	ldd	r22, Z+10	; 0x0a
    1620:	73 85       	ldd	r23, Z+11	; 0x0b
    1622:	26 0f       	add	r18, r22
    1624:	37 1f       	adc	r19, r23
		INC_IDX(q->out, q->rec_nb, 0);
    1626:	62 81       	ldd	r22, Z+2	; 0x02
    1628:	73 81       	ldd	r23, Z+3	; 0x03
    162a:	61 50       	subi	r22, 0x01	; 1
    162c:	71 09       	sbc	r23, r1
    162e:	46 17       	cp	r20, r22
    1630:	57 07       	cpc	r21, r23
    1632:	28 f4       	brcc	.+10     	; 0x163e <q_pop+0x4e>
    1634:	4f 5f       	subi	r20, 0xFF	; 255
    1636:	5f 4f       	sbci	r21, 0xFF	; 255
    1638:	57 87       	std	Z+15, r21	; 0x0f
    163a:	46 87       	std	Z+14, r20	; 0x0e
    163c:	1f c0       	rjmp	.+62     	; 0x167c <q_pop+0x8c>
    163e:	17 86       	std	Z+15, r1	; 0x0f
    1640:	16 86       	std	Z+14, r1	; 0x0e
    1642:	1c c0       	rjmp	.+56     	; 0x167c <q_pop+0x8c>
	}
	else if (q->impl == LIFO)
    1644:	21 30       	cpi	r18, 0x01	; 1
    1646:	39 f5       	brne	.+78     	; 0x1696 <q_pop+0xa6>
	{
		DEC_IDX(q->in, q->rec_nb, 0);
    1648:	24 85       	ldd	r18, Z+12	; 0x0c
    164a:	35 85       	ldd	r19, Z+13	; 0x0d
    164c:	21 15       	cp	r18, r1
    164e:	31 05       	cpc	r19, r1
    1650:	11 f4       	brne	.+4      	; 0x1656 <q_pop+0x66>
    1652:	22 81       	ldd	r18, Z+2	; 0x02
    1654:	33 81       	ldd	r19, Z+3	; 0x03
    1656:	21 50       	subi	r18, 0x01	; 1
    1658:	31 09       	sbc	r19, r1
    165a:	35 87       	std	Z+13, r19	; 0x0d
    165c:	24 87       	std	Z+12, r18	; 0x0c
		pStart = q->queue + (q->rec_sz * q->in);
    165e:	64 81       	ldd	r22, Z+4	; 0x04
    1660:	75 81       	ldd	r23, Z+5	; 0x05
    1662:	44 85       	ldd	r20, Z+12	; 0x0c
    1664:	55 85       	ldd	r21, Z+13	; 0x0d
    1666:	64 9f       	mul	r22, r20
    1668:	90 01       	movw	r18, r0
    166a:	65 9f       	mul	r22, r21
    166c:	30 0d       	add	r19, r0
    166e:	74 9f       	mul	r23, r20
    1670:	30 0d       	add	r19, r0
    1672:	11 24       	eor	r1, r1
    1674:	62 85       	ldd	r22, Z+10	; 0x0a
    1676:	73 85       	ldd	r23, Z+11	; 0x0b
    1678:	26 0f       	add	r18, r22
    167a:	37 1f       	adc	r19, r23
    167c:	ef 01       	movw	r28, r30
	}
	else	{ return false; }
	
	memcpy(record, pStart, q->rec_sz);
    167e:	44 81       	ldd	r20, Z+4	; 0x04
    1680:	55 81       	ldd	r21, Z+5	; 0x05
    1682:	b9 01       	movw	r22, r18
    1684:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <memcpy>
	q->cnt--;	// Decrease records count
    1688:	88 89       	ldd	r24, Y+16	; 0x10
    168a:	99 89       	ldd	r25, Y+17	; 0x11
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	99 8b       	std	Y+17, r25	; 0x11
    1690:	88 8b       	std	Y+16, r24	; 0x10
	return true;
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	01 c0       	rjmp	.+2      	; 0x1698 <q_pop+0xa8>

bool q_pop(Queue_t * q, void * record)
{
	uint8_t * pStart;
	
	if (q_isEmpty(q))	{ return false; }	// No more records
    1696:	80 e0       	ldi	r24, 0x00	; 0
	else	{ return false; }
	
	memcpy(record, pStart, q->rec_sz);
	q->cnt--;	// Decrease records count
	return true;
}
    1698:	df 91       	pop	r29
    169a:	cf 91       	pop	r28
    169c:	08 95       	ret

0000169e <buf_write>:
    if (!pb_encode(&stream, fields, src_struct))
        return false;
    
    *size = stream.bytes_written;
    return true;
}
    169e:	fc 01       	movw	r30, r24
    16a0:	a2 81       	ldd	r26, Z+2	; 0x02
    16a2:	b3 81       	ldd	r27, Z+3	; 0x03
    16a4:	9d 01       	movw	r18, r26
    16a6:	24 0f       	add	r18, r20
    16a8:	35 1f       	adc	r19, r21
    16aa:	33 83       	std	Z+3, r19	; 0x03
    16ac:	22 83       	std	Z+2, r18	; 0x02
    16ae:	fb 01       	movw	r30, r22
    16b0:	46 0f       	add	r20, r22
    16b2:	57 1f       	adc	r21, r23
    16b4:	e4 17       	cp	r30, r20
    16b6:	f5 07       	cpc	r31, r21
    16b8:	19 f0       	breq	.+6      	; 0x16c0 <buf_write+0x22>
    16ba:	81 91       	ld	r24, Z+
    16bc:	8d 93       	st	X+, r24
    16be:	fa cf       	rjmp	.-12     	; 0x16b4 <buf_write+0x16>
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	08 95       	ret

000016c4 <pb_check_proto3_default_value>:
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
    16cc:	2c 97       	sbiw	r28, 0x0c	; 12
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	de bf       	out	0x3e, r29	; 62
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	cd bf       	out	0x3d, r28	; 61
    16d8:	fc 01       	movw	r30, r24
    16da:	91 81       	ldd	r25, Z+1	; 0x01
    16dc:	89 2f       	mov	r24, r25
    16de:	80 73       	andi	r24, 0x30	; 48
    16e0:	09 f4       	brne	.+2      	; 0x16e4 <pb_check_proto3_default_value+0x20>
    16e2:	4d c0       	rjmp	.+154    	; 0x177e <pb_check_proto3_default_value+0xba>
    16e4:	23 81       	ldd	r18, Z+3	; 0x03
    16e6:	db 01       	movw	r26, r22
    16e8:	a2 0f       	add	r26, r18
    16ea:	b1 1d       	adc	r27, r1
    16ec:	27 fd       	sbrc	r18, 7
    16ee:	ba 95       	dec	r27
    16f0:	80 32       	cpi	r24, 0x20	; 32
    16f2:	11 f0       	breq	.+4      	; 0x16f8 <pb_check_proto3_default_value+0x34>
    16f4:	80 33       	cpi	r24, 0x30	; 48
    16f6:	19 f4       	brne	.+6      	; 0x16fe <pb_check_proto3_default_value+0x3a>
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	9c 91       	ld	r25, X
    16fc:	18 c0       	rjmp	.+48     	; 0x172e <pb_check_proto3_default_value+0x6a>
    16fe:	80 31       	cpi	r24, 0x10	; 16
    1700:	31 f4       	brne	.+12     	; 0x170e <pb_check_proto3_default_value+0x4a>
    1702:	22 23       	and	r18, r18
    1704:	21 f0       	breq	.+8      	; 0x170e <pb_check_proto3_default_value+0x4a>
    1706:	9c 91       	ld	r25, X
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	89 27       	eor	r24, r25
    170c:	39 c0       	rjmp	.+114    	; 0x1780 <pb_check_proto3_default_value+0xbc>
    170e:	89 2f       	mov	r24, r25
    1710:	80 7c       	andi	r24, 0xC0	; 192
    1712:	91 f4       	brne	.+36     	; 0x1738 <pb_check_proto3_default_value+0x74>
    1714:	9f 70       	andi	r25, 0x0F	; 15
    1716:	95 30       	cpi	r25, 0x05	; 5
    1718:	11 f0       	breq	.+4      	; 0x171e <pb_check_proto3_default_value+0x5a>
    171a:	96 30       	cpi	r25, 0x06	; 6
    171c:	21 f4       	brne	.+8      	; 0x1726 <pb_check_proto3_default_value+0x62>
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	fb 01       	movw	r30, r22
    1722:	90 81       	ld	r25, Z
    1724:	04 c0       	rjmp	.+8      	; 0x172e <pb_check_proto3_default_value+0x6a>
    1726:	99 30       	cpi	r25, 0x09	; 9
    1728:	29 f4       	brne	.+10     	; 0x1734 <pb_check_proto3_default_value+0x70>
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	94 81       	ldd	r25, Z+4	; 0x04
    172e:	99 23       	and	r25, r25
    1730:	39 f1       	breq	.+78     	; 0x1780 <pb_check_proto3_default_value+0xbc>
    1732:	25 c0       	rjmp	.+74     	; 0x177e <pb_check_proto3_default_value+0xba>
    1734:	97 30       	cpi	r25, 0x07	; 7
    1736:	21 f0       	breq	.+8      	; 0x1740 <pb_check_proto3_default_value+0x7c>
    1738:	94 81       	ldd	r25, Z+4	; 0x04
    173a:	26 2f       	mov	r18, r22
    173c:	fb 01       	movw	r30, r22
    173e:	19 c0       	rjmp	.+50     	; 0x1772 <pb_check_proto3_default_value+0xae>
    1740:	ab 01       	movw	r20, r22
    1742:	66 81       	ldd	r22, Z+6	; 0x06
    1744:	77 81       	ldd	r23, Z+7	; 0x07
    1746:	ce 01       	movw	r24, r28
    1748:	01 96       	adiw	r24, 0x01	; 1
    174a:	0e 94 cf 21 	call	0x439e	; 0x439e <pb_field_iter_begin>
    174e:	88 23       	and	r24, r24
    1750:	a1 f0       	breq	.+40     	; 0x177a <pb_check_proto3_default_value+0xb6>
    1752:	69 85       	ldd	r22, Y+9	; 0x09
    1754:	7a 85       	ldd	r23, Y+10	; 0x0a
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	9c 81       	ldd	r25, Y+4	; 0x04
    175a:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <pb_check_proto3_default_value>
    175e:	88 23       	and	r24, r24
    1760:	79 f0       	breq	.+30     	; 0x1780 <pb_check_proto3_default_value+0xbc>
    1762:	ce 01       	movw	r24, r28
    1764:	01 96       	adiw	r24, 0x01	; 1
    1766:	0e 94 ef 21 	call	0x43de	; 0x43de <pb_field_iter_next>
    176a:	f1 cf       	rjmp	.-30     	; 0x174e <pb_check_proto3_default_value+0x8a>
    176c:	81 91       	ld	r24, Z+
    176e:	81 11       	cpse	r24, r1
    1770:	06 c0       	rjmp	.+12     	; 0x177e <pb_check_proto3_default_value+0xba>
    1772:	8e 2f       	mov	r24, r30
    1774:	82 1b       	sub	r24, r18
    1776:	89 17       	cp	r24, r25
    1778:	c8 f3       	brcs	.-14     	; 0x176c <pb_check_proto3_default_value+0xa8>
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	01 c0       	rjmp	.+2      	; 0x1780 <pb_check_proto3_default_value+0xbc>
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	2c 96       	adiw	r28, 0x0c	; 12
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cd bf       	out	0x3d, r28	; 61
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	08 95       	ret

00001792 <pb_ostream_from_buffer>:
    1792:	fc 01       	movw	r30, r24
    1794:	8f e4       	ldi	r24, 0x4F	; 79
    1796:	9b e0       	ldi	r25, 0x0B	; 11
    1798:	91 83       	std	Z+1, r25	; 0x01
    179a:	80 83       	st	Z, r24
    179c:	73 83       	std	Z+3, r23	; 0x03
    179e:	62 83       	std	Z+2, r22	; 0x02
    17a0:	55 83       	std	Z+5, r21	; 0x05
    17a2:	44 83       	std	Z+4, r20	; 0x04
    17a4:	17 82       	std	Z+7, r1	; 0x07
    17a6:	16 82       	std	Z+6, r1	; 0x06
    17a8:	11 86       	std	Z+9, r1	; 0x09
    17aa:	10 86       	std	Z+8, r1	; 0x08
    17ac:	cf 01       	movw	r24, r30
    17ae:	08 95       	ret

000017b0 <pb_write>:
    17b0:	0f 93       	push	r16
    17b2:	1f 93       	push	r17
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	ec 01       	movw	r28, r24
    17ba:	8a 01       	movw	r16, r20
    17bc:	e8 81       	ld	r30, Y
    17be:	f9 81       	ldd	r31, Y+1	; 0x01
    17c0:	30 97       	sbiw	r30, 0x00	; 0
    17c2:	09 f1       	breq	.+66     	; 0x1806 <pb_write+0x56>
    17c4:	8e 81       	ldd	r24, Y+6	; 0x06
    17c6:	9f 81       	ldd	r25, Y+7	; 0x07
    17c8:	84 0f       	add	r24, r20
    17ca:	95 1f       	adc	r25, r21
    17cc:	2c 81       	ldd	r18, Y+4	; 0x04
    17ce:	3d 81       	ldd	r19, Y+5	; 0x05
    17d0:	28 17       	cp	r18, r24
    17d2:	39 07       	cpc	r19, r25
    17d4:	50 f4       	brcc	.+20     	; 0x17ea <pb_write+0x3a>
    17d6:	88 85       	ldd	r24, Y+8	; 0x08
    17d8:	99 85       	ldd	r25, Y+9	; 0x09
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	11 f4       	brne	.+4      	; 0x17e2 <pb_write+0x32>
    17de:	82 ef       	ldi	r24, 0xF2	; 242
    17e0:	91 e0       	ldi	r25, 0x01	; 1
    17e2:	99 87       	std	Y+9, r25	; 0x09
    17e4:	88 87       	std	Y+8, r24	; 0x08
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	15 c0       	rjmp	.+42     	; 0x1814 <pb_write+0x64>
    17ea:	ce 01       	movw	r24, r28
    17ec:	09 95       	icall
    17ee:	81 11       	cpse	r24, r1
    17f0:	0a c0       	rjmp	.+20     	; 0x1806 <pb_write+0x56>
    17f2:	28 85       	ldd	r18, Y+8	; 0x08
    17f4:	39 85       	ldd	r19, Y+9	; 0x09
    17f6:	21 15       	cp	r18, r1
    17f8:	31 05       	cpc	r19, r1
    17fa:	11 f4       	brne	.+4      	; 0x1800 <pb_write+0x50>
    17fc:	2e ef       	ldi	r18, 0xFE	; 254
    17fe:	31 e0       	ldi	r19, 0x01	; 1
    1800:	39 87       	std	Y+9, r19	; 0x09
    1802:	28 87       	std	Y+8, r18	; 0x08
    1804:	07 c0       	rjmp	.+14     	; 0x1814 <pb_write+0x64>
    1806:	8e 81       	ldd	r24, Y+6	; 0x06
    1808:	9f 81       	ldd	r25, Y+7	; 0x07
    180a:	08 0f       	add	r16, r24
    180c:	19 1f       	adc	r17, r25
    180e:	1f 83       	std	Y+7, r17	; 0x07
    1810:	0e 83       	std	Y+6, r16	; 0x06
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	1f 91       	pop	r17
    181a:	0f 91       	pop	r16
    181c:	08 95       	ret

0000181e <pb_encode_varint>:
    181e:	3f 92       	push	r3
    1820:	4f 92       	push	r4
    1822:	5f 92       	push	r5
    1824:	6f 92       	push	r6
    1826:	7f 92       	push	r7
    1828:	8f 92       	push	r8
    182a:	9f 92       	push	r9
    182c:	af 92       	push	r10
    182e:	bf 92       	push	r11
    1830:	cf 92       	push	r12
    1832:	df 92       	push	r13
    1834:	ef 92       	push	r14
    1836:	ff 92       	push	r15
    1838:	0f 93       	push	r16
    183a:	1f 93       	push	r17
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	2a 97       	sbiw	r28, 0x0a	; 10
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	f8 94       	cli
    184a:	de bf       	out	0x3e, r29	; 62
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	cd bf       	out	0x3d, r28	; 61
    1850:	6c 01       	movw	r12, r24
    1852:	72 2e       	mov	r7, r18
    1854:	33 2e       	mov	r3, r19
    1856:	f4 2f       	mov	r31, r20
    1858:	e5 2f       	mov	r30, r21
    185a:	2b 01       	movw	r4, r22
    185c:	98 01       	movw	r18, r16
    185e:	47 2d       	mov	r20, r7
    1860:	53 2d       	mov	r21, r3
    1862:	6f 2f       	mov	r22, r31
    1864:	7e 2f       	mov	r23, r30
    1866:	c2 01       	movw	r24, r4
    1868:	af e7       	ldi	r26, 0x7F	; 127
    186a:	0e 94 3d 24 	call	0x487a	; 0x487a <__cmpdi2_s8>
    186e:	09 f0       	breq	.+2      	; 0x1872 <pb_encode_varint+0x54>
    1870:	20 f4       	brcc	.+8      	; 0x187a <pb_encode_varint+0x5c>
    1872:	09 83       	std	Y+1, r16	; 0x01
    1874:	41 e0       	ldi	r20, 0x01	; 1
    1876:	50 e0       	ldi	r21, 0x00	; 0
    1878:	2f c0       	rjmp	.+94     	; 0x18d8 <pb_encode_varint+0xba>
    187a:	ce 01       	movw	r24, r28
    187c:	01 96       	adiw	r24, 0x01	; 1
    187e:	5c 01       	movw	r10, r24
    1880:	e1 2c       	mov	r14, r1
    1882:	f1 2c       	mov	r15, r1
    1884:	60 2e       	mov	r6, r16
    1886:	80 2f       	mov	r24, r16
    1888:	80 68       	ori	r24, 0x80	; 128
    188a:	d5 01       	movw	r26, r10
    188c:	8d 93       	st	X+, r24
    188e:	5d 01       	movw	r10, r26
    1890:	20 2f       	mov	r18, r16
    1892:	31 2f       	mov	r19, r17
    1894:	47 2d       	mov	r20, r7
    1896:	53 2d       	mov	r21, r3
    1898:	6f 2f       	mov	r22, r31
    189a:	7e 2f       	mov	r23, r30
    189c:	c2 01       	movw	r24, r4
    189e:	07 e0       	ldi	r16, 0x07	; 7
    18a0:	0e 94 21 24 	call	0x4842	; 0x4842 <__lshrdi3>
    18a4:	89 01       	movw	r16, r18
    18a6:	74 2e       	mov	r7, r20
    18a8:	35 2e       	mov	r3, r21
    18aa:	f6 2f       	mov	r31, r22
    18ac:	e7 2f       	mov	r30, r23
    18ae:	2c 01       	movw	r4, r24
    18b0:	47 01       	movw	r8, r14
    18b2:	bf ef       	ldi	r27, 0xFF	; 255
    18b4:	8b 1a       	sub	r8, r27
    18b6:	9b 0a       	sbc	r9, r27
    18b8:	a0 e0       	ldi	r26, 0x00	; 0
    18ba:	0e 94 3d 24 	call	0x487a	; 0x487a <__cmpdi2_s8>
    18be:	11 f0       	breq	.+4      	; 0x18c4 <pb_encode_varint+0xa6>
    18c0:	74 01       	movw	r14, r8
    18c2:	e0 cf       	rjmp	.-64     	; 0x1884 <pb_encode_varint+0x66>
    18c4:	86 2d       	mov	r24, r6
    18c6:	8f 77       	andi	r24, 0x7F	; 127
    18c8:	e1 e0       	ldi	r30, 0x01	; 1
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	ec 0f       	add	r30, r28
    18ce:	fd 1f       	adc	r31, r29
    18d0:	ee 0d       	add	r30, r14
    18d2:	ff 1d       	adc	r31, r15
    18d4:	80 83       	st	Z, r24
    18d6:	a4 01       	movw	r20, r8
    18d8:	be 01       	movw	r22, r28
    18da:	6f 5f       	subi	r22, 0xFF	; 255
    18dc:	7f 4f       	sbci	r23, 0xFF	; 255
    18de:	c6 01       	movw	r24, r12
    18e0:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <pb_write>
    18e4:	2a 96       	adiw	r28, 0x0a	; 10
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	f8 94       	cli
    18ea:	de bf       	out	0x3e, r29	; 62
    18ec:	0f be       	out	0x3f, r0	; 63
    18ee:	cd bf       	out	0x3d, r28	; 61
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	1f 91       	pop	r17
    18f6:	0f 91       	pop	r16
    18f8:	ff 90       	pop	r15
    18fa:	ef 90       	pop	r14
    18fc:	df 90       	pop	r13
    18fe:	cf 90       	pop	r12
    1900:	bf 90       	pop	r11
    1902:	af 90       	pop	r10
    1904:	9f 90       	pop	r9
    1906:	8f 90       	pop	r8
    1908:	7f 90       	pop	r7
    190a:	6f 90       	pop	r6
    190c:	5f 90       	pop	r5
    190e:	4f 90       	pop	r4
    1910:	3f 90       	pop	r3
    1912:	08 95       	ret

00001914 <pb_enc_uvarint>:
    1914:	8f 92       	push	r8
    1916:	9f 92       	push	r9
    1918:	af 92       	push	r10
    191a:	bf 92       	push	r11
    191c:	cf 92       	push	r12
    191e:	df 92       	push	r13
    1920:	ef 92       	push	r14
    1922:	ff 92       	push	r15
    1924:	0f 93       	push	r16
    1926:	1f 93       	push	r17
    1928:	fa 01       	movw	r30, r20
    192a:	db 01       	movw	r26, r22
    192c:	14 96       	adiw	r26, 0x04	; 4
    192e:	2c 91       	ld	r18, X
    1930:	21 30       	cpi	r18, 0x01	; 1
    1932:	19 f4       	brne	.+6      	; 0x193a <pb_enc_uvarint+0x26>
    1934:	80 80       	ld	r8, Z
    1936:	91 2c       	mov	r9, r1
    1938:	04 c0       	rjmp	.+8      	; 0x1942 <pb_enc_uvarint+0x2e>
    193a:	22 30       	cpi	r18, 0x02	; 2
    193c:	29 f4       	brne	.+10     	; 0x1948 <pb_enc_uvarint+0x34>
    193e:	80 80       	ld	r8, Z
    1940:	91 80       	ldd	r9, Z+1	; 0x01
    1942:	a1 2c       	mov	r10, r1
    1944:	b1 2c       	mov	r11, r1
    1946:	06 c0       	rjmp	.+12     	; 0x1954 <pb_enc_uvarint+0x40>
    1948:	24 30       	cpi	r18, 0x04	; 4
    194a:	41 f4       	brne	.+16     	; 0x195c <pb_enc_uvarint+0x48>
    194c:	80 80       	ld	r8, Z
    194e:	91 80       	ldd	r9, Z+1	; 0x01
    1950:	a2 80       	ldd	r10, Z+2	; 0x02
    1952:	b3 80       	ldd	r11, Z+3	; 0x03
    1954:	c1 2c       	mov	r12, r1
    1956:	d1 2c       	mov	r13, r1
    1958:	76 01       	movw	r14, r12
    195a:	1a c0       	rjmp	.+52     	; 0x1990 <pb_enc_uvarint+0x7c>
    195c:	28 30       	cpi	r18, 0x08	; 8
    195e:	49 f4       	brne	.+18     	; 0x1972 <pb_enc_uvarint+0x5e>
    1960:	80 80       	ld	r8, Z
    1962:	91 80       	ldd	r9, Z+1	; 0x01
    1964:	a2 80       	ldd	r10, Z+2	; 0x02
    1966:	b3 80       	ldd	r11, Z+3	; 0x03
    1968:	c4 80       	ldd	r12, Z+4	; 0x04
    196a:	d5 80       	ldd	r13, Z+5	; 0x05
    196c:	e6 80       	ldd	r14, Z+6	; 0x06
    196e:	f7 80       	ldd	r15, Z+7	; 0x07
    1970:	0f c0       	rjmp	.+30     	; 0x1990 <pb_enc_uvarint+0x7c>
    1972:	fc 01       	movw	r30, r24
    1974:	20 85       	ldd	r18, Z+8	; 0x08
    1976:	31 85       	ldd	r19, Z+9	; 0x09
    1978:	21 15       	cp	r18, r1
    197a:	31 05       	cpc	r19, r1
    197c:	11 f4       	brne	.+4      	; 0x1982 <pb_enc_uvarint+0x6e>
    197e:	27 e0       	ldi	r18, 0x07	; 7
    1980:	32 e0       	ldi	r19, 0x02	; 2
    1982:	dc 01       	movw	r26, r24
    1984:	19 96       	adiw	r26, 0x09	; 9
    1986:	3c 93       	st	X, r19
    1988:	2e 93       	st	-X, r18
    198a:	18 97       	sbiw	r26, 0x08	; 8
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	06 c0       	rjmp	.+12     	; 0x199c <pb_enc_uvarint+0x88>
    1990:	84 01       	movw	r16, r8
    1992:	95 01       	movw	r18, r10
    1994:	a6 01       	movw	r20, r12
    1996:	b7 01       	movw	r22, r14
    1998:	0e 94 0f 0c 	call	0x181e	; 0x181e <pb_encode_varint>
    199c:	1f 91       	pop	r17
    199e:	0f 91       	pop	r16
    19a0:	ff 90       	pop	r15
    19a2:	ef 90       	pop	r14
    19a4:	df 90       	pop	r13
    19a6:	cf 90       	pop	r12
    19a8:	bf 90       	pop	r11
    19aa:	af 90       	pop	r10
    19ac:	9f 90       	pop	r9
    19ae:	8f 90       	pop	r8
    19b0:	08 95       	ret

000019b2 <pb_enc_varint>:
    19b2:	0f 93       	push	r16
    19b4:	1f 93       	push	r17
    19b6:	cf 93       	push	r28
    19b8:	fa 01       	movw	r30, r20
    19ba:	db 01       	movw	r26, r22
    19bc:	14 96       	adiw	r26, 0x04	; 4
    19be:	2c 91       	ld	r18, X
    19c0:	21 30       	cpi	r18, 0x01	; 1
    19c2:	59 f4       	brne	.+22     	; 0x19da <pb_enc_varint+0x28>
    19c4:	00 81       	ld	r16, Z
    19c6:	10 2f       	mov	r17, r16
    19c8:	11 0f       	add	r17, r17
    19ca:	11 0b       	sbc	r17, r17
    19cc:	21 2f       	mov	r18, r17
    19ce:	31 2f       	mov	r19, r17
    19d0:	c1 2f       	mov	r28, r17
    19d2:	b1 2f       	mov	r27, r17
    19d4:	a1 2f       	mov	r26, r17
    19d6:	71 2f       	mov	r23, r17
    19d8:	38 c0       	rjmp	.+112    	; 0x1a4a <pb_enc_varint+0x98>
    19da:	22 30       	cpi	r18, 0x02	; 2
    19dc:	59 f4       	brne	.+22     	; 0x19f4 <pb_enc_varint+0x42>
    19de:	11 81       	ldd	r17, Z+1	; 0x01
    19e0:	00 81       	ld	r16, Z
    19e2:	21 2f       	mov	r18, r17
    19e4:	22 0f       	add	r18, r18
    19e6:	22 0b       	sbc	r18, r18
    19e8:	32 2f       	mov	r19, r18
    19ea:	c2 2f       	mov	r28, r18
    19ec:	b2 2f       	mov	r27, r18
    19ee:	a2 2f       	mov	r26, r18
    19f0:	72 2f       	mov	r23, r18
    19f2:	2b c0       	rjmp	.+86     	; 0x1a4a <pb_enc_varint+0x98>
    19f4:	24 30       	cpi	r18, 0x04	; 4
    19f6:	79 f4       	brne	.+30     	; 0x1a16 <pb_enc_varint+0x64>
    19f8:	40 81       	ld	r20, Z
    19fa:	51 81       	ldd	r21, Z+1	; 0x01
    19fc:	62 81       	ldd	r22, Z+2	; 0x02
    19fe:	73 81       	ldd	r23, Z+3	; 0x03
    1a00:	8a 01       	movw	r16, r20
    1a02:	9b 01       	movw	r18, r22
    1a04:	77 0f       	add	r23, r23
    1a06:	44 0b       	sbc	r20, r20
    1a08:	54 2f       	mov	r21, r20
    1a0a:	ba 01       	movw	r22, r20
    1a0c:	c4 2f       	mov	r28, r20
    1a0e:	b4 2f       	mov	r27, r20
    1a10:	a4 2f       	mov	r26, r20
    1a12:	74 2f       	mov	r23, r20
    1a14:	1a c0       	rjmp	.+52     	; 0x1a4a <pb_enc_varint+0x98>
    1a16:	28 30       	cpi	r18, 0x08	; 8
    1a18:	49 f4       	brne	.+18     	; 0x1a2c <pb_enc_varint+0x7a>
    1a1a:	00 81       	ld	r16, Z
    1a1c:	11 81       	ldd	r17, Z+1	; 0x01
    1a1e:	22 81       	ldd	r18, Z+2	; 0x02
    1a20:	33 81       	ldd	r19, Z+3	; 0x03
    1a22:	c4 81       	ldd	r28, Z+4	; 0x04
    1a24:	b5 81       	ldd	r27, Z+5	; 0x05
    1a26:	a6 81       	ldd	r26, Z+6	; 0x06
    1a28:	77 81       	ldd	r23, Z+7	; 0x07
    1a2a:	0f c0       	rjmp	.+30     	; 0x1a4a <pb_enc_varint+0x98>
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	20 85       	ldd	r18, Z+8	; 0x08
    1a30:	31 85       	ldd	r19, Z+9	; 0x09
    1a32:	21 15       	cp	r18, r1
    1a34:	31 05       	cpc	r19, r1
    1a36:	11 f4       	brne	.+4      	; 0x1a3c <pb_enc_varint+0x8a>
    1a38:	27 e0       	ldi	r18, 0x07	; 7
    1a3a:	32 e0       	ldi	r19, 0x02	; 2
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	19 96       	adiw	r26, 0x09	; 9
    1a40:	3c 93       	st	X, r19
    1a42:	2e 93       	st	-X, r18
    1a44:	18 97       	sbiw	r26, 0x08	; 8
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	05 c0       	rjmp	.+10     	; 0x1a54 <pb_enc_varint+0xa2>
    1a4a:	4c 2f       	mov	r20, r28
    1a4c:	5b 2f       	mov	r21, r27
    1a4e:	6a 2f       	mov	r22, r26
    1a50:	0e 94 0f 0c 	call	0x181e	; 0x181e <pb_encode_varint>
    1a54:	cf 91       	pop	r28
    1a56:	1f 91       	pop	r17
    1a58:	0f 91       	pop	r16
    1a5a:	08 95       	ret

00001a5c <pb_encode_svarint>:
    1a5c:	df 92       	push	r13
    1a5e:	ef 92       	push	r14
    1a60:	ff 92       	push	r15
    1a62:	0f 93       	push	r16
    1a64:	1f 93       	push	r17
    1a66:	cf 93       	push	r28
    1a68:	df 93       	push	r29
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	d2 2e       	mov	r13, r18
    1a6e:	e3 2e       	mov	r14, r19
    1a70:	f4 2e       	mov	r15, r20
    1a72:	d5 2f       	mov	r29, r21
    1a74:	c6 2f       	mov	r28, r22
    1a76:	b7 2f       	mov	r27, r23
    1a78:	98 01       	movw	r18, r16
    1a7a:	4d 2d       	mov	r20, r13
    1a7c:	5e 2d       	mov	r21, r14
    1a7e:	6f 2d       	mov	r22, r15
    1a80:	7d 2f       	mov	r23, r29
    1a82:	8c 2f       	mov	r24, r28
    1a84:	9b 2f       	mov	r25, r27
    1a86:	a0 e0       	ldi	r26, 0x00	; 0
    1a88:	0e 94 3d 24 	call	0x487a	; 0x487a <__cmpdi2_s8>
    1a8c:	64 f4       	brge	.+24     	; 0x1aa6 <pb_encode_svarint+0x4a>
    1a8e:	01 e0       	ldi	r16, 0x01	; 1
    1a90:	0e 94 06 24 	call	0x480c	; 0x480c <__ashldi3>
    1a94:	20 95       	com	r18
    1a96:	30 95       	com	r19
    1a98:	40 95       	com	r20
    1a9a:	50 95       	com	r21
    1a9c:	60 95       	com	r22
    1a9e:	70 95       	com	r23
    1aa0:	80 95       	com	r24
    1aa2:	90 95       	com	r25
    1aa4:	0a c0       	rjmp	.+20     	; 0x1aba <pb_encode_svarint+0x5e>
    1aa6:	98 01       	movw	r18, r16
    1aa8:	4d 2d       	mov	r20, r13
    1aaa:	5e 2d       	mov	r21, r14
    1aac:	6f 2d       	mov	r22, r15
    1aae:	7d 2f       	mov	r23, r29
    1ab0:	8c 2f       	mov	r24, r28
    1ab2:	9b 2f       	mov	r25, r27
    1ab4:	01 e0       	ldi	r16, 0x01	; 1
    1ab6:	0e 94 06 24 	call	0x480c	; 0x480c <__ashldi3>
    1aba:	89 01       	movw	r16, r18
    1abc:	9a 01       	movw	r18, r20
    1abe:	ab 01       	movw	r20, r22
    1ac0:	bc 01       	movw	r22, r24
    1ac2:	cf 01       	movw	r24, r30
    1ac4:	0e 94 0f 0c 	call	0x181e	; 0x181e <pb_encode_varint>
    1ac8:	df 91       	pop	r29
    1aca:	cf 91       	pop	r28
    1acc:	1f 91       	pop	r17
    1ace:	0f 91       	pop	r16
    1ad0:	ff 90       	pop	r15
    1ad2:	ef 90       	pop	r14
    1ad4:	df 90       	pop	r13
    1ad6:	08 95       	ret

00001ad8 <pb_enc_svarint>:
    1ad8:	0f 93       	push	r16
    1ada:	1f 93       	push	r17
    1adc:	cf 93       	push	r28
    1ade:	fa 01       	movw	r30, r20
    1ae0:	db 01       	movw	r26, r22
    1ae2:	14 96       	adiw	r26, 0x04	; 4
    1ae4:	2c 91       	ld	r18, X
    1ae6:	21 30       	cpi	r18, 0x01	; 1
    1ae8:	59 f4       	brne	.+22     	; 0x1b00 <pb_enc_svarint+0x28>
    1aea:	00 81       	ld	r16, Z
    1aec:	10 2f       	mov	r17, r16
    1aee:	11 0f       	add	r17, r17
    1af0:	11 0b       	sbc	r17, r17
    1af2:	21 2f       	mov	r18, r17
    1af4:	31 2f       	mov	r19, r17
    1af6:	c1 2f       	mov	r28, r17
    1af8:	b1 2f       	mov	r27, r17
    1afa:	a1 2f       	mov	r26, r17
    1afc:	71 2f       	mov	r23, r17
    1afe:	38 c0       	rjmp	.+112    	; 0x1b70 <pb_enc_svarint+0x98>
    1b00:	22 30       	cpi	r18, 0x02	; 2
    1b02:	59 f4       	brne	.+22     	; 0x1b1a <pb_enc_svarint+0x42>
    1b04:	11 81       	ldd	r17, Z+1	; 0x01
    1b06:	00 81       	ld	r16, Z
    1b08:	21 2f       	mov	r18, r17
    1b0a:	22 0f       	add	r18, r18
    1b0c:	22 0b       	sbc	r18, r18
    1b0e:	32 2f       	mov	r19, r18
    1b10:	c2 2f       	mov	r28, r18
    1b12:	b2 2f       	mov	r27, r18
    1b14:	a2 2f       	mov	r26, r18
    1b16:	72 2f       	mov	r23, r18
    1b18:	2b c0       	rjmp	.+86     	; 0x1b70 <pb_enc_svarint+0x98>
    1b1a:	24 30       	cpi	r18, 0x04	; 4
    1b1c:	79 f4       	brne	.+30     	; 0x1b3c <pb_enc_svarint+0x64>
    1b1e:	40 81       	ld	r20, Z
    1b20:	51 81       	ldd	r21, Z+1	; 0x01
    1b22:	62 81       	ldd	r22, Z+2	; 0x02
    1b24:	73 81       	ldd	r23, Z+3	; 0x03
    1b26:	8a 01       	movw	r16, r20
    1b28:	9b 01       	movw	r18, r22
    1b2a:	77 0f       	add	r23, r23
    1b2c:	44 0b       	sbc	r20, r20
    1b2e:	54 2f       	mov	r21, r20
    1b30:	ba 01       	movw	r22, r20
    1b32:	c4 2f       	mov	r28, r20
    1b34:	b4 2f       	mov	r27, r20
    1b36:	a4 2f       	mov	r26, r20
    1b38:	74 2f       	mov	r23, r20
    1b3a:	1a c0       	rjmp	.+52     	; 0x1b70 <pb_enc_svarint+0x98>
    1b3c:	28 30       	cpi	r18, 0x08	; 8
    1b3e:	49 f4       	brne	.+18     	; 0x1b52 <pb_enc_svarint+0x7a>
    1b40:	00 81       	ld	r16, Z
    1b42:	11 81       	ldd	r17, Z+1	; 0x01
    1b44:	22 81       	ldd	r18, Z+2	; 0x02
    1b46:	33 81       	ldd	r19, Z+3	; 0x03
    1b48:	c4 81       	ldd	r28, Z+4	; 0x04
    1b4a:	b5 81       	ldd	r27, Z+5	; 0x05
    1b4c:	a6 81       	ldd	r26, Z+6	; 0x06
    1b4e:	77 81       	ldd	r23, Z+7	; 0x07
    1b50:	0f c0       	rjmp	.+30     	; 0x1b70 <pb_enc_svarint+0x98>
    1b52:	fc 01       	movw	r30, r24
    1b54:	20 85       	ldd	r18, Z+8	; 0x08
    1b56:	31 85       	ldd	r19, Z+9	; 0x09
    1b58:	21 15       	cp	r18, r1
    1b5a:	31 05       	cpc	r19, r1
    1b5c:	11 f4       	brne	.+4      	; 0x1b62 <pb_enc_svarint+0x8a>
    1b5e:	27 e0       	ldi	r18, 0x07	; 7
    1b60:	32 e0       	ldi	r19, 0x02	; 2
    1b62:	dc 01       	movw	r26, r24
    1b64:	19 96       	adiw	r26, 0x09	; 9
    1b66:	3c 93       	st	X, r19
    1b68:	2e 93       	st	-X, r18
    1b6a:	18 97       	sbiw	r26, 0x08	; 8
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	05 c0       	rjmp	.+10     	; 0x1b7a <pb_enc_svarint+0xa2>
    1b70:	4c 2f       	mov	r20, r28
    1b72:	5b 2f       	mov	r21, r27
    1b74:	6a 2f       	mov	r22, r26
    1b76:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <pb_encode_svarint>
    1b7a:	cf 91       	pop	r28
    1b7c:	1f 91       	pop	r17
    1b7e:	0f 91       	pop	r16
    1b80:	08 95       	ret

00001b82 <pb_encode_fixed32>:
    1b82:	cf 93       	push	r28
    1b84:	df 93       	push	r29
    1b86:	00 d0       	rcall	.+0      	; 0x1b88 <pb_encode_fixed32+0x6>
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <pb_encode_fixed32+0x8>
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
    1b8e:	fb 01       	movw	r30, r22
    1b90:	50 81       	ld	r21, Z
    1b92:	41 81       	ldd	r20, Z+1	; 0x01
    1b94:	32 81       	ldd	r19, Z+2	; 0x02
    1b96:	23 81       	ldd	r18, Z+3	; 0x03
    1b98:	59 83       	std	Y+1, r21	; 0x01
    1b9a:	4a 83       	std	Y+2, r20	; 0x02
    1b9c:	3b 83       	std	Y+3, r19	; 0x03
    1b9e:	2c 83       	std	Y+4, r18	; 0x04
    1ba0:	44 e0       	ldi	r20, 0x04	; 4
    1ba2:	50 e0       	ldi	r21, 0x00	; 0
    1ba4:	be 01       	movw	r22, r28
    1ba6:	6f 5f       	subi	r22, 0xFF	; 255
    1ba8:	7f 4f       	sbci	r23, 0xFF	; 255
    1baa:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <pb_write>
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	df 91       	pop	r29
    1bb8:	cf 91       	pop	r28
    1bba:	08 95       	ret

00001bbc <pb_enc_fixed32>:
    1bbc:	ba 01       	movw	r22, r20
    1bbe:	0c 94 c1 0d 	jmp	0x1b82	; 0x1b82 <pb_encode_fixed32>

00001bc2 <pb_encode_fixed64>:
    1bc2:	9f 92       	push	r9
    1bc4:	af 92       	push	r10
    1bc6:	bf 92       	push	r11
    1bc8:	cf 92       	push	r12
    1bca:	df 92       	push	r13
    1bcc:	ef 92       	push	r14
    1bce:	ff 92       	push	r15
    1bd0:	0f 93       	push	r16
    1bd2:	1f 93       	push	r17
    1bd4:	cf 93       	push	r28
    1bd6:	df 93       	push	r29
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	28 97       	sbiw	r28, 0x08	; 8
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	f8 94       	cli
    1be2:	de bf       	out	0x3e, r29	; 62
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	cd bf       	out	0x3d, r28	; 61
    1be8:	5c 01       	movw	r10, r24
    1bea:	db 01       	movw	r26, r22
    1bec:	ec 91       	ld	r30, X
    1bee:	11 96       	adiw	r26, 0x01	; 1
    1bf0:	9c 90       	ld	r9, X
    1bf2:	11 97       	sbiw	r26, 0x01	; 1
    1bf4:	12 96       	adiw	r26, 0x02	; 2
    1bf6:	cc 90       	ld	r12, X
    1bf8:	12 97       	sbiw	r26, 0x02	; 2
    1bfa:	13 96       	adiw	r26, 0x03	; 3
    1bfc:	dc 90       	ld	r13, X
    1bfe:	13 97       	sbiw	r26, 0x03	; 3
    1c00:	14 96       	adiw	r26, 0x04	; 4
    1c02:	ec 90       	ld	r14, X
    1c04:	14 97       	sbiw	r26, 0x04	; 4
    1c06:	15 96       	adiw	r26, 0x05	; 5
    1c08:	fc 90       	ld	r15, X
    1c0a:	15 97       	sbiw	r26, 0x05	; 5
    1c0c:	16 96       	adiw	r26, 0x06	; 6
    1c0e:	1c 91       	ld	r17, X
    1c10:	16 97       	sbiw	r26, 0x06	; 6
    1c12:	17 96       	adiw	r26, 0x07	; 7
    1c14:	fc 91       	ld	r31, X
    1c16:	e9 83       	std	Y+1, r30	; 0x01
    1c18:	2e 2f       	mov	r18, r30
    1c1a:	39 2d       	mov	r19, r9
    1c1c:	a6 01       	movw	r20, r12
    1c1e:	b7 01       	movw	r22, r14
    1c20:	81 2f       	mov	r24, r17
    1c22:	9f 2f       	mov	r25, r31
    1c24:	08 e0       	ldi	r16, 0x08	; 8
    1c26:	0e 94 21 24 	call	0x4842	; 0x4842 <__lshrdi3>
    1c2a:	2a 83       	std	Y+2, r18	; 0x02
    1c2c:	2e 2f       	mov	r18, r30
    1c2e:	39 2d       	mov	r19, r9
    1c30:	a6 01       	movw	r20, r12
    1c32:	b7 01       	movw	r22, r14
    1c34:	81 2f       	mov	r24, r17
    1c36:	9f 2f       	mov	r25, r31
    1c38:	00 e1       	ldi	r16, 0x10	; 16
    1c3a:	0e 94 21 24 	call	0x4842	; 0x4842 <__lshrdi3>
    1c3e:	2b 83       	std	Y+3, r18	; 0x03
    1c40:	2e 2f       	mov	r18, r30
    1c42:	39 2d       	mov	r19, r9
    1c44:	a6 01       	movw	r20, r12
    1c46:	b7 01       	movw	r22, r14
    1c48:	81 2f       	mov	r24, r17
    1c4a:	9f 2f       	mov	r25, r31
    1c4c:	08 e1       	ldi	r16, 0x18	; 24
    1c4e:	0e 94 21 24 	call	0x4842	; 0x4842 <__lshrdi3>
    1c52:	2c 83       	std	Y+4, r18	; 0x04
    1c54:	2e 2f       	mov	r18, r30
    1c56:	39 2d       	mov	r19, r9
    1c58:	a6 01       	movw	r20, r12
    1c5a:	b7 01       	movw	r22, r14
    1c5c:	81 2f       	mov	r24, r17
    1c5e:	9f 2f       	mov	r25, r31
    1c60:	00 e2       	ldi	r16, 0x20	; 32
    1c62:	0e 94 21 24 	call	0x4842	; 0x4842 <__lshrdi3>
    1c66:	2d 83       	std	Y+5, r18	; 0x05
    1c68:	2e 2f       	mov	r18, r30
    1c6a:	39 2d       	mov	r19, r9
    1c6c:	a6 01       	movw	r20, r12
    1c6e:	b7 01       	movw	r22, r14
    1c70:	81 2f       	mov	r24, r17
    1c72:	9f 2f       	mov	r25, r31
    1c74:	08 e2       	ldi	r16, 0x28	; 40
    1c76:	0e 94 21 24 	call	0x4842	; 0x4842 <__lshrdi3>
    1c7a:	2e 83       	std	Y+6, r18	; 0x06
    1c7c:	2e 2f       	mov	r18, r30
    1c7e:	39 2d       	mov	r19, r9
    1c80:	a6 01       	movw	r20, r12
    1c82:	b7 01       	movw	r22, r14
    1c84:	81 2f       	mov	r24, r17
    1c86:	9f 2f       	mov	r25, r31
    1c88:	00 e3       	ldi	r16, 0x30	; 48
    1c8a:	0e 94 21 24 	call	0x4842	; 0x4842 <__lshrdi3>
    1c8e:	2f 83       	std	Y+7, r18	; 0x07
    1c90:	2e 2f       	mov	r18, r30
    1c92:	39 2d       	mov	r19, r9
    1c94:	a6 01       	movw	r20, r12
    1c96:	b7 01       	movw	r22, r14
    1c98:	81 2f       	mov	r24, r17
    1c9a:	9f 2f       	mov	r25, r31
    1c9c:	08 e3       	ldi	r16, 0x38	; 56
    1c9e:	0e 94 21 24 	call	0x4842	; 0x4842 <__lshrdi3>
    1ca2:	28 87       	std	Y+8, r18	; 0x08
    1ca4:	48 e0       	ldi	r20, 0x08	; 8
    1ca6:	50 e0       	ldi	r21, 0x00	; 0
    1ca8:	be 01       	movw	r22, r28
    1caa:	6f 5f       	subi	r22, 0xFF	; 255
    1cac:	7f 4f       	sbci	r23, 0xFF	; 255
    1cae:	c5 01       	movw	r24, r10
    1cb0:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <pb_write>
    1cb4:	28 96       	adiw	r28, 0x08	; 8
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	f8 94       	cli
    1cba:	de bf       	out	0x3e, r29	; 62
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	cd bf       	out	0x3d, r28	; 61
    1cc0:	df 91       	pop	r29
    1cc2:	cf 91       	pop	r28
    1cc4:	1f 91       	pop	r17
    1cc6:	0f 91       	pop	r16
    1cc8:	ff 90       	pop	r15
    1cca:	ef 90       	pop	r14
    1ccc:	df 90       	pop	r13
    1cce:	cf 90       	pop	r12
    1cd0:	bf 90       	pop	r11
    1cd2:	af 90       	pop	r10
    1cd4:	9f 90       	pop	r9
    1cd6:	08 95       	ret

00001cd8 <pb_enc_fixed64>:
    1cd8:	ba 01       	movw	r22, r20
    1cda:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <pb_encode_fixed64>

00001cde <pb_encode_tag>:
    1cde:	df 92       	push	r13
    1ce0:	ef 92       	push	r14
    1ce2:	ff 92       	push	r15
    1ce4:	0f 93       	push	r16
    1ce6:	1f 93       	push	r17
    1ce8:	cf 93       	push	r28
    1cea:	df 93       	push	r29
    1cec:	7c 01       	movw	r14, r24
    1cee:	d6 2e       	mov	r13, r22
    1cf0:	da 01       	movw	r26, r20
    1cf2:	c9 01       	movw	r24, r18
    1cf4:	ad 01       	movw	r20, r26
    1cf6:	60 e0       	ldi	r22, 0x00	; 0
    1cf8:	70 e0       	ldi	r23, 0x00	; 0
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	03 e0       	ldi	r16, 0x03	; 3
    1d00:	0e 94 06 24 	call	0x480c	; 0x480c <__ashldi3>
    1d04:	02 2f       	mov	r16, r18
    1d06:	0d 29       	or	r16, r13
    1d08:	13 2f       	mov	r17, r19
    1d0a:	9a 01       	movw	r18, r20
    1d0c:	ab 01       	movw	r20, r22
    1d0e:	bc 01       	movw	r22, r24
    1d10:	c7 01       	movw	r24, r14
    1d12:	0e 94 0f 0c 	call	0x181e	; 0x181e <pb_encode_varint>
    1d16:	df 91       	pop	r29
    1d18:	cf 91       	pop	r28
    1d1a:	1f 91       	pop	r17
    1d1c:	0f 91       	pop	r16
    1d1e:	ff 90       	pop	r15
    1d20:	ef 90       	pop	r14
    1d22:	df 90       	pop	r13
    1d24:	08 95       	ret

00001d26 <pb_encode_tag_for_field>:
    1d26:	cf 93       	push	r28
    1d28:	df 93       	push	r29
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	eb 01       	movw	r28, r22
    1d2e:	49 81       	ldd	r20, Y+1	; 0x01
    1d30:	e4 2f       	mov	r30, r20
    1d32:	ef 70       	andi	r30, 0x0F	; 15
    1d34:	4e 2f       	mov	r20, r30
    1d36:	50 e0       	ldi	r21, 0x00	; 0
    1d38:	4a 30       	cpi	r20, 0x0A	; 10
    1d3a:	51 05       	cpc	r21, r1
    1d3c:	48 f4       	brcc	.+18     	; 0x1d50 <pb_encode_tag_for_field+0x2a>
    1d3e:	fa 01       	movw	r30, r20
    1d40:	ec 5c       	subi	r30, 0xCC	; 204
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	0c 94 00 24 	jmp	0x4800	; 0x4800 <__tablejump2__>
    1d48:	65 e0       	ldi	r22, 0x05	; 5
    1d4a:	0e c0       	rjmp	.+28     	; 0x1d68 <pb_encode_tag_for_field+0x42>
    1d4c:	62 e0       	ldi	r22, 0x02	; 2
    1d4e:	0c c0       	rjmp	.+24     	; 0x1d68 <pb_encode_tag_for_field+0x42>
    1d50:	18 96       	adiw	r26, 0x08	; 8
    1d52:	8d 91       	ld	r24, X+
    1d54:	9c 91       	ld	r25, X
    1d56:	19 97       	sbiw	r26, 0x09	; 9
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	79 f4       	brne	.+30     	; 0x1d7a <pb_encode_tag_for_field+0x54>
    1d5c:	89 e1       	ldi	r24, 0x19	; 25
    1d5e:	92 e0       	ldi	r25, 0x02	; 2
    1d60:	0c c0       	rjmp	.+24     	; 0x1d7a <pb_encode_tag_for_field+0x54>
    1d62:	60 e0       	ldi	r22, 0x00	; 0
    1d64:	01 c0       	rjmp	.+2      	; 0x1d68 <pb_encode_tag_for_field+0x42>
    1d66:	61 e0       	ldi	r22, 0x01	; 1
    1d68:	28 81       	ld	r18, Y
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e0       	ldi	r20, 0x00	; 0
    1d6e:	50 e0       	ldi	r21, 0x00	; 0
    1d70:	cd 01       	movw	r24, r26
    1d72:	df 91       	pop	r29
    1d74:	cf 91       	pop	r28
    1d76:	0c 94 6f 0e 	jmp	0x1cde	; 0x1cde <pb_encode_tag>
    1d7a:	19 96       	adiw	r26, 0x09	; 9
    1d7c:	9c 93       	st	X, r25
    1d7e:	8e 93       	st	-X, r24
    1d80:	18 97       	sbiw	r26, 0x08	; 8
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	df 91       	pop	r29
    1d86:	cf 91       	pop	r28
    1d88:	08 95       	ret

00001d8a <encode_field>:
    1d8a:	2f 92       	push	r2
    1d8c:	3f 92       	push	r3
    1d8e:	4f 92       	push	r4
    1d90:	5f 92       	push	r5
    1d92:	6f 92       	push	r6
    1d94:	7f 92       	push	r7
    1d96:	8f 92       	push	r8
    1d98:	9f 92       	push	r9
    1d9a:	af 92       	push	r10
    1d9c:	bf 92       	push	r11
    1d9e:	cf 92       	push	r12
    1da0:	df 92       	push	r13
    1da2:	ef 92       	push	r14
    1da4:	ff 92       	push	r15
    1da6:	0f 93       	push	r16
    1da8:	1f 93       	push	r17
    1daa:	cf 93       	push	r28
    1dac:	df 93       	push	r29
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
    1db2:	2b 97       	sbiw	r28, 0x0b	; 11
    1db4:	0f b6       	in	r0, 0x3f	; 63
    1db6:	f8 94       	cli
    1db8:	de bf       	out	0x3e, r29	; 62
    1dba:	0f be       	out	0x3f, r0	; 63
    1dbc:	cd bf       	out	0x3d, r28	; 61
    1dbe:	7c 01       	movw	r14, r24
    1dc0:	6b 01       	movw	r12, r22
    1dc2:	5a 01       	movw	r10, r20
    1dc4:	db 01       	movw	r26, r22
    1dc6:	11 96       	adiw	r26, 0x01	; 1
    1dc8:	8c 91       	ld	r24, X
    1dca:	98 2f       	mov	r25, r24
    1dcc:	90 7c       	andi	r25, 0xC0	; 192
    1dce:	90 34       	cpi	r25, 0x40	; 64
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <encode_field+0x4a>
    1dd2:	28 c1       	rjmp	.+592    	; 0x2024 <encode_field+0x29a>
    1dd4:	90 38       	cpi	r25, 0x80	; 128
    1dd6:	11 f0       	breq	.+4      	; 0x1ddc <encode_field+0x52>
    1dd8:	91 11       	cpse	r25, r1
    1dda:	3d c1       	rjmp	.+634    	; 0x2056 <encode_field+0x2cc>
    1ddc:	e8 2f       	mov	r30, r24
    1dde:	ef 70       	andi	r30, 0x0F	; 15
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	ee 0f       	add	r30, r30
    1de4:	ff 1f       	adc	r31, r31
    1de6:	e5 55       	subi	r30, 0x55	; 85
    1de8:	fd 4f       	sbci	r31, 0xFD	; 253
    1dea:	40 80       	ld	r4, Z
    1dec:	51 80       	ldd	r5, Z+1	; 0x01
    1dee:	f6 01       	movw	r30, r12
    1df0:	93 81       	ldd	r25, Z+3	; 0x03
    1df2:	99 23       	and	r25, r25
    1df4:	31 f0       	breq	.+12     	; 0x1e02 <encode_field+0x78>
    1df6:	f5 01       	movw	r30, r10
    1df8:	e9 0f       	add	r30, r25
    1dfa:	f1 1d       	adc	r31, r1
    1dfc:	97 fd       	sbrc	r25, 7
    1dfe:	fa 95       	dec	r31
    1e00:	0e c0       	rjmp	.+28     	; 0x1e1e <encode_field+0x94>
    1e02:	80 73       	andi	r24, 0x30	; 48
    1e04:	80 31       	cpi	r24, 0x10	; 16
    1e06:	39 f4       	brne	.+14     	; 0x1e16 <encode_field+0x8c>
    1e08:	b5 01       	movw	r22, r10
    1e0a:	c6 01       	movw	r24, r12
    1e0c:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <pb_check_proto3_default_value>
    1e10:	91 e0       	ldi	r25, 0x01	; 1
    1e12:	89 27       	eor	r24, r25
    1e14:	01 c0       	rjmp	.+2      	; 0x1e18 <encode_field+0x8e>
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	8b 87       	std	Y+11, r24	; 0x0b
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	3b 96       	adiw	r30, 0x0b	; 11
    1e1e:	d6 01       	movw	r26, r12
    1e20:	11 96       	adiw	r26, 0x01	; 1
    1e22:	8c 91       	ld	r24, X
    1e24:	28 2f       	mov	r18, r24
    1e26:	20 7c       	andi	r18, 0xC0	; 192
    1e28:	20 38       	cpi	r18, 0x80	; 128
    1e2a:	49 f4       	brne	.+18     	; 0x1e3e <encode_field+0xb4>
    1e2c:	d5 01       	movw	r26, r10
    1e2e:	ad 90       	ld	r10, X+
    1e30:	bc 90       	ld	r11, X
    1e32:	91 e0       	ldi	r25, 0x01	; 1
    1e34:	a1 14       	cp	r10, r1
    1e36:	b1 04       	cpc	r11, r1
    1e38:	09 f4       	brne	.+2      	; 0x1e3c <encode_field+0xb2>
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	9b 87       	std	Y+11, r25	; 0x0b
    1e3e:	98 2f       	mov	r25, r24
    1e40:	90 73       	andi	r25, 0x30	; 48
    1e42:	90 31       	cpi	r25, 0x10	; 16
    1e44:	b9 f0       	breq	.+46     	; 0x1e74 <encode_field+0xea>
    1e46:	18 f4       	brcc	.+6      	; 0x1e4e <encode_field+0xc4>
    1e48:	99 23       	and	r25, r25
    1e4a:	39 f0       	breq	.+14     	; 0x1e5a <encode_field+0xd0>
    1e4c:	de c0       	rjmp	.+444    	; 0x200a <encode_field+0x280>
    1e4e:	90 32       	cpi	r25, 0x20	; 32
    1e50:	b1 f0       	breq	.+44     	; 0x1e7e <encode_field+0xf4>
    1e52:	90 33       	cpi	r25, 0x30	; 48
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <encode_field+0xce>
    1e56:	c8 c0       	rjmp	.+400    	; 0x1fe8 <encode_field+0x25e>
    1e58:	d8 c0       	rjmp	.+432    	; 0x200a <encode_field+0x280>
    1e5a:	a1 14       	cp	r10, r1
    1e5c:	b1 04       	cpc	r11, r1
    1e5e:	09 f0       	breq	.+2      	; 0x1e62 <encode_field+0xd8>
    1e60:	c8 c0       	rjmp	.+400    	; 0x1ff2 <encode_field+0x268>
    1e62:	f7 01       	movw	r30, r14
    1e64:	80 85       	ldd	r24, Z+8	; 0x08
    1e66:	91 85       	ldd	r25, Z+9	; 0x09
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	09 f0       	breq	.+2      	; 0x1e6e <encode_field+0xe4>
    1e6c:	fb c0       	rjmp	.+502    	; 0x2064 <encode_field+0x2da>
    1e6e:	8c e2       	ldi	r24, 0x2C	; 44
    1e70:	92 e0       	ldi	r25, 0x02	; 2
    1e72:	f8 c0       	rjmp	.+496    	; 0x2064 <encode_field+0x2da>
    1e74:	80 81       	ld	r24, Z
    1e76:	88 23       	and	r24, r24
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <encode_field+0xf2>
    1e7a:	fa c0       	rjmp	.+500    	; 0x2070 <encode_field+0x2e6>
    1e7c:	ba c0       	rjmp	.+372    	; 0x1ff2 <encode_field+0x268>
    1e7e:	60 80       	ld	r6, Z
    1e80:	71 2c       	mov	r7, r1
    1e82:	61 14       	cp	r6, r1
    1e84:	71 04       	cpc	r7, r1
    1e86:	09 f4       	brne	.+2      	; 0x1e8a <encode_field+0x100>
    1e88:	f3 c0       	rjmp	.+486    	; 0x2070 <encode_field+0x2e6>
    1e8a:	20 38       	cpi	r18, 0x80	; 128
    1e8c:	81 f0       	breq	.+32     	; 0x1eae <encode_field+0x124>
    1e8e:	d6 01       	movw	r26, r12
    1e90:	15 96       	adiw	r26, 0x05	; 5
    1e92:	2c 91       	ld	r18, X
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	26 15       	cp	r18, r6
    1e98:	37 05       	cpc	r19, r7
    1e9a:	48 f4       	brcc	.+18     	; 0x1eae <encode_field+0x124>
    1e9c:	f7 01       	movw	r30, r14
    1e9e:	80 85       	ldd	r24, Z+8	; 0x08
    1ea0:	91 85       	ldd	r25, Z+9	; 0x09
    1ea2:	00 97       	sbiw	r24, 0x00	; 0
    1ea4:	09 f0       	breq	.+2      	; 0x1ea8 <encode_field+0x11e>
    1ea6:	de c0       	rjmp	.+444    	; 0x2064 <encode_field+0x2da>
    1ea8:	83 e4       	ldi	r24, 0x43	; 67
    1eaa:	92 e0       	ldi	r25, 0x02	; 2
    1eac:	db c0       	rjmp	.+438    	; 0x2064 <encode_field+0x2da>
    1eae:	8f 70       	andi	r24, 0x0F	; 15
    1eb0:	85 30       	cpi	r24, 0x05	; 5
    1eb2:	08 f0       	brcs	.+2      	; 0x1eb6 <encode_field+0x12c>
    1eb4:	6e c0       	rjmp	.+220    	; 0x1f92 <encode_field+0x208>
    1eb6:	f6 01       	movw	r30, r12
    1eb8:	20 81       	ld	r18, Z
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 e0       	ldi	r20, 0x00	; 0
    1ebe:	50 e0       	ldi	r21, 0x00	; 0
    1ec0:	62 e0       	ldi	r22, 0x02	; 2
    1ec2:	c7 01       	movw	r24, r14
    1ec4:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <pb_encode_tag>
    1ec8:	88 23       	and	r24, r24
    1eca:	09 f4       	brne	.+2      	; 0x1ece <encode_field+0x144>
    1ecc:	d3 c0       	rjmp	.+422    	; 0x2074 <encode_field+0x2ea>
    1ece:	d6 01       	movw	r26, r12
    1ed0:	11 96       	adiw	r26, 0x01	; 1
    1ed2:	8c 91       	ld	r24, X
    1ed4:	8f 70       	andi	r24, 0x0F	; 15
    1ed6:	83 30       	cpi	r24, 0x03	; 3
    1ed8:	31 f4       	brne	.+12     	; 0x1ee6 <encode_field+0x15c>
    1eda:	43 01       	movw	r8, r6
    1edc:	88 0c       	add	r8, r8
    1ede:	99 1c       	adc	r9, r9
    1ee0:	88 0c       	add	r8, r8
    1ee2:	99 1c       	adc	r9, r9
    1ee4:	28 c0       	rjmp	.+80     	; 0x1f36 <encode_field+0x1ac>
    1ee6:	84 30       	cpi	r24, 0x04	; 4
    1ee8:	39 f4       	brne	.+14     	; 0x1ef8 <encode_field+0x16e>
    1eea:	43 01       	movw	r8, r6
    1eec:	83 e0       	ldi	r24, 0x03	; 3
    1eee:	88 0c       	add	r8, r8
    1ef0:	99 1c       	adc	r9, r9
    1ef2:	8a 95       	dec	r24
    1ef4:	e1 f7       	brne	.-8      	; 0x1eee <encode_field+0x164>
    1ef6:	1f c0       	rjmp	.+62     	; 0x1f36 <encode_field+0x1ac>
    1ef8:	fe 01       	movw	r30, r28
    1efa:	31 96       	adiw	r30, 0x01	; 1
    1efc:	1f 01       	movw	r2, r30
    1efe:	8a e0       	ldi	r24, 0x0A	; 10
    1f00:	df 01       	movw	r26, r30
    1f02:	1d 92       	st	X+, r1
    1f04:	8a 95       	dec	r24
    1f06:	e9 f7       	brne	.-6      	; 0x1f02 <encode_field+0x178>
    1f08:	45 01       	movw	r8, r10
    1f0a:	00 e0       	ldi	r16, 0x00	; 0
    1f0c:	10 e0       	ldi	r17, 0x00	; 0
    1f0e:	a4 01       	movw	r20, r8
    1f10:	b6 01       	movw	r22, r12
    1f12:	c1 01       	movw	r24, r2
    1f14:	f2 01       	movw	r30, r4
    1f16:	09 95       	icall
    1f18:	88 23       	and	r24, r24
    1f1a:	09 f4       	brne	.+2      	; 0x1f1e <encode_field+0x194>
    1f1c:	ab c0       	rjmp	.+342    	; 0x2074 <encode_field+0x2ea>
    1f1e:	d6 01       	movw	r26, r12
    1f20:	14 96       	adiw	r26, 0x04	; 4
    1f22:	8c 91       	ld	r24, X
    1f24:	88 0e       	add	r8, r24
    1f26:	91 1c       	adc	r9, r1
    1f28:	0f 5f       	subi	r16, 0xFF	; 255
    1f2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f2c:	06 15       	cp	r16, r6
    1f2e:	17 05       	cpc	r17, r7
    1f30:	70 f3       	brcs	.-36     	; 0x1f0e <encode_field+0x184>
    1f32:	8f 80       	ldd	r8, Y+7	; 0x07
    1f34:	98 84       	ldd	r9, Y+8	; 0x08
    1f36:	84 01       	movw	r16, r8
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 e0       	ldi	r20, 0x00	; 0
    1f3e:	50 e0       	ldi	r21, 0x00	; 0
    1f40:	60 e0       	ldi	r22, 0x00	; 0
    1f42:	70 e0       	ldi	r23, 0x00	; 0
    1f44:	c7 01       	movw	r24, r14
    1f46:	0e 94 0f 0c 	call	0x181e	; 0x181e <pb_encode_varint>
    1f4a:	88 23       	and	r24, r24
    1f4c:	09 f4       	brne	.+2      	; 0x1f50 <encode_field+0x1c6>
    1f4e:	92 c0       	rjmp	.+292    	; 0x2074 <encode_field+0x2ea>
    1f50:	f7 01       	movw	r30, r14
    1f52:	80 81       	ld	r24, Z
    1f54:	91 81       	ldd	r25, Z+1	; 0x01
    1f56:	89 2b       	or	r24, r25
    1f58:	39 f4       	brne	.+14     	; 0x1f68 <encode_field+0x1de>
    1f5a:	a4 01       	movw	r20, r8
    1f5c:	60 e0       	ldi	r22, 0x00	; 0
    1f5e:	70 e0       	ldi	r23, 0x00	; 0
    1f60:	c7 01       	movw	r24, r14
    1f62:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <pb_write>
    1f66:	87 c0       	rjmp	.+270    	; 0x2076 <encode_field+0x2ec>
    1f68:	00 e0       	ldi	r16, 0x00	; 0
    1f6a:	10 e0       	ldi	r17, 0x00	; 0
    1f6c:	a5 01       	movw	r20, r10
    1f6e:	b6 01       	movw	r22, r12
    1f70:	c7 01       	movw	r24, r14
    1f72:	f2 01       	movw	r30, r4
    1f74:	09 95       	icall
    1f76:	88 23       	and	r24, r24
    1f78:	09 f4       	brne	.+2      	; 0x1f7c <encode_field+0x1f2>
    1f7a:	7c c0       	rjmp	.+248    	; 0x2074 <encode_field+0x2ea>
    1f7c:	d6 01       	movw	r26, r12
    1f7e:	14 96       	adiw	r26, 0x04	; 4
    1f80:	8c 91       	ld	r24, X
    1f82:	a8 0e       	add	r10, r24
    1f84:	b1 1c       	adc	r11, r1
    1f86:	0f 5f       	subi	r16, 0xFF	; 255
    1f88:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8a:	06 15       	cp	r16, r6
    1f8c:	17 05       	cpc	r17, r7
    1f8e:	70 f3       	brcs	.-36     	; 0x1f6c <encode_field+0x1e2>
    1f90:	6f c0       	rjmp	.+222    	; 0x2070 <encode_field+0x2e6>
    1f92:	00 e0       	ldi	r16, 0x00	; 0
    1f94:	10 e0       	ldi	r17, 0x00	; 0
    1f96:	b6 01       	movw	r22, r12
    1f98:	c7 01       	movw	r24, r14
    1f9a:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <pb_encode_tag_for_field>
    1f9e:	88 23       	and	r24, r24
    1fa0:	09 f4       	brne	.+2      	; 0x1fa4 <encode_field+0x21a>
    1fa2:	68 c0       	rjmp	.+208    	; 0x2074 <encode_field+0x2ea>
    1fa4:	f6 01       	movw	r30, r12
    1fa6:	81 81       	ldd	r24, Z+1	; 0x01
    1fa8:	98 2f       	mov	r25, r24
    1faa:	90 7c       	andi	r25, 0xC0	; 192
    1fac:	90 38       	cpi	r25, 0x80	; 128
    1fae:	d1 f4       	brne	.+52     	; 0x1fe4 <encode_field+0x25a>
    1fb0:	8f 70       	andi	r24, 0x0F	; 15
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	05 97       	sbiw	r24, 0x05	; 5
    1fb6:	02 97       	sbiw	r24, 0x02	; 2
    1fb8:	a8 f4       	brcc	.+42     	; 0x1fe4 <encode_field+0x25a>
    1fba:	d5 01       	movw	r26, r10
    1fbc:	4d 91       	ld	r20, X+
    1fbe:	5c 91       	ld	r21, X
    1fc0:	b6 01       	movw	r22, r12
    1fc2:	c7 01       	movw	r24, r14
    1fc4:	f2 01       	movw	r30, r4
    1fc6:	09 95       	icall
    1fc8:	88 23       	and	r24, r24
    1fca:	09 f4       	brne	.+2      	; 0x1fce <encode_field+0x244>
    1fcc:	53 c0       	rjmp	.+166    	; 0x2074 <encode_field+0x2ea>
    1fce:	d6 01       	movw	r26, r12
    1fd0:	14 96       	adiw	r26, 0x04	; 4
    1fd2:	8c 91       	ld	r24, X
    1fd4:	a8 0e       	add	r10, r24
    1fd6:	b1 1c       	adc	r11, r1
    1fd8:	0f 5f       	subi	r16, 0xFF	; 255
    1fda:	1f 4f       	sbci	r17, 0xFF	; 255
    1fdc:	06 15       	cp	r16, r6
    1fde:	17 05       	cpc	r17, r7
    1fe0:	d0 f2       	brcs	.-76     	; 0x1f96 <encode_field+0x20c>
    1fe2:	46 c0       	rjmp	.+140    	; 0x2070 <encode_field+0x2e6>
    1fe4:	a5 01       	movw	r20, r10
    1fe6:	ec cf       	rjmp	.-40     	; 0x1fc0 <encode_field+0x236>
    1fe8:	90 81       	ld	r25, Z
    1fea:	d6 01       	movw	r26, r12
    1fec:	8c 91       	ld	r24, X
    1fee:	98 13       	cpse	r25, r24
    1ff0:	3f c0       	rjmp	.+126    	; 0x2070 <encode_field+0x2e6>
    1ff2:	b6 01       	movw	r22, r12
    1ff4:	c7 01       	movw	r24, r14
    1ff6:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <pb_encode_tag_for_field>
    1ffa:	88 23       	and	r24, r24
    1ffc:	d9 f1       	breq	.+118    	; 0x2074 <encode_field+0x2ea>
    1ffe:	a5 01       	movw	r20, r10
    2000:	b6 01       	movw	r22, r12
    2002:	c7 01       	movw	r24, r14
    2004:	f2 01       	movw	r30, r4
    2006:	09 95       	icall
    2008:	36 c0       	rjmp	.+108    	; 0x2076 <encode_field+0x2ec>
    200a:	d7 01       	movw	r26, r14
    200c:	18 96       	adiw	r26, 0x08	; 8
    200e:	8d 91       	ld	r24, X+
    2010:	9c 91       	ld	r25, X
    2012:	19 97       	sbiw	r26, 0x09	; 9
    2014:	00 97       	sbiw	r24, 0x00	; 0
    2016:	11 f4       	brne	.+4      	; 0x201c <encode_field+0x292>
    2018:	89 e1       	ldi	r24, 0x19	; 25
    201a:	92 e0       	ldi	r25, 0x02	; 2
    201c:	f7 01       	movw	r30, r14
    201e:	91 87       	std	Z+9, r25	; 0x09
    2020:	80 87       	std	Z+8, r24	; 0x08
    2022:	28 c0       	rjmp	.+80     	; 0x2074 <encode_field+0x2ea>
    2024:	4e 5f       	subi	r20, 0xFE	; 254
    2026:	5f 4f       	sbci	r21, 0xFF	; 255
    2028:	d5 01       	movw	r26, r10
    202a:	ed 91       	ld	r30, X+
    202c:	fc 91       	ld	r31, X
    202e:	30 97       	sbiw	r30, 0x00	; 0
    2030:	f9 f0       	breq	.+62     	; 0x2070 <encode_field+0x2e6>
    2032:	c7 01       	movw	r24, r14
    2034:	09 95       	icall
    2036:	81 11       	cpse	r24, r1
    2038:	1b c0       	rjmp	.+54     	; 0x2070 <encode_field+0x2e6>
    203a:	f7 01       	movw	r30, r14
    203c:	20 85       	ldd	r18, Z+8	; 0x08
    203e:	31 85       	ldd	r19, Z+9	; 0x09
    2040:	21 15       	cp	r18, r1
    2042:	31 05       	cpc	r19, r1
    2044:	11 f4       	brne	.+4      	; 0x204a <encode_field+0x2c0>
    2046:	2b e5       	ldi	r18, 0x5B	; 91
    2048:	32 e0       	ldi	r19, 0x02	; 2
    204a:	d7 01       	movw	r26, r14
    204c:	19 96       	adiw	r26, 0x09	; 9
    204e:	3c 93       	st	X, r19
    2050:	2e 93       	st	-X, r18
    2052:	18 97       	sbiw	r26, 0x08	; 8
    2054:	10 c0       	rjmp	.+32     	; 0x2076 <encode_field+0x2ec>
    2056:	f7 01       	movw	r30, r14
    2058:	80 85       	ldd	r24, Z+8	; 0x08
    205a:	91 85       	ldd	r25, Z+9	; 0x09
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	11 f4       	brne	.+4      	; 0x2064 <encode_field+0x2da>
    2060:	89 e1       	ldi	r24, 0x19	; 25
    2062:	92 e0       	ldi	r25, 0x02	; 2
    2064:	d7 01       	movw	r26, r14
    2066:	19 96       	adiw	r26, 0x09	; 9
    2068:	9c 93       	st	X, r25
    206a:	8e 93       	st	-X, r24
    206c:	18 97       	sbiw	r26, 0x08	; 8
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <encode_field+0x2ea>
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	01 c0       	rjmp	.+2      	; 0x2076 <encode_field+0x2ec>
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	2b 96       	adiw	r28, 0x0b	; 11
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	f8 94       	cli
    207c:	de bf       	out	0x3e, r29	; 62
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	cd bf       	out	0x3d, r28	; 61
    2082:	df 91       	pop	r29
    2084:	cf 91       	pop	r28
    2086:	1f 91       	pop	r17
    2088:	0f 91       	pop	r16
    208a:	ff 90       	pop	r15
    208c:	ef 90       	pop	r14
    208e:	df 90       	pop	r13
    2090:	cf 90       	pop	r12
    2092:	bf 90       	pop	r11
    2094:	af 90       	pop	r10
    2096:	9f 90       	pop	r9
    2098:	8f 90       	pop	r8
    209a:	7f 90       	pop	r7
    209c:	6f 90       	pop	r6
    209e:	5f 90       	pop	r5
    20a0:	4f 90       	pop	r4
    20a2:	3f 90       	pop	r3
    20a4:	2f 90       	pop	r2
    20a6:	08 95       	ret

000020a8 <pb_encode>:
    20a8:	ef 92       	push	r14
    20aa:	ff 92       	push	r15
    20ac:	0f 93       	push	r16
    20ae:	1f 93       	push	r17
    20b0:	cf 93       	push	r28
    20b2:	df 93       	push	r29
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	2c 97       	sbiw	r28, 0x0c	; 12
    20ba:	0f b6       	in	r0, 0x3f	; 63
    20bc:	f8 94       	cli
    20be:	de bf       	out	0x3e, r29	; 62
    20c0:	0f be       	out	0x3f, r0	; 63
    20c2:	cd bf       	out	0x3d, r28	; 61
    20c4:	7c 01       	movw	r14, r24
    20c6:	ce 01       	movw	r24, r28
    20c8:	01 96       	adiw	r24, 0x01	; 1
    20ca:	0e 94 cf 21 	call	0x439e	; 0x439e <pb_field_iter_begin>
    20ce:	81 11       	cpse	r24, r1
    20d0:	02 c0       	rjmp	.+4      	; 0x20d6 <pb_encode+0x2e>
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	41 c0       	rjmp	.+130    	; 0x2158 <pb_encode+0xb0>
    20d6:	6b 81       	ldd	r22, Y+3	; 0x03
    20d8:	7c 81       	ldd	r23, Y+4	; 0x04
    20da:	fb 01       	movw	r30, r22
    20dc:	81 81       	ldd	r24, Z+1	; 0x01
    20de:	8f 70       	andi	r24, 0x0F	; 15
    20e0:	49 85       	ldd	r20, Y+9	; 0x09
    20e2:	5a 85       	ldd	r21, Y+10	; 0x0a
    20e4:	88 30       	cpi	r24, 0x08	; 8
    20e6:	71 f5       	brne	.+92     	; 0x2144 <pb_encode+0x9c>
    20e8:	fa 01       	movw	r30, r20
    20ea:	00 81       	ld	r16, Z
    20ec:	11 81       	ldd	r17, Z+1	; 0x01
    20ee:	01 15       	cp	r16, r1
    20f0:	11 05       	cpc	r17, r1
    20f2:	69 f1       	breq	.+90     	; 0x214e <pb_encode+0xa6>
    20f4:	f8 01       	movw	r30, r16
    20f6:	a0 81       	ld	r26, Z
    20f8:	b1 81       	ldd	r27, Z+1	; 0x01
    20fa:	12 96       	adiw	r26, 0x02	; 2
    20fc:	ed 91       	ld	r30, X+
    20fe:	fc 91       	ld	r31, X
    2100:	13 97       	sbiw	r26, 0x03	; 3
    2102:	30 97       	sbiw	r30, 0x00	; 0
    2104:	21 f0       	breq	.+8      	; 0x210e <pb_encode+0x66>
    2106:	b8 01       	movw	r22, r16
    2108:	c7 01       	movw	r24, r14
    210a:	09 95       	icall
    210c:	13 c0       	rjmp	.+38     	; 0x2134 <pb_encode+0x8c>
    210e:	14 96       	adiw	r26, 0x04	; 4
    2110:	6d 91       	ld	r22, X+
    2112:	7c 91       	ld	r23, X
    2114:	15 97       	sbiw	r26, 0x05	; 5
    2116:	fb 01       	movw	r30, r22
    2118:	81 81       	ldd	r24, Z+1	; 0x01
    211a:	80 7c       	andi	r24, 0xC0	; 192
    211c:	80 38       	cpi	r24, 0x80	; 128
    211e:	21 f4       	brne	.+8      	; 0x2128 <pb_encode+0x80>
    2120:	a8 01       	movw	r20, r16
    2122:	4e 5f       	subi	r20, 0xFE	; 254
    2124:	5f 4f       	sbci	r21, 0xFF	; 255
    2126:	03 c0       	rjmp	.+6      	; 0x212e <pb_encode+0x86>
    2128:	f8 01       	movw	r30, r16
    212a:	42 81       	ldd	r20, Z+2	; 0x02
    212c:	53 81       	ldd	r21, Z+3	; 0x03
    212e:	c7 01       	movw	r24, r14
    2130:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <encode_field>
    2134:	81 11       	cpse	r24, r1
    2136:	02 c0       	rjmp	.+4      	; 0x213c <pb_encode+0x94>
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	0e c0       	rjmp	.+28     	; 0x2158 <pb_encode+0xb0>
    213c:	f8 01       	movw	r30, r16
    213e:	04 81       	ldd	r16, Z+4	; 0x04
    2140:	15 81       	ldd	r17, Z+5	; 0x05
    2142:	d5 cf       	rjmp	.-86     	; 0x20ee <pb_encode+0x46>
    2144:	c7 01       	movw	r24, r14
    2146:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <encode_field>
    214a:	88 23       	and	r24, r24
    214c:	a9 f3       	breq	.-22     	; 0x2138 <pb_encode+0x90>
    214e:	ce 01       	movw	r24, r28
    2150:	01 96       	adiw	r24, 0x01	; 1
    2152:	0e 94 ef 21 	call	0x43de	; 0x43de <pb_field_iter_next>
    2156:	bb cf       	rjmp	.-138    	; 0x20ce <pb_encode+0x26>
    2158:	2c 96       	adiw	r28, 0x0c	; 12
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	cd bf       	out	0x3d, r28	; 61
    2164:	df 91       	pop	r29
    2166:	cf 91       	pop	r28
    2168:	1f 91       	pop	r17
    216a:	0f 91       	pop	r16
    216c:	ff 90       	pop	r15
    216e:	ef 90       	pop	r14
    2170:	08 95       	ret

00002172 <pb_encode_string>:
    
    return pb_encode_tag(stream, wiretype, field->tag);
}

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
    2172:	cf 92       	push	r12
    2174:	df 92       	push	r13
    2176:	ef 92       	push	r14
    2178:	ff 92       	push	r15
    217a:	0f 93       	push	r16
    217c:	1f 93       	push	r17
    217e:	cf 93       	push	r28
    2180:	df 93       	push	r29
    2182:	ec 01       	movw	r28, r24
    2184:	6b 01       	movw	r12, r22
    2186:	7a 01       	movw	r14, r20
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    2188:	8a 01       	movw	r16, r20
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	40 e0       	ldi	r20, 0x00	; 0
    2190:	50 e0       	ldi	r21, 0x00	; 0
    2192:	60 e0       	ldi	r22, 0x00	; 0
    2194:	70 e0       	ldi	r23, 0x00	; 0
    2196:	0e 94 0f 0c 	call	0x181e	; 0x181e <pb_encode_varint>
    219a:	88 23       	and	r24, r24
    219c:	69 f0       	breq	.+26     	; 0x21b8 <pb_encode_string+0x46>
        return false;
    
    return pb_write(stream, buffer, size);
    219e:	a7 01       	movw	r20, r14
    21a0:	b6 01       	movw	r22, r12
    21a2:	ce 01       	movw	r24, r28
}
    21a4:	df 91       	pop	r29
    21a6:	cf 91       	pop	r28
    21a8:	1f 91       	pop	r17
    21aa:	0f 91       	pop	r16
    21ac:	ff 90       	pop	r15
    21ae:	ef 90       	pop	r14
    21b0:	df 90       	pop	r13
    21b2:	cf 90       	pop	r12
bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
        return false;
    
    return pb_write(stream, buffer, size);
    21b4:	0c 94 d8 0b 	jmp	0x17b0	; 0x17b0 <pb_write>
}
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	df 91       	pop	r29
    21bc:	cf 91       	pop	r28
    21be:	1f 91       	pop	r17
    21c0:	0f 91       	pop	r16
    21c2:	ff 90       	pop	r15
    21c4:	ef 90       	pop	r14
    21c6:	df 90       	pop	r13
    21c8:	cf 90       	pop	r12
    21ca:	08 95       	ret

000021cc <pb_enc_fixed_length_bytes>:
    
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    21cc:	9a 01       	movw	r18, r20
    return pb_encode_string(stream, (const pb_byte_t*)src, field->data_size);
    21ce:	fb 01       	movw	r30, r22
    21d0:	44 81       	ldd	r20, Z+4	; 0x04
    21d2:	50 e0       	ldi	r21, 0x00	; 0
    21d4:	b9 01       	movw	r22, r18
    21d6:	0c 94 b9 10 	jmp	0x2172	; 0x2172 <pb_encode_string>

000021da <pb_enc_string>:
    
    return pb_encode_string(stream, bytes->bytes, bytes->size);
}

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    21da:	dc 01       	movw	r26, r24
    21dc:	fb 01       	movw	r30, r22
    21de:	ba 01       	movw	r22, r20
    size_t size = 0;
    size_t max_size = field->data_size;
    21e0:	44 81       	ldd	r20, Z+4	; 0x04
    const char *p = (const char*)src;
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    21e2:	91 81       	ldd	r25, Z+1	; 0x01
    21e4:	90 7c       	andi	r25, 0xC0	; 192
    21e6:	90 38       	cpi	r25, 0x80	; 128
    21e8:	11 f0       	breq	.+4      	; 0x21ee <pb_enc_string+0x14>
}

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    size_t size = 0;
    size_t max_size = field->data_size;
    21ea:	50 e0       	ldi	r21, 0x00	; 0
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <pb_enc_string+0x18>
    const char *p = (const char*)src;
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
        max_size = (size_t)-1;
    21ee:	4f ef       	ldi	r20, 0xFF	; 255
    21f0:	5f ef       	ldi	r21, 0xFF	; 255

    if (src == NULL)
    21f2:	61 15       	cp	r22, r1
    21f4:	71 05       	cpc	r23, r1
    21f6:	71 f0       	breq	.+28     	; 0x2214 <pb_enc_string+0x3a>
    21f8:	fb 01       	movw	r30, r22
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
        size = 0; /* Treat null pointer as an empty string */
    }
    else
    {
        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
    21fe:	24 17       	cp	r18, r20
    2200:	35 07       	cpc	r19, r21
    2202:	51 f0       	breq	.+20     	; 0x2218 <pb_enc_string+0x3e>
    2204:	81 91       	ld	r24, Z+
    2206:	88 23       	and	r24, r24
    2208:	19 f0       	breq	.+6      	; 0x2210 <pb_enc_string+0x36>
        {
            size++;
    220a:	2f 5f       	subi	r18, 0xFF	; 255
    220c:	3f 4f       	sbci	r19, 0xFF	; 255
    220e:	f7 cf       	rjmp	.-18     	; 0x21fe <pb_enc_string+0x24>
    2210:	a9 01       	movw	r20, r18
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <pb_enc_string+0x3e>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
        max_size = (size_t)-1;

    if (src == NULL)
    {
        size = 0; /* Treat null pointer as an empty string */
    2214:	40 e0       	ldi	r20, 0x00	; 0
    2216:	50 e0       	ldi	r21, 0x00	; 0
            size++;
            p++;
        }
    }

    return pb_encode_string(stream, (const pb_byte_t*)src, size);
    2218:	cd 01       	movw	r24, r26
    221a:	0c 94 b9 10 	jmp	0x2172	; 0x2172 <pb_encode_string>

0000221e <pb_enc_bytes>:
    PB_UNUSED(field);
    return pb_encode_fixed32(stream, src);
}

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    221e:	cf 93       	push	r28
    2220:	df 93       	push	r29
    2222:	fa 01       	movw	r30, r20
    const pb_bytes_array_t *bytes = NULL;

    bytes = (const pb_bytes_array_t*)src;
    
    if (src == NULL)
    2224:	30 97       	sbiw	r30, 0x00	; 0
    2226:	29 f4       	brne	.+10     	; 0x2232 <pb_enc_bytes+0x14>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
    2228:	40 e0       	ldi	r20, 0x00	; 0
    222a:	50 e0       	ldi	r21, 0x00	; 0
    222c:	60 e0       	ldi	r22, 0x00	; 0
    222e:	70 e0       	ldi	r23, 0x00	; 0
    2230:	1d c0       	rjmp	.+58     	; 0x226c <pb_enc_bytes+0x4e>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    2232:	db 01       	movw	r26, r22
    2234:	11 96       	adiw	r26, 0x01	; 1
    2236:	2c 91       	ld	r18, X
    2238:	20 7c       	andi	r18, 0xC0	; 192
    223a:	40 81       	ld	r20, Z
    223c:	21 11       	cpse	r18, r1
    223e:	12 c0       	rjmp	.+36     	; 0x2264 <pb_enc_bytes+0x46>
    2240:	a4 2f       	mov	r26, r20
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	11 96       	adiw	r26, 0x01	; 1
    2246:	eb 01       	movw	r28, r22
    2248:	2c 81       	ldd	r18, Y+4	; 0x04
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	2a 17       	cp	r18, r26
    224e:	3b 07       	cpc	r19, r27
    2250:	48 f4       	brcc	.+18     	; 0x2264 <pb_enc_bytes+0x46>
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
    2252:	fc 01       	movw	r30, r24
    2254:	20 85       	ldd	r18, Z+8	; 0x08
    2256:	31 85       	ldd	r19, Z+9	; 0x09
    2258:	21 15       	cp	r18, r1
    225a:	31 05       	cpc	r19, r1
    225c:	59 f4       	brne	.+22     	; 0x2274 <pb_enc_bytes+0x56>
    225e:	2a e6       	ldi	r18, 0x6A	; 106
    2260:	32 e0       	ldi	r19, 0x02	; 2
    2262:	08 c0       	rjmp	.+16     	; 0x2274 <pb_enc_bytes+0x56>
    }
    
    return pb_encode_string(stream, bytes->bytes, bytes->size);
    2264:	50 e0       	ldi	r21, 0x00	; 0
    2266:	bf 01       	movw	r22, r30
    2268:	6f 5f       	subi	r22, 0xFF	; 255
    226a:	7f 4f       	sbci	r23, 0xFF	; 255
}
    226c:	df 91       	pop	r29
    226e:	cf 91       	pop	r28
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
    }
    
    return pb_encode_string(stream, bytes->bytes, bytes->size);
    2270:	0c 94 b9 10 	jmp	0x2172	; 0x2172 <pb_encode_string>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
    2274:	dc 01       	movw	r26, r24
    2276:	19 96       	adiw	r26, 0x09	; 9
    2278:	3c 93       	st	X, r19
    227a:	2e 93       	st	-X, r18
    227c:	18 97       	sbiw	r26, 0x08	; 8
    }
    
    return pb_encode_string(stream, bytes->bytes, bytes->size);
}
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	df 91       	pop	r29
    2282:	cf 91       	pop	r28
    2284:	08 95       	ret

00002286 <pb_encode_submessage>:
    
    return pb_write(stream, buffer, size);
}

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_field_t fields[], const void *src_struct)
{
    2286:	6f 92       	push	r6
    2288:	7f 92       	push	r7
    228a:	8f 92       	push	r8
    228c:	9f 92       	push	r9
    228e:	af 92       	push	r10
    2290:	bf 92       	push	r11
    2292:	cf 92       	push	r12
    2294:	df 92       	push	r13
    2296:	ef 92       	push	r14
    2298:	ff 92       	push	r15
    229a:	0f 93       	push	r16
    229c:	1f 93       	push	r17
    229e:	cf 93       	push	r28
    22a0:	df 93       	push	r29
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
    22a6:	2a 97       	sbiw	r28, 0x0a	; 10
    22a8:	0f b6       	in	r0, 0x3f	; 63
    22aa:	f8 94       	cli
    22ac:	de bf       	out	0x3e, r29	; 62
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	cd bf       	out	0x3d, r28	; 61
    22b2:	7c 01       	movw	r14, r24
    22b4:	4b 01       	movw	r8, r22
    22b6:	3a 01       	movw	r6, r20
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    22b8:	ce 01       	movw	r24, r28
    22ba:	01 96       	adiw	r24, 0x01	; 1
    22bc:	5c 01       	movw	r10, r24
    22be:	8a e0       	ldi	r24, 0x0A	; 10
    22c0:	f5 01       	movw	r30, r10
    22c2:	11 92       	st	Z+, r1
    22c4:	8a 95       	dec	r24
    22c6:	e9 f7       	brne	.-6      	; 0x22c2 <pb_encode_submessage+0x3c>
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
    22c8:	c5 01       	movw	r24, r10
    22ca:	0e 94 54 10 	call	0x20a8	; 0x20a8 <pb_encode>
    22ce:	81 11       	cpse	r24, r1
    22d0:	04 c0       	rjmp	.+8      	; 0x22da <pb_encode_submessage+0x54>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
    22d2:	29 85       	ldd	r18, Y+9	; 0x09
    22d4:	3a 85       	ldd	r19, Y+10	; 0x0a
    22d6:	f7 01       	movw	r30, r14
    22d8:	54 c0       	rjmp	.+168    	; 0x2382 <pb_encode_submessage+0xfc>
#endif
        return false;
    }
    
    size = substream.bytes_written;
    22da:	cf 80       	ldd	r12, Y+7	; 0x07
    22dc:	d8 84       	ldd	r13, Y+8	; 0x08
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    22de:	86 01       	movw	r16, r12
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	40 e0       	ldi	r20, 0x00	; 0
    22e6:	50 e0       	ldi	r21, 0x00	; 0
    22e8:	60 e0       	ldi	r22, 0x00	; 0
    22ea:	70 e0       	ldi	r23, 0x00	; 0
    22ec:	c7 01       	movw	r24, r14
    22ee:	0e 94 0f 0c 	call	0x181e	; 0x181e <pb_encode_varint>
    22f2:	88 23       	and	r24, r24
    22f4:	09 f4       	brne	.+2      	; 0x22f8 <pb_encode_submessage+0x72>
    22f6:	51 c0       	rjmp	.+162    	; 0x239a <pb_encode_submessage+0x114>
        return false;
    
    if (stream->callback == NULL)
    22f8:	f7 01       	movw	r30, r14
    22fa:	20 81       	ld	r18, Z
    22fc:	31 81       	ldd	r19, Z+1	; 0x01
    22fe:	21 15       	cp	r18, r1
    2300:	31 05       	cpc	r19, r1
    2302:	39 f4       	brne	.+14     	; 0x2312 <pb_encode_submessage+0x8c>
        return pb_write(stream, NULL, size); /* Just sizing */
    2304:	a6 01       	movw	r20, r12
    2306:	60 e0       	ldi	r22, 0x00	; 0
    2308:	70 e0       	ldi	r23, 0x00	; 0
    230a:	c7 01       	movw	r24, r14
    230c:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <pb_write>
    2310:	44 c0       	rjmp	.+136    	; 0x239a <pb_encode_submessage+0x114>
    
    if (stream->bytes_written + size > stream->max_size)
    2312:	f7 01       	movw	r30, r14
    2314:	86 81       	ldd	r24, Z+6	; 0x06
    2316:	97 81       	ldd	r25, Z+7	; 0x07
    2318:	8c 0d       	add	r24, r12
    231a:	9d 1d       	adc	r25, r13
    231c:	44 81       	ldd	r20, Z+4	; 0x04
    231e:	55 81       	ldd	r21, Z+5	; 0x05
    2320:	48 17       	cp	r20, r24
    2322:	59 07       	cpc	r21, r25
    2324:	50 f4       	brcc	.+20     	; 0x233a <pb_encode_submessage+0xb4>
        PB_RETURN_ERROR(stream, "stream full");
    2326:	80 85       	ldd	r24, Z+8	; 0x08
    2328:	91 85       	ldd	r25, Z+9	; 0x09
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	11 f4       	brne	.+4      	; 0x2332 <pb_encode_submessage+0xac>
    232e:	82 ef       	ldi	r24, 0xF2	; 242
    2330:	91 e0       	ldi	r25, 0x01	; 1
    2332:	f7 01       	movw	r30, r14
    2334:	91 87       	std	Z+9, r25	; 0x09
    2336:	80 87       	std	Z+8, r24	; 0x08
    2338:	2f c0       	rjmp	.+94     	; 0x2398 <pb_encode_submessage+0x112>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
    233a:	3a 83       	std	Y+2, r19	; 0x02
    233c:	29 83       	std	Y+1, r18	; 0x01
    substream.state = stream->state;
    233e:	f7 01       	movw	r30, r14
    2340:	82 81       	ldd	r24, Z+2	; 0x02
    2342:	93 81       	ldd	r25, Z+3	; 0x03
    2344:	9c 83       	std	Y+4, r25	; 0x04
    2346:	8b 83       	std	Y+3, r24	; 0x03
    substream.max_size = size;
    2348:	de 82       	std	Y+6, r13	; 0x06
    234a:	cd 82       	std	Y+5, r12	; 0x05
    substream.bytes_written = 0;
    234c:	18 86       	std	Y+8, r1	; 0x08
    234e:	1f 82       	std	Y+7, r1	; 0x07
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
    2350:	1a 86       	std	Y+10, r1	; 0x0a
    2352:	19 86       	std	Y+9, r1	; 0x09
#endif
    
    status = pb_encode(&substream, fields, src_struct);
    2354:	a3 01       	movw	r20, r6
    2356:	b4 01       	movw	r22, r8
    2358:	c5 01       	movw	r24, r10
    235a:	0e 94 54 10 	call	0x20a8	; 0x20a8 <pb_encode>
    
    stream->bytes_written += substream.bytes_written;
    235e:	4f 81       	ldd	r20, Y+7	; 0x07
    2360:	58 85       	ldd	r21, Y+8	; 0x08
    2362:	f7 01       	movw	r30, r14
    2364:	26 81       	ldd	r18, Z+6	; 0x06
    2366:	37 81       	ldd	r19, Z+7	; 0x07
    2368:	24 0f       	add	r18, r20
    236a:	35 1f       	adc	r19, r21
    236c:	37 83       	std	Z+7, r19	; 0x07
    236e:	26 83       	std	Z+6, r18	; 0x06
    stream->state = substream.state;
    2370:	2b 81       	ldd	r18, Y+3	; 0x03
    2372:	3c 81       	ldd	r19, Y+4	; 0x04
    2374:	33 83       	std	Z+3, r19	; 0x03
    2376:	22 83       	std	Z+2, r18	; 0x02
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
    2378:	29 85       	ldd	r18, Y+9	; 0x09
    237a:	3a 85       	ldd	r19, Y+10	; 0x0a
#endif
    
    if (substream.bytes_written != size)
    237c:	c4 16       	cp	r12, r20
    237e:	d5 06       	cpc	r13, r21
    2380:	19 f4       	brne	.+6      	; 0x2388 <pb_encode_submessage+0x102>
    status = pb_encode(&substream, fields, src_struct);
    
    stream->bytes_written += substream.bytes_written;
    stream->state = substream.state;
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
    2382:	31 87       	std	Z+9, r19	; 0x09
    2384:	20 87       	std	Z+8, r18	; 0x08
    2386:	09 c0       	rjmp	.+18     	; 0x239a <pb_encode_submessage+0x114>
#endif
    
    if (substream.bytes_written != size)
        PB_RETURN_ERROR(stream, "submsg size changed");
    2388:	21 15       	cp	r18, r1
    238a:	31 05       	cpc	r19, r1
    238c:	11 f4       	brne	.+4      	; 0x2392 <pb_encode_submessage+0x10c>
    238e:	2e e7       	ldi	r18, 0x7E	; 126
    2390:	32 e0       	ldi	r19, 0x02	; 2
    2392:	f7 01       	movw	r30, r14
    2394:	31 87       	std	Z+9, r19	; 0x09
    2396:	20 87       	std	Z+8, r18	; 0x08
    2398:	80 e0       	ldi	r24, 0x00	; 0
    
    return status;
}
    239a:	2a 96       	adiw	r28, 0x0a	; 10
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	f8 94       	cli
    23a0:	de bf       	out	0x3e, r29	; 62
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	cd bf       	out	0x3d, r28	; 61
    23a6:	df 91       	pop	r29
    23a8:	cf 91       	pop	r28
    23aa:	1f 91       	pop	r17
    23ac:	0f 91       	pop	r16
    23ae:	ff 90       	pop	r15
    23b0:	ef 90       	pop	r14
    23b2:	df 90       	pop	r13
    23b4:	cf 90       	pop	r12
    23b6:	bf 90       	pop	r11
    23b8:	af 90       	pop	r10
    23ba:	9f 90       	pop	r9
    23bc:	8f 90       	pop	r8
    23be:	7f 90       	pop	r7
    23c0:	6f 90       	pop	r6
    23c2:	08 95       	ret

000023c4 <pb_enc_submessage>:
    return pb_encode_string(stream, (const pb_byte_t*)src, size);
}

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    if (field->ptr == NULL)
    23c4:	fb 01       	movw	r30, r22
    23c6:	66 81       	ldd	r22, Z+6	; 0x06
    23c8:	77 81       	ldd	r23, Z+7	; 0x07
    23ca:	61 15       	cp	r22, r1
    23cc:	71 05       	cpc	r23, r1
    23ce:	49 f4       	brne	.+18     	; 0x23e2 <pb_enc_submessage+0x1e>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
    23d0:	fc 01       	movw	r30, r24
    23d2:	20 85       	ldd	r18, Z+8	; 0x08
    23d4:	31 85       	ldd	r19, Z+9	; 0x09
    23d6:	21 15       	cp	r18, r1
    23d8:	31 05       	cpc	r19, r1
    23da:	29 f4       	brne	.+10     	; 0x23e6 <pb_enc_submessage+0x22>
    23dc:	22 e9       	ldi	r18, 0x92	; 146
    23de:	32 e0       	ldi	r19, 0x02	; 2
    23e0:	02 c0       	rjmp	.+4      	; 0x23e6 <pb_enc_submessage+0x22>
    
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
    23e2:	0c 94 43 11 	jmp	0x2286	; 0x2286 <pb_encode_submessage>
}

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    if (field->ptr == NULL)
        PB_RETURN_ERROR(stream, "invalid field descriptor");
    23e6:	fc 01       	movw	r30, r24
    23e8:	31 87       	std	Z+9, r19	; 0x09
    23ea:	20 87       	std	Z+8, r18	; 0x08
    
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
}
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	08 95       	ret

000023f0 <pb_encode_delimited>:
    return true;
}

bool pb_encode_delimited(pb_ostream_t *stream, const pb_field_t fields[], const void *src_struct)
{
    return pb_encode_submessage(stream, fields, src_struct);
    23f0:	0c 94 43 11 	jmp	0x2286	; 0x2286 <pb_encode_submessage>

000023f4 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    23f4:	cf 93       	push	r28
  uint8_t sreg = SREG;
    23f6:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    23f8:	f8 94       	cli
  if (!initialized) {
    23fa:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <_ZN8SPIClass11initializedE>
    23fe:	81 11       	cpse	r24, r1
    2400:	27 c0       	rjmp	.+78     	; 0x2450 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    2402:	ee ea       	ldi	r30, 0xAE	; 174
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    2408:	ea e9       	ldi	r30, 0x9A	; 154
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    240e:	e8 2f       	mov	r30, r24
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	ee 0f       	add	r30, r30
    2414:	ff 1f       	adc	r31, r31
    2416:	ee 53       	subi	r30, 0x3E	; 62
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	a5 91       	lpm	r26, Z+
    241c:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    241e:	ec 91       	ld	r30, X
    2420:	e9 23       	and	r30, r25
    2422:	21 f4       	brne	.+8      	; 0x242c <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    2424:	61 e0       	ldi	r22, 0x01	; 1
    2426:	8a e0       	ldi	r24, 0x0A	; 10
    2428:	0e 94 29 0a 	call	0x1452	; 0x1452 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    242c:	61 e0       	ldi	r22, 0x01	; 1
    242e:	8a e0       	ldi	r24, 0x0A	; 10
    2430:	0e 94 ed 09 	call	0x13da	; 0x13da <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    2434:	8c b5       	in	r24, 0x2c	; 44
    2436:	80 61       	ori	r24, 0x10	; 16
    2438:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    243a:	8c b5       	in	r24, 0x2c	; 44
    243c:	80 64       	ori	r24, 0x40	; 64
    243e:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    2440:	61 e0       	ldi	r22, 0x01	; 1
    2442:	8d e0       	ldi	r24, 0x0D	; 13
    2444:	0e 94 ed 09 	call	0x13da	; 0x13da <pinMode>
    pinMode(MOSI, OUTPUT);
    2448:	61 e0       	ldi	r22, 0x01	; 1
    244a:	8b e0       	ldi	r24, 0x0B	; 11
    244c:	0e 94 ed 09 	call	0x13da	; 0x13da <pinMode>
  }
  initialized++; // reference count
    2450:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <_ZN8SPIClass11initializedE>
    2454:	8f 5f       	subi	r24, 0xFF	; 255
    2456:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    245a:	cf bf       	out	0x3f, r28	; 63
}
    245c:	cf 91       	pop	r28
    245e:	08 95       	ret

00002460 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "hidboot.h"

void MouseReportParser::Parse(USBHID *hid __attribute__((unused)), bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
    2460:	0f 93       	push	r16
    2462:	1f 93       	push	r17
    2464:	cf 93       	push	r28
    2466:	df 93       	push	r29
    2468:	ec 01       	movw	r28, r24
        // sketch could already have noted these facts to support drag/drop scroll wheel stuff, etc.
        //

        // Why do we need to pass the structure for buttons?
        // The function call not enough of a hint for what is happening?
        if(prevState.mouseInfo.bmLeftButton != pmi->bmLeftButton ) {
    246a:	8a 81       	ldd	r24, Y+2	; 0x02
    246c:	81 70       	andi	r24, 0x01	; 1
    246e:	f8 01       	movw	r30, r16
    2470:	90 81       	ld	r25, Z
    2472:	29 2f       	mov	r18, r25
    2474:	21 70       	andi	r18, 0x01	; 1
    2476:	82 17       	cp	r24, r18
    2478:	71 f0       	breq	.+28     	; 0x2496 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x36>
    247a:	e8 81       	ld	r30, Y
    247c:	f9 81       	ldd	r31, Y+1	; 0x01
                if(pmi->bmLeftButton) {
    247e:	90 ff       	sbrs	r25, 0
    2480:	04 c0       	rjmp	.+8      	; 0x248a <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x2a>
                        OnLeftButtonDown(pmi);
    2482:	06 80       	ldd	r0, Z+6	; 0x06
    2484:	f7 81       	ldd	r31, Z+7	; 0x07
    2486:	e0 2d       	mov	r30, r0
    2488:	03 c0       	rjmp	.+6      	; 0x2490 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x30>
                } else {
                        OnLeftButtonUp(pmi);
    248a:	04 80       	ldd	r0, Z+4	; 0x04
    248c:	f5 81       	ldd	r31, Z+5	; 0x05
    248e:	e0 2d       	mov	r30, r0
    2490:	b8 01       	movw	r22, r16
    2492:	ce 01       	movw	r24, r28
    2494:	09 95       	icall
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmRightButton != pmi->bmRightButton) {
    2496:	8a 81       	ldd	r24, Y+2	; 0x02
    2498:	86 95       	lsr	r24
    249a:	81 70       	andi	r24, 0x01	; 1
    249c:	f8 01       	movw	r30, r16
    249e:	90 81       	ld	r25, Z
    24a0:	91 fb       	bst	r25, 1
    24a2:	22 27       	eor	r18, r18
    24a4:	20 f9       	bld	r18, 0
    24a6:	82 17       	cp	r24, r18
    24a8:	71 f0       	breq	.+28     	; 0x24c6 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x66>
    24aa:	e8 81       	ld	r30, Y
    24ac:	f9 81       	ldd	r31, Y+1	; 0x01
                if(pmi->bmRightButton) {
    24ae:	91 ff       	sbrs	r25, 1
    24b0:	04 c0       	rjmp	.+8      	; 0x24ba <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x5a>
                        OnRightButtonDown(pmi);
    24b2:	02 84       	ldd	r0, Z+10	; 0x0a
    24b4:	f3 85       	ldd	r31, Z+11	; 0x0b
    24b6:	e0 2d       	mov	r30, r0
    24b8:	03 c0       	rjmp	.+6      	; 0x24c0 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x60>
                } else {
                        OnRightButtonUp(pmi);
    24ba:	00 84       	ldd	r0, Z+8	; 0x08
    24bc:	f1 85       	ldd	r31, Z+9	; 0x09
    24be:	e0 2d       	mov	r30, r0
    24c0:	b8 01       	movw	r22, r16
    24c2:	ce 01       	movw	r24, r28
    24c4:	09 95       	icall
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmMiddleButton != pmi->bmMiddleButton) {
    24c6:	8a 81       	ldd	r24, Y+2	; 0x02
    24c8:	82 fb       	bst	r24, 2
    24ca:	88 27       	eor	r24, r24
    24cc:	80 f9       	bld	r24, 0
    24ce:	f8 01       	movw	r30, r16
    24d0:	90 81       	ld	r25, Z
    24d2:	92 fb       	bst	r25, 2
    24d4:	22 27       	eor	r18, r18
    24d6:	20 f9       	bld	r18, 0
    24d8:	82 17       	cp	r24, r18
    24da:	71 f0       	breq	.+28     	; 0x24f8 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x98>
    24dc:	e8 81       	ld	r30, Y
    24de:	f9 81       	ldd	r31, Y+1	; 0x01
                if(pmi->bmMiddleButton) {
    24e0:	92 ff       	sbrs	r25, 2
    24e2:	04 c0       	rjmp	.+8      	; 0x24ec <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x8c>
                        OnMiddleButtonDown(pmi);
    24e4:	06 84       	ldd	r0, Z+14	; 0x0e
    24e6:	f7 85       	ldd	r31, Z+15	; 0x0f
    24e8:	e0 2d       	mov	r30, r0
    24ea:	03 c0       	rjmp	.+6      	; 0x24f2 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x92>
                } else {
                        OnMiddleButtonUp(pmi);
    24ec:	04 84       	ldd	r0, Z+12	; 0x0c
    24ee:	f5 85       	ldd	r31, Z+13	; 0x0d
    24f0:	e0 2d       	mov	r30, r0
    24f2:	b8 01       	movw	r22, r16
    24f4:	ce 01       	movw	r24, r28
    24f6:	09 95       	icall
        //}
        //

        // Mice only report motion when they actually move!
        // Why not just pass the x/y values to simplify things??
        if(pmi->dX || pmi->dY) {
    24f8:	f8 01       	movw	r30, r16
    24fa:	81 81       	ldd	r24, Z+1	; 0x01
    24fc:	81 11       	cpse	r24, r1
    24fe:	03 c0       	rjmp	.+6      	; 0x2506 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa6>
    2500:	82 81       	ldd	r24, Z+2	; 0x02
    2502:	88 23       	and	r24, r24
    2504:	41 f0       	breq	.+16     	; 0x2516 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xb6>
                OnMouseMove(pmi);
    2506:	e8 81       	ld	r30, Y
    2508:	f9 81       	ldd	r31, Y+1	; 0x01
    250a:	02 80       	ldd	r0, Z+2	; 0x02
    250c:	f3 81       	ldd	r31, Z+3	; 0x03
    250e:	e0 2d       	mov	r30, r0
    2510:	b8 01       	movw	r22, r16
    2512:	ce 01       	movw	r24, r28
    2514:	09 95       	icall
        //
        // if(event) OnMouse();
        //

        // Only the first byte matters (buttons). We do NOT need to save position info.
        prevState.bInfo[0] = buf[0];
    2516:	f8 01       	movw	r30, r16
    2518:	80 81       	ld	r24, Z
    251a:	8a 83       	std	Y+2, r24	; 0x02
#endif

};
    251c:	df 91       	pop	r29
    251e:	cf 91       	pop	r28
    2520:	1f 91       	pop	r17
    2522:	0f 91       	pop	r16
    2524:	08 95       	ret

00002526 <_ZN20MultiByteValueParser5ParseEPPhPj>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
    2526:	cf 93       	push	r28
    2528:	df 93       	push	r29
    252a:	fc 01       	movw	r30, r24
    252c:	eb 01       	movw	r28, r22
        if(!pBuf) {
    252e:	80 81       	ld	r24, Z
    2530:	91 81       	ldd	r25, Z+1	; 0x01
    2532:	89 2b       	or	r24, r25
    2534:	21 f1       	breq	.+72     	; 0x257e <_ZN20MultiByteValueParser5ParseEPPhPj+0x58>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
    2536:	82 81       	ldd	r24, Z+2	; 0x02
    2538:	88 23       	and	r24, r24
    253a:	19 f1       	breq	.+70     	; 0x2582 <_ZN20MultiByteValueParser5ParseEPPhPj+0x5c>
    253c:	da 01       	movw	r26, r20
    253e:	2d 91       	ld	r18, X+
    2540:	3c 91       	ld	r19, X
    2542:	23 2b       	or	r18, r19
    2544:	e1 f0       	breq	.+56     	; 0x257e <_ZN20MultiByteValueParser5ParseEPPhPj+0x58>
                pBuf[valueSize - countDown] = (**pp);
    2546:	a8 81       	ld	r26, Y
    2548:	b9 81       	ldd	r27, Y+1	; 0x01
    254a:	9c 91       	ld	r25, X
    254c:	a3 81       	ldd	r26, Z+3	; 0x03
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	a8 1b       	sub	r26, r24
    2552:	b1 09       	sbc	r27, r1
    2554:	20 81       	ld	r18, Z
    2556:	31 81       	ldd	r19, Z+1	; 0x01
    2558:	a2 0f       	add	r26, r18
    255a:	b3 1f       	adc	r27, r19
    255c:	9c 93       	st	X, r25
bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
        if(!pBuf) {
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
    255e:	82 81       	ldd	r24, Z+2	; 0x02
    2560:	81 50       	subi	r24, 0x01	; 1
    2562:	82 83       	std	Z+2, r24	; 0x02
    2564:	da 01       	movw	r26, r20
    2566:	8d 91       	ld	r24, X+
    2568:	9c 91       	ld	r25, X
    256a:	11 97       	sbiw	r26, 0x01	; 1
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	8d 93       	st	X+, r24
    2570:	9c 93       	st	X, r25
    2572:	88 81       	ld	r24, Y
    2574:	99 81       	ldd	r25, Y+1	; 0x01
    2576:	01 96       	adiw	r24, 0x01	; 1
    2578:	99 83       	std	Y+1, r25	; 0x01
    257a:	88 83       	st	Y, r24
    257c:	dc cf       	rjmp	.-72     	; 0x2536 <_ZN20MultiByteValueParser5ParseEPPhPj+0x10>
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
        if(!pBuf) {
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	03 c0       	rjmp	.+6      	; 0x2588 <_ZN20MultiByteValueParser5ParseEPPhPj+0x62>
                pBuf[valueSize - countDown] = (**pp);

        if(countDown)
                return false;

        countDown = valueSize;
    2582:	83 81       	ldd	r24, Z+3	; 0x03
    2584:	82 83       	std	Z+2, r24	; 0x02
        return true;
    2586:	81 e0       	ldi	r24, 0x01	; 1
}
    2588:	df 91       	pop	r29
    258a:	cf 91       	pop	r28
    258c:	08 95       	ret

0000258e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:

//get string descriptor

uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
    258e:	cf 93       	push	r28
    2590:	df 93       	push	r29
    2592:	fc 01       	movw	r30, r24
    2594:	86 2f       	mov	r24, r22
    2596:	80 78       	andi	r24, 0x80	; 128
    2598:	a9 f4       	brne	.+42     	; 0x25c4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x36>
    259a:	28 30       	cpi	r18, 0x08	; 8
    259c:	08 f0       	brcs	.+2      	; 0x25a0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x12>
    259e:	4d c0       	rjmp	.+154    	; 0x263a <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
    25a0:	44 23       	and	r20, r20
    25a2:	21 f0       	breq	.+8      	; 0x25ac <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x1e>
    25a4:	95 81       	ldd	r25, Z+5	; 0x05
    25a6:	97 30       	cpi	r25, 0x07	; 7
    25a8:	09 f4       	brne	.+2      	; 0x25ac <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x1e>
    25aa:	47 c0       	rjmp	.+142    	; 0x263a <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
    25ac:	ef 01       	movw	r28, r30
    25ae:	a1 e0       	ldi	r26, 0x01	; 1
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    25b4:	99 23       	and	r25, r25
    25b6:	41 f0       	breq	.+16     	; 0x25c8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x3a>
    25b8:	11 96       	adiw	r26, 0x01	; 1
    25ba:	25 96       	adiw	r28, 0x05	; 5
    25bc:	a0 31       	cpi	r26, 0x10	; 16
    25be:	b1 05       	cpc	r27, r1
    25c0:	c1 f7       	brne	.-16     	; 0x25b2 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x24>
    25c2:	3b c0       	rjmp	.+118    	; 0x263a <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	39 c0       	rjmp	.+114    	; 0x263a <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
    25c8:	61 11       	cpse	r22, r1
    25ca:	1c c0       	rjmp	.+56     	; 0x2604 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x76>
    25cc:	85 e0       	ldi	r24, 0x05	; 5
    25ce:	8a 9f       	mul	r24, r26
    25d0:	e0 01       	movw	r28, r0
    25d2:	8b 9f       	mul	r24, r27
    25d4:	d0 0d       	add	r29, r0
    25d6:	11 24       	eor	r1, r1
    25d8:	ce 0f       	add	r28, r30
    25da:	df 1f       	adc	r29, r31
    25dc:	44 23       	and	r20, r20
    25de:	31 f0       	breq	.+12     	; 0x25ec <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5e>
    25e0:	81 e4       	ldi	r24, 0x41	; 65
    25e2:	88 87       	std	Y+8, r24	; 0x08
    25e4:	85 81       	ldd	r24, Z+5	; 0x05
    25e6:	8f 5f       	subi	r24, 0xFF	; 255
    25e8:	85 83       	std	Z+5, r24	; 0x05
    25ea:	02 c0       	rjmp	.+4      	; 0x25f0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x62>
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	88 87       	std	Y+8, r24	; 0x08
    25f0:	25 e0       	ldi	r18, 0x05	; 5
    25f2:	2a 9f       	mul	r18, r26
    25f4:	c0 01       	movw	r24, r0
    25f6:	2b 9f       	mul	r18, r27
    25f8:	90 0d       	add	r25, r0
    25fa:	11 24       	eor	r1, r1
    25fc:	e8 0f       	add	r30, r24
    25fe:	f9 1f       	adc	r31, r25
    2600:	80 85       	ldd	r24, Z+8	; 0x08
    2602:	1b c0       	rjmp	.+54     	; 0x263a <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
    2604:	67 70       	andi	r22, 0x07	; 7
    2606:	66 0f       	add	r22, r22
    2608:	66 0f       	add	r22, r22
    260a:	66 0f       	add	r22, r22
    260c:	44 23       	and	r20, r20
    260e:	41 f0       	breq	.+16     	; 0x2620 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x92>
    2610:	60 64       	ori	r22, 0x40	; 64
    2612:	85 81       	ldd	r24, Z+5	; 0x05
    2614:	8f 5f       	subi	r24, 0xFF	; 255
    2616:	85 83       	std	Z+5, r24	; 0x05
    2618:	87 70       	andi	r24, 0x07	; 7
    261a:	68 7f       	andi	r22, 0xF8	; 248
    261c:	68 2b       	or	r22, r24
    261e:	03 c0       	rjmp	.+6      	; 0x2626 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x98>
    2620:	27 70       	andi	r18, 0x07	; 7
    2622:	68 7b       	andi	r22, 0xB8	; 184
    2624:	62 2b       	or	r22, r18
    2626:	25 e0       	ldi	r18, 0x05	; 5
    2628:	2a 9f       	mul	r18, r26
    262a:	c0 01       	movw	r24, r0
    262c:	2b 9f       	mul	r18, r27
    262e:	90 0d       	add	r25, r0
    2630:	11 24       	eor	r1, r1
    2632:	e8 0f       	add	r30, r24
    2634:	f9 1f       	adc	r31, r25
    2636:	60 87       	std	Z+8, r22	; 0x08
    2638:	86 2f       	mov	r24, r22
    263a:	df 91       	pop	r29
    263c:	cf 91       	pop	r28
    263e:	08 95       	ret

00002640 <_ZN8SPIClass8transferEPvj.part.0>:
    2640:	fc 01       	movw	r30, r24
    2642:	20 81       	ld	r18, Z
    2644:	2e bd       	out	0x2e, r18	; 46
    2646:	9b 01       	movw	r18, r22
    2648:	21 50       	subi	r18, 0x01	; 1
    264a:	31 09       	sbc	r19, r1
    264c:	41 f0       	breq	.+16     	; 0x265e <_ZN8SPIClass8transferEPvj.part.0+0x1e>
    264e:	51 81       	ldd	r21, Z+1	; 0x01
    2650:	0d b4       	in	r0, 0x2d	; 45
    2652:	07 fe       	sbrs	r0, 7
    2654:	fd cf       	rjmp	.-6      	; 0x2650 <_ZN8SPIClass8transferEPvj.part.0+0x10>
    2656:	4e b5       	in	r20, 0x2e	; 46
    2658:	5e bd       	out	0x2e, r21	; 46
    265a:	41 93       	st	Z+, r20
    265c:	f5 cf       	rjmp	.-22     	; 0x2648 <_ZN8SPIClass8transferEPvj.part.0+0x8>
    265e:	61 50       	subi	r22, 0x01	; 1
    2660:	71 09       	sbc	r23, r1
    2662:	fc 01       	movw	r30, r24
    2664:	e6 0f       	add	r30, r22
    2666:	f7 1f       	adc	r31, r23
    2668:	0d b4       	in	r0, 0x2d	; 45
    266a:	07 fe       	sbrs	r0, 7
    266c:	fd cf       	rjmp	.-6      	; 0x2668 <_ZN8SPIClass8transferEPvj.part.0+0x28>
    266e:	8e b5       	in	r24, 0x2e	; 46
    2670:	80 83       	st	Z, r24
    2672:	08 95       	ret

00002674 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:
    2674:	61 11       	cpse	r22, r1
    2676:	02 c0       	rjmp	.+4      	; 0x267c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x8>
    2678:	06 96       	adiw	r24, 0x06	; 6
    267a:	08 95       	ret
    267c:	fc 01       	movw	r30, r24
    267e:	21 e0       	ldi	r18, 0x01	; 1
    2680:	35 85       	ldd	r19, Z+13	; 0x0d
    2682:	63 17       	cp	r22, r19
    2684:	39 f0       	breq	.+14     	; 0x2694 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x20>
    2686:	2f 5f       	subi	r18, 0xFF	; 255
    2688:	35 96       	adiw	r30, 0x05	; 5
    268a:	20 31       	cpi	r18, 0x10	; 16
    268c:	c9 f7       	brne	.-14     	; 0x2680 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0xc>
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	08 95       	ret
    2694:	06 96       	adiw	r24, 0x06	; 6
    2696:	35 e0       	ldi	r19, 0x05	; 5
    2698:	23 9f       	mul	r18, r19
    269a:	80 0d       	add	r24, r0
    269c:	91 1d       	adc	r25, r1
    269e:	11 24       	eor	r1, r1
    26a0:	08 95       	ret

000026a2 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh.part.10.constprop.13>:
    26a2:	df 92       	push	r13
    26a4:	ef 92       	push	r14
    26a6:	ff 92       	push	r15
    26a8:	0f 93       	push	r16
    26aa:	1f 93       	push	r17
    26ac:	cf 93       	push	r28
    26ae:	df 93       	push	r29
    26b0:	ec 01       	movw	r28, r24
    26b2:	e6 2e       	mov	r14, r22
    26b4:	f1 2c       	mov	r15, r1
    26b6:	85 e0       	ldi	r24, 0x05	; 5
    26b8:	68 9f       	mul	r22, r24
    26ba:	b0 01       	movw	r22, r0
    26bc:	11 24       	eor	r1, r1
    26be:	fe 01       	movw	r30, r28
    26c0:	e6 0f       	add	r30, r22
    26c2:	f7 1f       	adc	r31, r23
    26c4:	80 85       	ldd	r24, Z+8	; 0x08
    26c6:	18 2f       	mov	r17, r24
    26c8:	17 70       	andi	r17, 0x07	; 7
    26ca:	86 ff       	sbrs	r24, 6
    26cc:	17 c0       	rjmp	.+46     	; 0x26fc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh.part.10.constprop.13+0x5a>
    26ce:	01 e0       	ldi	r16, 0x01	; 1
    26d0:	85 e0       	ldi	r24, 0x05	; 5
    26d2:	d8 2e       	mov	r13, r24
    26d4:	fe 01       	movw	r30, r28
    26d6:	d0 9e       	mul	r13, r16
    26d8:	e0 0d       	add	r30, r0
    26da:	f1 1d       	adc	r31, r1
    26dc:	11 24       	eor	r1, r1
    26de:	80 85       	ldd	r24, Z+8	; 0x08
    26e0:	86 95       	lsr	r24
    26e2:	86 95       	lsr	r24
    26e4:	86 95       	lsr	r24
    26e6:	87 70       	andi	r24, 0x07	; 7
    26e8:	18 17       	cp	r17, r24
    26ea:	f9 f0       	breq	.+62     	; 0x272a <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh.part.10.constprop.13+0x88>
    26ec:	0f 5f       	subi	r16, 0xFF	; 255
    26ee:	00 31       	cpi	r16, 0x10	; 16
    26f0:	89 f7       	brne	.-30     	; 0x26d4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh.part.10.constprop.13+0x32>
    26f2:	8d 81       	ldd	r24, Y+5	; 0x05
    26f4:	81 13       	cpse	r24, r17
    26f6:	02 c0       	rjmp	.+4      	; 0x26fc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh.part.10.constprop.13+0x5a>
    26f8:	11 50       	subi	r17, 0x01	; 1
    26fa:	1d 83       	std	Y+5, r17	; 0x05
    26fc:	85 e0       	ldi	r24, 0x05	; 5
    26fe:	8e 9d       	mul	r24, r14
    2700:	f0 01       	movw	r30, r0
    2702:	8f 9d       	mul	r24, r15
    2704:	f0 0d       	add	r31, r0
    2706:	11 24       	eor	r1, r1
    2708:	ec 0f       	add	r30, r28
    270a:	fd 1f       	adc	r31, r29
    270c:	10 86       	std	Z+8, r1	; 0x08
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	81 87       	std	Z+9, r24	; 0x09
    2712:	12 86       	std	Z+10, r1	; 0x0a
    2714:	22 96       	adiw	r28, 0x02	; 2
    2716:	d7 83       	std	Z+7, r29	; 0x07
    2718:	c6 83       	std	Z+6, r28	; 0x06
    271a:	df 91       	pop	r29
    271c:	cf 91       	pop	r28
    271e:	1f 91       	pop	r17
    2720:	0f 91       	pop	r16
    2722:	ff 90       	pop	r15
    2724:	ef 90       	pop	r14
    2726:	df 90       	pop	r13
    2728:	08 95       	ret
    272a:	60 2f       	mov	r22, r16
    272c:	ce 01       	movw	r24, r28
    272e:	0e 94 51 13 	call	0x26a2	; 0x26a2 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh.part.10.constprop.13>
    2732:	d0 cf       	rjmp	.-96     	; 0x26d4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh.part.10.constprop.13+0x32>

00002734 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:
    2734:	fc 01       	movw	r30, r24
    2736:	61 34       	cpi	r22, 0x41	; 65
    2738:	99 f4       	brne	.+38     	; 0x2760 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x2c>
    273a:	9c 01       	movw	r18, r24
    273c:	25 5b       	subi	r18, 0xB5	; 181
    273e:	3f 4f       	sbci	r19, 0xFF	; 255
    2740:	61 e0       	ldi	r22, 0x01	; 1
    2742:	ac 01       	movw	r20, r24
    2744:	4e 5f       	subi	r20, 0xFE	; 254
    2746:	5f 4f       	sbci	r21, 0xFF	; 255
    2748:	15 86       	std	Z+13, r1	; 0x0d
    274a:	66 87       	std	Z+14, r22	; 0x0e
    274c:	17 86       	std	Z+15, r1	; 0x0f
    274e:	54 87       	std	Z+12, r21	; 0x0c
    2750:	43 87       	std	Z+11, r20	; 0x0b
    2752:	35 96       	adiw	r30, 0x05	; 5
    2754:	e2 17       	cp	r30, r18
    2756:	f3 07       	cpc	r31, r19
    2758:	b9 f7       	brne	.-18     	; 0x2748 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x14>
    275a:	fc 01       	movw	r30, r24
    275c:	15 82       	std	Z+5, r1	; 0x05
    275e:	08 95       	ret
    2760:	21 e0       	ldi	r18, 0x01	; 1
    2762:	35 85       	ldd	r19, Z+13	; 0x0d
    2764:	63 17       	cp	r22, r19
    2766:	29 f0       	breq	.+10     	; 0x2772 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x3e>
    2768:	2f 5f       	subi	r18, 0xFF	; 255
    276a:	35 96       	adiw	r30, 0x05	; 5
    276c:	20 31       	cpi	r18, 0x10	; 16
    276e:	c9 f7       	brne	.-14     	; 0x2762 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x2e>
    2770:	08 95       	ret
    2772:	62 2f       	mov	r22, r18
    2774:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh.part.10.constprop.13>

00002778 <_ZN8SPIClass8transferEh>:
    2778:	8e bd       	out	0x2e, r24	; 46
    277a:	00 00       	nop
    277c:	0d b4       	in	r0, 0x2d	; 45
    277e:	07 fe       	sbrs	r0, 7
    2780:	fd cf       	rjmp	.-6      	; 0x277c <_ZN8SPIClass8transferEh+0x4>
    2782:	8e b5       	in	r24, 0x2e	; 46
    2784:	08 95       	ret

00002786 <_ZN8SPIClass14endTransactionEv>:
    2786:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <_ZN8SPIClass13interruptModeE>
    278a:	88 23       	and	r24, r24
    278c:	61 f0       	breq	.+24     	; 0x27a6 <_ZN8SPIClass14endTransactionEv+0x20>
    278e:	9f b7       	in	r25, 0x3f	; 63
    2790:	f8 94       	cli
    2792:	20 91 86 04 	lds	r18, 0x0486	; 0x800486 <_ZN8SPIClass13interruptModeE>
    2796:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <_ZN8SPIClass13interruptSaveE>
    279a:	21 30       	cpi	r18, 0x01	; 1
    279c:	19 f4       	brne	.+6      	; 0x27a4 <_ZN8SPIClass14endTransactionEv+0x1e>
    279e:	8d bb       	out	0x1d, r24	; 29
    27a0:	9f bf       	out	0x3f, r25	; 63
    27a2:	08 95       	ret
    27a4:	8f bf       	out	0x3f, r24	; 63
    27a6:	08 95       	ret

000027a8 <_ZN3USBC1Ev>:
    27a8:	fc 01       	movw	r30, r24
    27aa:	83 ec       	ldi	r24, 0xC3	; 195
    27ac:	92 e0       	ldi	r25, 0x02	; 2
    27ae:	91 83       	std	Z+1, r25	; 0x01
    27b0:	80 83       	st	Z, r24
    27b2:	15 82       	std	Z+5, r1	; 0x05
    27b4:	10 86       	std	Z+8, r1	; 0x08
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	81 87       	std	Z+9, r24	; 0x09
    27ba:	12 86       	std	Z+10, r1	; 0x0a
    27bc:	cf 01       	movw	r24, r30
    27be:	02 96       	adiw	r24, 0x02	; 2
    27c0:	97 83       	std	Z+7, r25	; 0x07
    27c2:	86 83       	std	Z+6, r24	; 0x06
    27c4:	12 82       	std	Z+2, r1	; 0x02
    27c6:	28 e0       	ldi	r18, 0x08	; 8
    27c8:	23 83       	std	Z+3, r18	; 0x03
    27ca:	2c e3       	ldi	r18, 0x3C	; 60
    27cc:	24 83       	std	Z+4, r18	; 0x04
    27ce:	df 01       	movw	r26, r30
    27d0:	9f 01       	movw	r18, r30
    27d2:	25 5b       	subi	r18, 0xB5	; 181
    27d4:	3f 4f       	sbci	r19, 0xFF	; 255
    27d6:	41 e0       	ldi	r20, 0x01	; 1
    27d8:	1d 96       	adiw	r26, 0x0d	; 13
    27da:	1c 92       	st	X, r1
    27dc:	1d 97       	sbiw	r26, 0x0d	; 13
    27de:	1e 96       	adiw	r26, 0x0e	; 14
    27e0:	4c 93       	st	X, r20
    27e2:	1e 97       	sbiw	r26, 0x0e	; 14
    27e4:	1f 96       	adiw	r26, 0x0f	; 15
    27e6:	1c 92       	st	X, r1
    27e8:	1f 97       	sbiw	r26, 0x0f	; 15
    27ea:	1c 96       	adiw	r26, 0x0c	; 12
    27ec:	9c 93       	st	X, r25
    27ee:	8e 93       	st	-X, r24
    27f0:	1b 97       	sbiw	r26, 0x0b	; 11
    27f2:	15 96       	adiw	r26, 0x05	; 5
    27f4:	a2 17       	cp	r26, r18
    27f6:	b3 07       	cpc	r27, r19
    27f8:	79 f7       	brne	.-34     	; 0x27d8 <_ZN3USBC1Ev+0x30>
    27fa:	ea 58       	subi	r30, 0x8A	; 138
    27fc:	ff 4f       	sbci	r31, 0xFF	; 255
    27fe:	10 82       	st	Z, r1
    2800:	81 e1       	ldi	r24, 0x11	; 17
    2802:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <_ZL14usb_task_state>
    2806:	08 95       	ret

00002808 <_ZN3USB14getEpInfoEntryEhh>:
    2808:	cf 93       	push	r28
    280a:	c4 2f       	mov	r28, r20
    280c:	0e 94 3a 13 	call	0x2674	; 0x2674 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    2810:	00 97       	sbiw	r24, 0x00	; 0
    2812:	89 f0       	breq	.+34     	; 0x2836 <_ZN3USB14getEpInfoEntryEhh+0x2e>
    2814:	dc 01       	movw	r26, r24
    2816:	ed 91       	ld	r30, X+
    2818:	fc 91       	ld	r31, X
    281a:	11 97       	sbiw	r26, 0x01	; 1
    281c:	30 97       	sbiw	r30, 0x00	; 0
    281e:	59 f0       	breq	.+22     	; 0x2836 <_ZN3USB14getEpInfoEntryEhh+0x2e>
    2820:	13 96       	adiw	r26, 0x03	; 3
    2822:	9c 91       	ld	r25, X
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	89 17       	cp	r24, r25
    2828:	31 f0       	breq	.+12     	; 0x2836 <_ZN3USB14getEpInfoEntryEhh+0x2e>
    282a:	20 81       	ld	r18, Z
    282c:	2c 17       	cp	r18, r28
    282e:	31 f0       	breq	.+12     	; 0x283c <_ZN3USB14getEpInfoEntryEhh+0x34>
    2830:	33 96       	adiw	r30, 0x03	; 3
    2832:	8f 5f       	subi	r24, 0xFF	; 255
    2834:	f8 cf       	rjmp	.-16     	; 0x2826 <_ZN3USB14getEpInfoEntryEhh+0x1e>
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	01 c0       	rjmp	.+2      	; 0x283e <_ZN3USB14getEpInfoEntryEhh+0x36>
    283c:	cf 01       	movw	r24, r30
    283e:	cf 91       	pop	r28
    2840:	08 95       	ret

00002842 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:
    2842:	0f 93       	push	r16
    2844:	1f 93       	push	r17
    2846:	cf 93       	push	r28
    2848:	df 93       	push	r29
    284a:	21 15       	cp	r18, r1
    284c:	31 05       	cpc	r19, r1
    284e:	71 f0       	breq	.+28     	; 0x286c <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x2a>
    2850:	e9 01       	movw	r28, r18
    2852:	04 2f       	mov	r16, r20
    2854:	16 2f       	mov	r17, r22
    2856:	0e 94 3a 13 	call	0x2674	; 0x2674 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    285a:	fc 01       	movw	r30, r24
    285c:	89 2b       	or	r24, r25
    285e:	41 f0       	breq	.+16     	; 0x2870 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x2e>
    2860:	12 83       	std	Z+2, r17	; 0x02
    2862:	d1 83       	std	Z+1, r29	; 0x01
    2864:	c0 83       	st	Z, r28
    2866:	03 83       	std	Z+3, r16	; 0x03
    2868:	80 e0       	ldi	r24, 0x00	; 0
    286a:	03 c0       	rjmp	.+6      	; 0x2872 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x30>
    286c:	88 ed       	ldi	r24, 0xD8	; 216
    286e:	01 c0       	rjmp	.+2      	; 0x2872 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x30>
    2870:	86 ed       	ldi	r24, 0xD6	; 214
    2872:	df 91       	pop	r29
    2874:	cf 91       	pop	r28
    2876:	1f 91       	pop	r17
    2878:	0f 91       	pop	r16
    287a:	08 95       	ret

0000287c <_ZN3USB13ReleaseDeviceEh>:
    287c:	cf 92       	push	r12
    287e:	df 92       	push	r13
    2880:	ff 92       	push	r15
    2882:	0f 93       	push	r16
    2884:	1f 93       	push	r17
    2886:	cf 93       	push	r28
    2888:	df 93       	push	r29
    288a:	66 23       	and	r22, r22
    288c:	81 f1       	breq	.+96     	; 0x28ee <_ZN3USB13ReleaseDeviceEh+0x72>
    288e:	f6 2e       	mov	r15, r22
    2890:	8c 01       	movw	r16, r24
    2892:	6c 01       	movw	r12, r24
    2894:	86 e5       	ldi	r24, 0x56	; 86
    2896:	c8 0e       	add	r12, r24
    2898:	d1 1c       	adc	r13, r1
    289a:	c0 e0       	ldi	r28, 0x00	; 0
    289c:	d0 e0       	ldi	r29, 0x00	; 0
    289e:	d6 01       	movw	r26, r12
    28a0:	8d 91       	ld	r24, X+
    28a2:	9d 91       	ld	r25, X+
    28a4:	6d 01       	movw	r12, r26
    28a6:	00 97       	sbiw	r24, 0x00	; 0
    28a8:	f1 f0       	breq	.+60     	; 0x28e6 <_ZN3USB13ReleaseDeviceEh+0x6a>
    28aa:	dc 01       	movw	r26, r24
    28ac:	ed 91       	ld	r30, X+
    28ae:	fc 91       	ld	r31, X
    28b0:	00 84       	ldd	r0, Z+8	; 0x08
    28b2:	f1 85       	ldd	r31, Z+9	; 0x09
    28b4:	e0 2d       	mov	r30, r0
    28b6:	09 95       	icall
    28b8:	f8 12       	cpse	r15, r24
    28ba:	15 c0       	rjmp	.+42     	; 0x28e6 <_ZN3USB13ReleaseDeviceEh+0x6a>
    28bc:	ab 96       	adiw	r28, 0x2b	; 43
    28be:	cc 0f       	add	r28, r28
    28c0:	dd 1f       	adc	r29, r29
    28c2:	c0 0f       	add	r28, r16
    28c4:	d1 1f       	adc	r29, r17
    28c6:	88 81       	ld	r24, Y
    28c8:	99 81       	ldd	r25, Y+1	; 0x01
    28ca:	dc 01       	movw	r26, r24
    28cc:	ed 91       	ld	r30, X+
    28ce:	fc 91       	ld	r31, X
    28d0:	04 80       	ldd	r0, Z+4	; 0x04
    28d2:	f5 81       	ldd	r31, Z+5	; 0x05
    28d4:	e0 2d       	mov	r30, r0
    28d6:	df 91       	pop	r29
    28d8:	cf 91       	pop	r28
    28da:	1f 91       	pop	r17
    28dc:	0f 91       	pop	r16
    28de:	ff 90       	pop	r15
    28e0:	df 90       	pop	r13
    28e2:	cf 90       	pop	r12
    28e4:	09 94       	ijmp
    28e6:	21 96       	adiw	r28, 0x01	; 1
    28e8:	c0 31       	cpi	r28, 0x10	; 16
    28ea:	d1 05       	cpc	r29, r1
    28ec:	c1 f6       	brne	.-80     	; 0x289e <_ZN3USB13ReleaseDeviceEh+0x22>
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	df 91       	pop	r29
    28f2:	cf 91       	pop	r28
    28f4:	1f 91       	pop	r17
    28f6:	0f 91       	pop	r16
    28f8:	ff 90       	pop	r15
    28fa:	df 90       	pop	r13
    28fc:	cf 90       	pop	r12
    28fe:	08 95       	ret

00002900 <_ZN4TPinI5PortbLh2EE5ClearEv>:
    2900:	2a 98       	cbi	0x05, 2	; 5
    2902:	08 95       	ret

00002904 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.5>:
    2904:	cf 93       	push	r28
    2906:	c8 2f       	mov	r28, r24
    2908:	80 e5       	ldi	r24, 0x50	; 80
    290a:	91 e0       	ldi	r25, 0x01	; 1
    290c:	0e 94 fe 04 	call	0x9fc	; 0x9fc <_ZN8SPIClass16beginTransactionE11SPISettings>
    2910:	0e 94 80 14 	call	0x2900	; 0x2900 <_ZN4TPinI5PortbLh2EE5ClearEv>
    2914:	8c 2f       	mov	r24, r28
    2916:	0e 94 bc 13 	call	0x2778	; 0x2778 <_ZN8SPIClass8transferEh>
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	0e 94 bc 13 	call	0x2778	; 0x2778 <_ZN8SPIClass8transferEh>
    2920:	c8 2f       	mov	r28, r24
    2922:	0e 94 28 05 	call	0xa50	; 0xa50 <_ZN4TPinI5PortbLh2EE3SetEv>
    2926:	0e 94 c3 13 	call	0x2786	; 0x2786 <_ZN8SPIClass14endTransactionEv>
    292a:	8c 2f       	mov	r24, r28
    292c:	cf 91       	pop	r28
    292e:	08 95       	ret

00002930 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>:
    2930:	0f 93       	push	r16
    2932:	1f 93       	push	r17
    2934:	cf 93       	push	r28
    2936:	df 93       	push	r29
    2938:	00 d0       	rcall	.+0      	; 0x293a <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6+0xa>
    293a:	cd b7       	in	r28, 0x3d	; 61
    293c:	de b7       	in	r29, 0x3e	; 62
    293e:	18 2f       	mov	r17, r24
    2940:	06 2f       	mov	r16, r22
    2942:	80 e5       	ldi	r24, 0x50	; 80
    2944:	91 e0       	ldi	r25, 0x01	; 1
    2946:	0e 94 fe 04 	call	0x9fc	; 0x9fc <_ZN8SPIClass16beginTransactionE11SPISettings>
    294a:	0e 94 80 14 	call	0x2900	; 0x2900 <_ZN4TPinI5PortbLh2EE5ClearEv>
    294e:	12 60       	ori	r17, 0x02	; 2
    2950:	19 83       	std	Y+1, r17	; 0x01
    2952:	0a 83       	std	Y+2, r16	; 0x02
    2954:	62 e0       	ldi	r22, 0x02	; 2
    2956:	70 e0       	ldi	r23, 0x00	; 0
    2958:	ce 01       	movw	r24, r28
    295a:	01 96       	adiw	r24, 0x01	; 1
    295c:	0e 94 20 13 	call	0x2640	; 0x2640 <_ZN8SPIClass8transferEPvj.part.0>
    2960:	0e 94 28 05 	call	0xa50	; 0xa50 <_ZN4TPinI5PortbLh2EE3SetEv>
    2964:	0e 94 c3 13 	call	0x2786	; 0x2786 <_ZN8SPIClass14endTransactionEv>
    2968:	0f 90       	pop	r0
    296a:	0f 90       	pop	r0
    296c:	df 91       	pop	r29
    296e:	cf 91       	pop	r28
    2970:	1f 91       	pop	r17
    2972:	0f 91       	pop	r16
    2974:	08 95       	ret

00002976 <_ZN3USB10SetAddressEhhPP6EpInfoPj>:
    2976:	8f 92       	push	r8
    2978:	9f 92       	push	r9
    297a:	af 92       	push	r10
    297c:	bf 92       	push	r11
    297e:	cf 92       	push	r12
    2980:	df 92       	push	r13
    2982:	ef 92       	push	r14
    2984:	ff 92       	push	r15
    2986:	0f 93       	push	r16
    2988:	1f 93       	push	r17
    298a:	cf 93       	push	r28
    298c:	df 93       	push	r29
    298e:	ec 01       	movw	r28, r24
    2990:	d6 2e       	mov	r13, r22
    2992:	c4 2e       	mov	r12, r20
    2994:	59 01       	movw	r10, r18
    2996:	0e 94 3a 13 	call	0x2674	; 0x2674 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    299a:	7c 01       	movw	r14, r24
    299c:	00 97       	sbiw	r24, 0x00	; 0
    299e:	09 f4       	brne	.+2      	; 0x29a2 <_ZN3USB10SetAddressEhhPP6EpInfoPj+0x2c>
    29a0:	45 c0       	rjmp	.+138    	; 0x2a2c <_ZN3USB10SetAddressEhhPP6EpInfoPj+0xb6>
    29a2:	fc 01       	movw	r30, r24
    29a4:	80 81       	ld	r24, Z
    29a6:	91 81       	ldd	r25, Z+1	; 0x01
    29a8:	89 2b       	or	r24, r25
    29aa:	09 f4       	brne	.+2      	; 0x29ae <_ZN3USB10SetAddressEhhPP6EpInfoPj+0x38>
    29ac:	41 c0       	rjmp	.+130    	; 0x2a30 <_ZN3USB10SetAddressEhhPP6EpInfoPj+0xba>
    29ae:	4c 2d       	mov	r20, r12
    29b0:	6d 2d       	mov	r22, r13
    29b2:	ce 01       	movw	r24, r28
    29b4:	0e 94 04 14 	call	0x2808	; 0x2808 <_ZN3USB14getEpInfoEntryEhh>
    29b8:	f5 01       	movw	r30, r10
    29ba:	91 83       	std	Z+1, r25	; 0x01
    29bc:	80 83       	st	Z, r24
    29be:	00 97       	sbiw	r24, 0x00	; 0
    29c0:	c9 f1       	breq	.+114    	; 0x2a34 <_ZN3USB10SetAddressEhhPP6EpInfoPj+0xbe>
    29c2:	fc 01       	movw	r30, r24
    29c4:	82 81       	ldd	r24, Z+2	; 0x02
    29c6:	86 95       	lsr	r24
    29c8:	86 95       	lsr	r24
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	80 31       	cpi	r24, 0x10	; 16
    29ce:	91 05       	cpc	r25, r1
    29d0:	14 f0       	brlt	.+4      	; 0x29d6 <_ZN3USB10SetAddressEhhPP6EpInfoPj+0x60>
    29d2:	8f e0       	ldi	r24, 0x0F	; 15
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	41 e0       	ldi	r20, 0x01	; 1
    29d8:	50 e0       	ldi	r21, 0x00	; 0
    29da:	60 e0       	ldi	r22, 0x00	; 0
    29dc:	70 e0       	ldi	r23, 0x00	; 0
    29de:	4a 01       	movw	r8, r20
    29e0:	5b 01       	movw	r10, r22
    29e2:	04 c0       	rjmp	.+8      	; 0x29ec <_ZN3USB10SetAddressEhhPP6EpInfoPj+0x76>
    29e4:	88 0c       	add	r8, r8
    29e6:	99 1c       	adc	r9, r9
    29e8:	aa 1c       	adc	r10, r10
    29ea:	bb 1c       	adc	r11, r11
    29ec:	8a 95       	dec	r24
    29ee:	d2 f7       	brpl	.-12     	; 0x29e4 <_ZN3USB10SetAddressEhhPP6EpInfoPj+0x6e>
    29f0:	d5 01       	movw	r26, r10
    29f2:	c4 01       	movw	r24, r8
    29f4:	01 97       	sbiw	r24, 0x01	; 1
    29f6:	f8 01       	movw	r30, r16
    29f8:	91 83       	std	Z+1, r25	; 0x01
    29fa:	80 83       	st	Z, r24
    29fc:	6d 2d       	mov	r22, r13
    29fe:	80 ee       	ldi	r24, 0xE0	; 224
    2a00:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
    2a04:	88 ed       	ldi	r24, 0xD8	; 216
    2a06:	0e 94 82 14 	call	0x2904	; 0x2904 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.5>
    2a0a:	f7 01       	movw	r30, r14
    2a0c:	94 81       	ldd	r25, Z+4	; 0x04
    2a0e:	99 23       	and	r25, r25
    2a10:	31 f0       	breq	.+12     	; 0x2a1e <_ZN3USB10SetAddressEhhPP6EpInfoPj+0xa8>
    2a12:	ca 58       	subi	r28, 0x8A	; 138
    2a14:	df 4f       	sbci	r29, 0xFF	; 255
    2a16:	68 81       	ld	r22, Y
    2a18:	62 60       	ori	r22, 0x02	; 2
    2a1a:	68 2b       	or	r22, r24
    2a1c:	02 c0       	rjmp	.+4      	; 0x2a22 <_ZN3USB10SetAddressEhhPP6EpInfoPj+0xac>
    2a1e:	68 2f       	mov	r22, r24
    2a20:	69 7f       	andi	r22, 0xF9	; 249
    2a22:	88 ed       	ldi	r24, 0xD8	; 216
    2a24:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
    2a28:	80 e0       	ldi	r24, 0x00	; 0
    2a2a:	05 c0       	rjmp	.+10     	; 0x2a36 <_ZN3USB10SetAddressEhhPP6EpInfoPj+0xc0>
    2a2c:	86 ed       	ldi	r24, 0xD6	; 214
    2a2e:	03 c0       	rjmp	.+6      	; 0x2a36 <_ZN3USB10SetAddressEhhPP6EpInfoPj+0xc0>
    2a30:	87 ed       	ldi	r24, 0xD7	; 215
    2a32:	01 c0       	rjmp	.+2      	; 0x2a36 <_ZN3USB10SetAddressEhhPP6EpInfoPj+0xc0>
    2a34:	8b ed       	ldi	r24, 0xDB	; 219
    2a36:	df 91       	pop	r29
    2a38:	cf 91       	pop	r28
    2a3a:	1f 91       	pop	r17
    2a3c:	0f 91       	pop	r16
    2a3e:	ff 90       	pop	r15
    2a40:	ef 90       	pop	r14
    2a42:	df 90       	pop	r13
    2a44:	cf 90       	pop	r12
    2a46:	bf 90       	pop	r11
    2a48:	af 90       	pop	r10
    2a4a:	9f 90       	pop	r9
    2a4c:	8f 90       	pop	r8
    2a4e:	08 95       	ret

00002a50 <_ZN3USB11dispatchPktEhhj>:
    2a50:	8f 92       	push	r8
    2a52:	9f 92       	push	r9
    2a54:	af 92       	push	r10
    2a56:	bf 92       	push	r11
    2a58:	cf 92       	push	r12
    2a5a:	df 92       	push	r13
    2a5c:	ef 92       	push	r14
    2a5e:	ff 92       	push	r15
    2a60:	0f 93       	push	r16
    2a62:	1f 93       	push	r17
    2a64:	cf 93       	push	r28
    2a66:	df 93       	push	r29
    2a68:	86 2e       	mov	r8, r22
    2a6a:	94 2e       	mov	r9, r20
    2a6c:	59 01       	movw	r10, r18
    2a6e:	0e 94 1c 09 	call	0x1238	; 0x1238 <millis>
    2a72:	6b 01       	movw	r12, r22
    2a74:	7c 01       	movw	r14, r24
    2a76:	28 e8       	ldi	r18, 0x88	; 136
    2a78:	c2 0e       	add	r12, r18
    2a7a:	23 e1       	ldi	r18, 0x13	; 19
    2a7c:	d2 1e       	adc	r13, r18
    2a7e:	e1 1c       	adc	r14, r1
    2a80:	f1 1c       	adc	r15, r1
    2a82:	00 e0       	ldi	r16, 0x00	; 0
    2a84:	10 e0       	ldi	r17, 0x00	; 0
    2a86:	d0 e0       	ldi	r29, 0x00	; 0
    2a88:	c0 e0       	ldi	r28, 0x00	; 0
    2a8a:	98 28       	or	r9, r8
    2a8c:	0e 94 1c 09 	call	0x1238	; 0x1238 <millis>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	8c 19       	sub	r24, r12
    2a96:	9d 09       	sbc	r25, r13
    2a98:	ae 09       	sbc	r26, r14
    2a9a:	bf 09       	sbc	r27, r15
    2a9c:	b7 ff       	sbrs	r27, 7
    2a9e:	2d c0       	rjmp	.+90     	; 0x2afa <_ZN3USB11dispatchPktEhhj+0xaa>
    2aa0:	69 2d       	mov	r22, r9
    2aa2:	80 ef       	ldi	r24, 0xF0	; 240
    2aa4:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
    2aa8:	0e 94 1c 09 	call	0x1238	; 0x1238 <millis>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	8c 19       	sub	r24, r12
    2ab2:	9d 09       	sbc	r25, r13
    2ab4:	ae 09       	sbc	r26, r14
    2ab6:	bf 09       	sbc	r27, r15
    2ab8:	b7 ff       	sbrs	r27, 7
    2aba:	09 c0       	rjmp	.+18     	; 0x2ace <_ZN3USB11dispatchPktEhhj+0x7e>
    2abc:	88 ec       	ldi	r24, 0xC8	; 200
    2abe:	0e 94 82 14 	call	0x2904	; 0x2904 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.5>
    2ac2:	87 ff       	sbrs	r24, 7
    2ac4:	f1 cf       	rjmp	.-30     	; 0x2aa8 <_ZN3USB11dispatchPktEhhj+0x58>
    2ac6:	60 e8       	ldi	r22, 0x80	; 128
    2ac8:	88 ec       	ldi	r24, 0xC8	; 200
    2aca:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
    2ace:	88 ef       	ldi	r24, 0xF8	; 248
    2ad0:	0e 94 82 14 	call	0x2904	; 0x2904 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.5>
    2ad4:	c8 2f       	mov	r28, r24
    2ad6:	cf 70       	andi	r28, 0x0F	; 15
    2ad8:	c4 30       	cpi	r28, 0x04	; 4
    2ada:	19 f0       	breq	.+6      	; 0x2ae2 <_ZN3USB11dispatchPktEhhj+0x92>
    2adc:	ce 30       	cpi	r28, 0x0E	; 14
    2ade:	51 f0       	breq	.+20     	; 0x2af4 <_ZN3USB11dispatchPktEhhj+0xa4>
    2ae0:	0c c0       	rjmp	.+24     	; 0x2afa <_ZN3USB11dispatchPktEhhj+0xaa>
    2ae2:	0f 5f       	subi	r16, 0xFF	; 255
    2ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae6:	a1 14       	cp	r10, r1
    2ae8:	b1 04       	cpc	r11, r1
    2aea:	81 f2       	breq	.-96     	; 0x2a8c <_ZN3USB11dispatchPktEhhj+0x3c>
    2aec:	0a 15       	cp	r16, r10
    2aee:	1b 05       	cpc	r17, r11
    2af0:	69 f6       	brne	.-102    	; 0x2a8c <_ZN3USB11dispatchPktEhhj+0x3c>
    2af2:	03 c0       	rjmp	.+6      	; 0x2afa <_ZN3USB11dispatchPktEhhj+0xaa>
    2af4:	df 5f       	subi	r29, 0xFF	; 255
    2af6:	d3 30       	cpi	r29, 0x03	; 3
    2af8:	49 f6       	brne	.-110    	; 0x2a8c <_ZN3USB11dispatchPktEhhj+0x3c>
    2afa:	8c 2f       	mov	r24, r28
    2afc:	df 91       	pop	r29
    2afe:	cf 91       	pop	r28
    2b00:	1f 91       	pop	r17
    2b02:	0f 91       	pop	r16
    2b04:	ff 90       	pop	r15
    2b06:	ef 90       	pop	r14
    2b08:	df 90       	pop	r13
    2b0a:	cf 90       	pop	r12
    2b0c:	bf 90       	pop	r11
    2b0e:	af 90       	pop	r10
    2b10:	9f 90       	pop	r9
    2b12:	8f 90       	pop	r8
    2b14:	08 95       	ret

00002b16 <_ZN3USB13AttemptConfigEhhhb>:
    2b16:	9f 92       	push	r9
    2b18:	af 92       	push	r10
    2b1a:	bf 92       	push	r11
    2b1c:	cf 92       	push	r12
    2b1e:	df 92       	push	r13
    2b20:	ef 92       	push	r14
    2b22:	ff 92       	push	r15
    2b24:	0f 93       	push	r16
    2b26:	1f 93       	push	r17
    2b28:	cf 93       	push	r28
    2b2a:	df 93       	push	r29
    2b2c:	7c 01       	movw	r14, r24
    2b2e:	d4 2f       	mov	r29, r20
    2b30:	12 2f       	mov	r17, r18
    2b32:	90 2e       	mov	r9, r16
    2b34:	00 e0       	ldi	r16, 0x00	; 0
    2b36:	6c 01       	movw	r12, r24
    2b38:	c6 0e       	add	r12, r22
    2b3a:	d1 1c       	adc	r13, r1
    2b3c:	c6 0e       	add	r12, r22
    2b3e:	d1 1c       	adc	r13, r1
    2b40:	86 e5       	ldi	r24, 0x56	; 86
    2b42:	c8 0e       	add	r12, r24
    2b44:	d1 1c       	adc	r13, r1
    2b46:	a4 2e       	mov	r10, r20
    2b48:	b1 2c       	mov	r11, r1
    2b4a:	ab e2       	ldi	r26, 0x2B	; 43
    2b4c:	aa 0e       	add	r10, r26
    2b4e:	b1 1c       	adc	r11, r1
    2b50:	aa 0c       	add	r10, r10
    2b52:	bb 1c       	adc	r11, r11
    2b54:	ae 0c       	add	r10, r14
    2b56:	bf 1c       	adc	r11, r15
    2b58:	f6 01       	movw	r30, r12
    2b5a:	80 81       	ld	r24, Z
    2b5c:	91 81       	ldd	r25, Z+1	; 0x01
    2b5e:	dc 01       	movw	r26, r24
    2b60:	ed 91       	ld	r30, X+
    2b62:	fc 91       	ld	r31, X
    2b64:	02 80       	ldd	r0, Z+2	; 0x02
    2b66:	f3 81       	ldd	r31, Z+3	; 0x03
    2b68:	e0 2d       	mov	r30, r0
    2b6a:	29 2d       	mov	r18, r9
    2b6c:	41 2f       	mov	r20, r17
    2b6e:	6d 2f       	mov	r22, r29
    2b70:	09 95       	icall
    2b72:	80 3e       	cpi	r24, 0xE0	; 224
    2b74:	c9 f4       	brne	.+50     	; 0x2ba8 <_ZN3USB13AttemptConfigEhhhb+0x92>
    2b76:	d1 11       	cpse	r29, r1
    2b78:	0b c0       	rjmp	.+22     	; 0x2b90 <_ZN3USB13AttemptConfigEhhhb+0x7a>
    2b7a:	61 e0       	ldi	r22, 0x01	; 1
    2b7c:	88 ee       	ldi	r24, 0xE8	; 232
    2b7e:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
    2b82:	66 e6       	ldi	r22, 0x66	; 102
    2b84:	70 e0       	ldi	r23, 0x00	; 0
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	0e 94 4d 09 	call	0x129a	; 0x129a <delay>
    2b8e:	14 c0       	rjmp	.+40     	; 0x2bb8 <_ZN3USB13AttemptConfigEhhhb+0xa2>
    2b90:	f5 01       	movw	r30, r10
    2b92:	80 81       	ld	r24, Z
    2b94:	91 81       	ldd	r25, Z+1	; 0x01
    2b96:	dc 01       	movw	r26, r24
    2b98:	ed 91       	ld	r30, X+
    2b9a:	fc 91       	ld	r31, X
    2b9c:	02 84       	ldd	r0, Z+10	; 0x0a
    2b9e:	f3 85       	ldd	r31, Z+11	; 0x0b
    2ba0:	e0 2d       	mov	r30, r0
    2ba2:	61 2f       	mov	r22, r17
    2ba4:	09 95       	icall
    2ba6:	08 c0       	rjmp	.+16     	; 0x2bb8 <_ZN3USB13AttemptConfigEhhhb+0xa2>
    2ba8:	8d 30       	cpi	r24, 0x0D	; 13
    2baa:	21 f4       	brne	.+8      	; 0x2bb4 <_ZN3USB13AttemptConfigEhhhb+0x9e>
    2bac:	03 30       	cpi	r16, 0x03	; 3
    2bae:	08 f0       	brcs	.+2      	; 0x2bb2 <_ZN3USB13AttemptConfigEhhhb+0x9c>
    2bb0:	3f c0       	rjmp	.+126    	; 0x2c30 <_ZN3USB13AttemptConfigEhhhb+0x11a>
    2bb2:	14 c0       	rjmp	.+40     	; 0x2bdc <_ZN3USB13AttemptConfigEhhhb+0xc6>
    2bb4:	81 11       	cpse	r24, r1
    2bb6:	3f c0       	rjmp	.+126    	; 0x2c36 <_ZN3USB13AttemptConfigEhhhb+0x120>
    2bb8:	f6 01       	movw	r30, r12
    2bba:	80 81       	ld	r24, Z
    2bbc:	91 81       	ldd	r25, Z+1	; 0x01
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	ed 91       	ld	r30, X+
    2bc2:	fc 91       	ld	r31, X
    2bc4:	01 90       	ld	r0, Z+
    2bc6:	f0 81       	ld	r31, Z
    2bc8:	e0 2d       	mov	r30, r0
    2bca:	29 2d       	mov	r18, r9
    2bcc:	41 2f       	mov	r20, r17
    2bce:	6d 2f       	mov	r22, r29
    2bd0:	09 95       	icall
    2bd2:	c8 2f       	mov	r28, r24
    2bd4:	8d 30       	cpi	r24, 0x0D	; 13
    2bd6:	51 f4       	brne	.+20     	; 0x2bec <_ZN3USB13AttemptConfigEhhhb+0xd6>
    2bd8:	03 30       	cpi	r16, 0x03	; 3
    2bda:	50 f4       	brcc	.+20     	; 0x2bf0 <_ZN3USB13AttemptConfigEhhhb+0xda>
    2bdc:	64 e6       	ldi	r22, 0x64	; 100
    2bde:	70 e0       	ldi	r23, 0x00	; 0
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	0e 94 4d 09 	call	0x129a	; 0x129a <delay>
    2be8:	0f 5f       	subi	r16, 0xFF	; 255
    2bea:	b6 cf       	rjmp	.-148    	; 0x2b58 <_ZN3USB13AttemptConfigEhhhb+0x42>
    2bec:	88 23       	and	r24, r24
    2bee:	11 f1       	breq	.+68     	; 0x2c34 <_ZN3USB13AttemptConfigEhhhb+0x11e>
    2bf0:	d1 11       	cpse	r29, r1
    2bf2:	0b c0       	rjmp	.+22     	; 0x2c0a <_ZN3USB13AttemptConfigEhhhb+0xf4>
    2bf4:	61 e0       	ldi	r22, 0x01	; 1
    2bf6:	88 ee       	ldi	r24, 0xE8	; 232
    2bf8:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
    2bfc:	66 e6       	ldi	r22, 0x66	; 102
    2bfe:	70 e0       	ldi	r23, 0x00	; 0
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	0e 94 4d 09 	call	0x129a	; 0x129a <delay>
    2c08:	11 c0       	rjmp	.+34     	; 0x2c2c <_ZN3USB13AttemptConfigEhhhb+0x116>
    2c0a:	ed 2f       	mov	r30, r29
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	bb 96       	adiw	r30, 0x2b	; 43
    2c10:	ee 0f       	add	r30, r30
    2c12:	ff 1f       	adc	r31, r31
    2c14:	ee 0d       	add	r30, r14
    2c16:	ff 1d       	adc	r31, r15
    2c18:	80 81       	ld	r24, Z
    2c1a:	91 81       	ldd	r25, Z+1	; 0x01
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	ed 91       	ld	r30, X+
    2c20:	fc 91       	ld	r31, X
    2c22:	02 84       	ldd	r0, Z+10	; 0x0a
    2c24:	f3 85       	ldd	r31, Z+11	; 0x0b
    2c26:	e0 2d       	mov	r30, r0
    2c28:	61 2f       	mov	r22, r17
    2c2a:	09 95       	icall
    2c2c:	8c 2f       	mov	r24, r28
    2c2e:	03 c0       	rjmp	.+6      	; 0x2c36 <_ZN3USB13AttemptConfigEhhhb+0x120>
    2c30:	8d e0       	ldi	r24, 0x0D	; 13
    2c32:	01 c0       	rjmp	.+2      	; 0x2c36 <_ZN3USB13AttemptConfigEhhhb+0x120>
    2c34:	80 e0       	ldi	r24, 0x00	; 0
    2c36:	df 91       	pop	r29
    2c38:	cf 91       	pop	r28
    2c3a:	1f 91       	pop	r17
    2c3c:	0f 91       	pop	r16
    2c3e:	ff 90       	pop	r15
    2c40:	ef 90       	pop	r14
    2c42:	df 90       	pop	r13
    2c44:	cf 90       	pop	r12
    2c46:	bf 90       	pop	r11
    2c48:	af 90       	pop	r10
    2c4a:	9f 90       	pop	r9
    2c4c:	08 95       	ret

00002c4e <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE7bytesWrEhhPh.isra.7>:
    2c4e:	0f 93       	push	r16
    2c50:	1f 93       	push	r17
    2c52:	cf 93       	push	r28
    2c54:	df 93       	push	r29
    2c56:	c8 2f       	mov	r28, r24
    2c58:	d6 2f       	mov	r29, r22
    2c5a:	8a 01       	movw	r16, r20
    2c5c:	80 e5       	ldi	r24, 0x50	; 80
    2c5e:	91 e0       	ldi	r25, 0x01	; 1
    2c60:	0e 94 fe 04 	call	0x9fc	; 0x9fc <_ZN8SPIClass16beginTransactionE11SPISettings>
    2c64:	0e 94 80 14 	call	0x2900	; 0x2900 <_ZN4TPinI5PortbLh2EE5ClearEv>
    2c68:	8c 2f       	mov	r24, r28
    2c6a:	82 60       	ori	r24, 0x02	; 2
    2c6c:	0e 94 bc 13 	call	0x2778	; 0x2778 <_ZN8SPIClass8transferEh>
    2c70:	cd 2f       	mov	r28, r29
    2c72:	d0 e0       	ldi	r29, 0x00	; 0
    2c74:	20 97       	sbiw	r28, 0x00	; 0
    2c76:	21 f0       	breq	.+8      	; 0x2c80 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE7bytesWrEhhPh.isra.7+0x32>
    2c78:	be 01       	movw	r22, r28
    2c7a:	c8 01       	movw	r24, r16
    2c7c:	0e 94 20 13 	call	0x2640	; 0x2640 <_ZN8SPIClass8transferEPvj.part.0>
    2c80:	c0 0f       	add	r28, r16
    2c82:	d1 1f       	adc	r29, r17
    2c84:	0e 94 28 05 	call	0xa50	; 0xa50 <_ZN4TPinI5PortbLh2EE3SetEv>
    2c88:	0e 94 c3 13 	call	0x2786	; 0x2786 <_ZN8SPIClass14endTransactionEv>
    2c8c:	ce 01       	movw	r24, r28
    2c8e:	df 91       	pop	r29
    2c90:	cf 91       	pop	r28
    2c92:	1f 91       	pop	r17
    2c94:	0f 91       	pop	r16
    2c96:	08 95       	ret

00002c98 <_ZN3USB11OutTransferEP6EpInfojjPh>:
    2c98:	2f 92       	push	r2
    2c9a:	3f 92       	push	r3
    2c9c:	4f 92       	push	r4
    2c9e:	5f 92       	push	r5
    2ca0:	6f 92       	push	r6
    2ca2:	7f 92       	push	r7
    2ca4:	8f 92       	push	r8
    2ca6:	9f 92       	push	r9
    2ca8:	af 92       	push	r10
    2caa:	bf 92       	push	r11
    2cac:	cf 92       	push	r12
    2cae:	df 92       	push	r13
    2cb0:	ef 92       	push	r14
    2cb2:	ff 92       	push	r15
    2cb4:	0f 93       	push	r16
    2cb6:	1f 93       	push	r17
    2cb8:	cf 93       	push	r28
    2cba:	df 93       	push	r29
    2cbc:	00 d0       	rcall	.+0      	; 0x2cbe <_ZN3USB11OutTransferEP6EpInfojjPh+0x26>
    2cbe:	00 d0       	rcall	.+0      	; 0x2cc0 <_ZN3USB11OutTransferEP6EpInfojjPh+0x28>
    2cc0:	1f 92       	push	r1
    2cc2:	cd b7       	in	r28, 0x3d	; 61
    2cc4:	de b7       	in	r29, 0x3e	; 62
    2cc6:	7d 83       	std	Y+5, r23	; 0x05
    2cc8:	6c 83       	std	Y+4, r22	; 0x04
    2cca:	4a 01       	movw	r8, r20
    2ccc:	69 01       	movw	r12, r18
    2cce:	fb 01       	movw	r30, r22
    2cd0:	f1 80       	ldd	r15, Z+1	; 0x01
    2cd2:	8f ef       	ldi	r24, 0xFF	; 255
    2cd4:	8f 0d       	add	r24, r15
    2cd6:	80 34       	cpi	r24, 0x40	; 64
    2cd8:	08 f0       	brcs	.+2      	; 0x2cdc <_ZN3USB11OutTransferEP6EpInfojjPh+0x44>
    2cda:	74 c0       	rjmp	.+232    	; 0x2dc4 <_ZN3USB11OutTransferEP6EpInfojjPh+0x12c>
    2cdc:	0e 94 1c 09 	call	0x1238	; 0x1238 <millis>
    2ce0:	2b 01       	movw	r4, r22
    2ce2:	3c 01       	movw	r6, r24
    2ce4:	f8 e8       	ldi	r31, 0x88	; 136
    2ce6:	4f 0e       	add	r4, r31
    2ce8:	f3 e1       	ldi	r31, 0x13	; 19
    2cea:	5f 1e       	adc	r5, r31
    2cec:	61 1c       	adc	r6, r1
    2cee:	71 1c       	adc	r7, r1
    2cf0:	ec 81       	ldd	r30, Y+4	; 0x04
    2cf2:	fd 81       	ldd	r31, Y+5	; 0x05
    2cf4:	82 81       	ldd	r24, Z+2	; 0x02
    2cf6:	80 fd       	sbrc	r24, 0
    2cf8:	02 c0       	rjmp	.+4      	; 0x2cfe <_ZN3USB11OutTransferEP6EpInfojjPh+0x66>
    2cfa:	60 e4       	ldi	r22, 0x40	; 64
    2cfc:	01 c0       	rjmp	.+2      	; 0x2d00 <_ZN3USB11OutTransferEP6EpInfojjPh+0x68>
    2cfe:	60 e8       	ldi	r22, 0x80	; 128
    2d00:	88 ee       	ldi	r24, 0xE8	; 232
    2d02:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
    2d06:	31 2c       	mov	r3, r1
    2d08:	8f 2d       	mov	r24, r15
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	9a 83       	std	Y+2, r25	; 0x02
    2d0e:	89 83       	std	Y+1, r24	; 0x01
    2d10:	c1 14       	cp	r12, r1
    2d12:	d1 04       	cpc	r13, r1
    2d14:	09 f4       	brne	.+2      	; 0x2d18 <_ZN3USB11OutTransferEP6EpInfojjPh+0x80>
    2d16:	48 c0       	rjmp	.+144    	; 0x2da8 <_ZN3USB11OutTransferEP6EpInfojjPh+0x110>
    2d18:	e9 80       	ldd	r14, Y+1	; 0x01
    2d1a:	fa 80       	ldd	r15, Y+2	; 0x02
    2d1c:	ce 14       	cp	r12, r14
    2d1e:	df 04       	cpc	r13, r15
    2d20:	08 f4       	brcc	.+2      	; 0x2d24 <_ZN3USB11OutTransferEP6EpInfojjPh+0x8c>
    2d22:	76 01       	movw	r14, r12
    2d24:	eb 82       	std	Y+3, r14	; 0x03
    2d26:	a8 01       	movw	r20, r16
    2d28:	6e 2d       	mov	r22, r14
    2d2a:	80 e1       	ldi	r24, 0x10	; 16
    2d2c:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE7bytesWrEhhPh.isra.7>
    2d30:	6e 2d       	mov	r22, r14
    2d32:	88 e3       	ldi	r24, 0x38	; 56
    2d34:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
    2d38:	ec 81       	ldd	r30, Y+4	; 0x04
    2d3a:	fd 81       	ldd	r31, Y+5	; 0x05
    2d3c:	60 81       	ld	r22, Z
    2d3e:	60 62       	ori	r22, 0x20	; 32
    2d40:	80 ef       	ldi	r24, 0xF0	; 240
    2d42:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
    2d46:	88 ec       	ldi	r24, 0xC8	; 200
    2d48:	0e 94 82 14 	call	0x2904	; 0x2904 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.5>
    2d4c:	87 ff       	sbrs	r24, 7
    2d4e:	fb cf       	rjmp	.-10     	; 0x2d46 <_ZN3USB11OutTransferEP6EpInfojjPh+0xae>
    2d50:	60 e8       	ldi	r22, 0x80	; 128
    2d52:	88 ec       	ldi	r24, 0xC8	; 200
    2d54:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
    2d58:	88 ef       	ldi	r24, 0xF8	; 248
    2d5a:	0e 94 82 14 	call	0x2904	; 0x2904 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.5>
    2d5e:	8f 70       	andi	r24, 0x0F	; 15
    2d60:	38 2e       	mov	r3, r24
    2d62:	a1 2c       	mov	r10, r1
    2d64:	b1 2c       	mov	r11, r1
    2d66:	21 2c       	mov	r2, r1
    2d68:	33 20       	and	r3, r3
    2d6a:	09 f4       	brne	.+2      	; 0x2d6e <_ZN3USB11OutTransferEP6EpInfojjPh+0xd6>
    2d6c:	6b c0       	rjmp	.+214    	; 0x2e44 <_ZN3USB11OutTransferEP6EpInfojjPh+0x1ac>
    2d6e:	0e 94 1c 09 	call	0x1238	; 0x1238 <millis>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	84 19       	sub	r24, r4
    2d78:	95 09       	sbc	r25, r5
    2d7a:	a6 09       	sbc	r26, r6
    2d7c:	b7 09       	sbc	r27, r7
    2d7e:	b7 ff       	sbrs	r27, 7
    2d80:	61 c0       	rjmp	.+194    	; 0x2e44 <_ZN3USB11OutTransferEP6EpInfojjPh+0x1ac>
    2d82:	f6 e0       	ldi	r31, 0x06	; 6
    2d84:	3f 16       	cp	r3, r31
    2d86:	01 f1       	breq	.+64     	; 0x2dc8 <_ZN3USB11OutTransferEP6EpInfojjPh+0x130>
    2d88:	2e e0       	ldi	r18, 0x0E	; 14
    2d8a:	32 16       	cp	r3, r18
    2d8c:	09 f4       	brne	.+2      	; 0x2d90 <_ZN3USB11OutTransferEP6EpInfojjPh+0xf8>
    2d8e:	55 c0       	rjmp	.+170    	; 0x2e3a <_ZN3USB11OutTransferEP6EpInfojjPh+0x1a2>
    2d90:	84 e0       	ldi	r24, 0x04	; 4
    2d92:	38 12       	cpse	r3, r24
    2d94:	09 c0       	rjmp	.+18     	; 0x2da8 <_ZN3USB11OutTransferEP6EpInfojjPh+0x110>
    2d96:	ff ef       	ldi	r31, 0xFF	; 255
    2d98:	af 1a       	sub	r10, r31
    2d9a:	bf 0a       	sbc	r11, r31
    2d9c:	81 14       	cp	r8, r1
    2d9e:	91 04       	cpc	r9, r1
    2da0:	49 f1       	breq	.+82     	; 0x2df4 <_ZN3USB11OutTransferEP6EpInfojjPh+0x15c>
    2da2:	a8 14       	cp	r10, r8
    2da4:	b9 04       	cpc	r11, r9
    2da6:	31 f5       	brne	.+76     	; 0x2df4 <_ZN3USB11OutTransferEP6EpInfojjPh+0x15c>
    2da8:	88 ef       	ldi	r24, 0xF8	; 248
    2daa:	0e 94 82 14 	call	0x2904	; 0x2904 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.5>
    2dae:	85 fb       	bst	r24, 5
    2db0:	88 27       	eor	r24, r24
    2db2:	80 f9       	bld	r24, 0
    2db4:	ec 81       	ldd	r30, Y+4	; 0x04
    2db6:	fd 81       	ldd	r31, Y+5	; 0x05
    2db8:	92 81       	ldd	r25, Z+2	; 0x02
    2dba:	80 fb       	bst	r24, 0
    2dbc:	90 f9       	bld	r25, 0
    2dbe:	92 83       	std	Z+2, r25	; 0x02
    2dc0:	83 2d       	mov	r24, r3
    2dc2:	45 c0       	rjmp	.+138    	; 0x2e4e <_ZN3USB11OutTransferEP6EpInfojjPh+0x1b6>
    2dc4:	8a ed       	ldi	r24, 0xDA	; 218
    2dc6:	43 c0       	rjmp	.+134    	; 0x2e4e <_ZN3USB11OutTransferEP6EpInfojjPh+0x1b6>
    2dc8:	88 ef       	ldi	r24, 0xF8	; 248
    2dca:	0e 94 82 14 	call	0x2904	; 0x2904 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.5>
    2dce:	85 fb       	bst	r24, 5
    2dd0:	88 27       	eor	r24, r24
    2dd2:	80 f9       	bld	r24, 0
    2dd4:	91 e0       	ldi	r25, 0x01	; 1
    2dd6:	89 27       	eor	r24, r25
    2dd8:	ec 81       	ldd	r30, Y+4	; 0x04
    2dda:	fd 81       	ldd	r31, Y+5	; 0x05
    2ddc:	92 81       	ldd	r25, Z+2	; 0x02
    2dde:	80 fb       	bst	r24, 0
    2de0:	90 f9       	bld	r25, 0
    2de2:	92 83       	std	Z+2, r25	; 0x02
    2de4:	90 fd       	sbrc	r25, 0
    2de6:	02 c0       	rjmp	.+4      	; 0x2dec <_ZN3USB11OutTransferEP6EpInfojjPh+0x154>
    2de8:	60 e4       	ldi	r22, 0x40	; 64
    2dea:	01 c0       	rjmp	.+2      	; 0x2dee <_ZN3USB11OutTransferEP6EpInfojjPh+0x156>
    2dec:	60 e8       	ldi	r22, 0x80	; 128
    2dee:	88 ee       	ldi	r24, 0xE8	; 232
    2df0:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
    2df4:	60 e0       	ldi	r22, 0x00	; 0
    2df6:	88 e3       	ldi	r24, 0x38	; 56
    2df8:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
    2dfc:	f8 01       	movw	r30, r16
    2dfe:	60 81       	ld	r22, Z
    2e00:	80 e1       	ldi	r24, 0x10	; 16
    2e02:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
    2e06:	6b 81       	ldd	r22, Y+3	; 0x03
    2e08:	88 e3       	ldi	r24, 0x38	; 56
    2e0a:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
    2e0e:	ec 81       	ldd	r30, Y+4	; 0x04
    2e10:	fd 81       	ldd	r31, Y+5	; 0x05
    2e12:	60 81       	ld	r22, Z
    2e14:	60 62       	ori	r22, 0x20	; 32
    2e16:	80 ef       	ldi	r24, 0xF0	; 240
    2e18:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
    2e1c:	88 ec       	ldi	r24, 0xC8	; 200
    2e1e:	0e 94 82 14 	call	0x2904	; 0x2904 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.5>
    2e22:	87 ff       	sbrs	r24, 7
    2e24:	fb cf       	rjmp	.-10     	; 0x2e1c <_ZN3USB11OutTransferEP6EpInfojjPh+0x184>
    2e26:	60 e8       	ldi	r22, 0x80	; 128
    2e28:	88 ec       	ldi	r24, 0xC8	; 200
    2e2a:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
    2e2e:	88 ef       	ldi	r24, 0xF8	; 248
    2e30:	0e 94 82 14 	call	0x2904	; 0x2904 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.5>
    2e34:	8f 70       	andi	r24, 0x0F	; 15
    2e36:	38 2e       	mov	r3, r24
    2e38:	97 cf       	rjmp	.-210    	; 0x2d68 <_ZN3USB11OutTransferEP6EpInfojjPh+0xd0>
    2e3a:	23 94       	inc	r2
    2e3c:	23 e0       	ldi	r18, 0x03	; 3
    2e3e:	22 12       	cpse	r2, r18
    2e40:	d9 cf       	rjmp	.-78     	; 0x2df4 <_ZN3USB11OutTransferEP6EpInfojjPh+0x15c>
    2e42:	b2 cf       	rjmp	.-156    	; 0x2da8 <_ZN3USB11OutTransferEP6EpInfojjPh+0x110>
    2e44:	ce 18       	sub	r12, r14
    2e46:	df 08       	sbc	r13, r15
    2e48:	0e 0d       	add	r16, r14
    2e4a:	1f 1d       	adc	r17, r15
    2e4c:	61 cf       	rjmp	.-318    	; 0x2d10 <_ZN3USB11OutTransferEP6EpInfojjPh+0x78>
    2e4e:	0f 90       	pop	r0
    2e50:	0f 90       	pop	r0
    2e52:	0f 90       	pop	r0
    2e54:	0f 90       	pop	r0
    2e56:	0f 90       	pop	r0
    2e58:	df 91       	pop	r29
    2e5a:	cf 91       	pop	r28
    2e5c:	1f 91       	pop	r17
    2e5e:	0f 91       	pop	r16
    2e60:	ff 90       	pop	r15
    2e62:	ef 90       	pop	r14
    2e64:	df 90       	pop	r13
    2e66:	cf 90       	pop	r12
    2e68:	bf 90       	pop	r11
    2e6a:	af 90       	pop	r10
    2e6c:	9f 90       	pop	r9
    2e6e:	8f 90       	pop	r8
    2e70:	7f 90       	pop	r7
    2e72:	6f 90       	pop	r6
    2e74:	5f 90       	pop	r5
    2e76:	4f 90       	pop	r4
    2e78:	3f 90       	pop	r3
    2e7a:	2f 90       	pop	r2
    2e7c:	08 95       	ret

00002e7e <_ZN3USB10InTransferEP6EpInfojPjPhh>:
    2e7e:	2f 92       	push	r2
    2e80:	3f 92       	push	r3
    2e82:	4f 92       	push	r4
    2e84:	5f 92       	push	r5
    2e86:	6f 92       	push	r6
    2e88:	7f 92       	push	r7
    2e8a:	8f 92       	push	r8
    2e8c:	9f 92       	push	r9
    2e8e:	af 92       	push	r10
    2e90:	bf 92       	push	r11
    2e92:	cf 92       	push	r12
    2e94:	df 92       	push	r13
    2e96:	ef 92       	push	r14
    2e98:	ff 92       	push	r15
    2e9a:	0f 93       	push	r16
    2e9c:	1f 93       	push	r17
    2e9e:	cf 93       	push	r28
    2ea0:	df 93       	push	r29
    2ea2:	cd b7       	in	r28, 0x3d	; 61
    2ea4:	de b7       	in	r29, 0x3e	; 62
    2ea6:	29 97       	sbiw	r28, 0x09	; 9
    2ea8:	0f b6       	in	r0, 0x3f	; 63
    2eaa:	f8 94       	cli
    2eac:	de bf       	out	0x3e, r29	; 62
    2eae:	0f be       	out	0x3f, r0	; 63
    2eb0:	cd bf       	out	0x3d, r28	; 61
    2eb2:	1c 01       	movw	r2, r24
    2eb4:	6b 01       	movw	r12, r22
    2eb6:	5b 83       	std	Y+3, r21	; 0x03
    2eb8:	4a 83       	std	Y+2, r20	; 0x02
    2eba:	59 01       	movw	r10, r18
    2ebc:	d9 01       	movw	r26, r18
    2ebe:	6d 90       	ld	r6, X+
    2ec0:	7c 90       	ld	r7, X
    2ec2:	11 97       	sbiw	r26, 0x01	; 1
    2ec4:	fb 01       	movw	r30, r22
    2ec6:	f1 81       	ldd	r31, Z+1	; 0x01
    2ec8:	f9 83       	std	Y+1, r31	; 0x01
    2eca:	1d 92       	st	X+, r1
    2ecc:	1c 92       	st	X, r1
    2ece:	db 01       	movw	r26, r22
    2ed0:	12 96       	adiw	r26, 0x02	; 2
    2ed2:	8c 91       	ld	r24, X
    2ed4:	81 fd       	sbrc	r24, 1
    2ed6:	02 c0       	rjmp	.+4      	; 0x2edc <_ZN3USB10InTransferEP6EpInfojPjPhh+0x5e>
    2ed8:	60 e1       	ldi	r22, 0x10	; 16
    2eda:	01 c0       	rjmp	.+2      	; 0x2ede <_ZN3USB10InTransferEP6EpInfojPjPhh+0x60>
    2edc:	60 e2       	ldi	r22, 0x20	; 32
    2ede:	88 ee       	ldi	r24, 0xE8	; 232
    2ee0:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
    2ee4:	8e 2d       	mov	r24, r14
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	a0 e0       	ldi	r26, 0x00	; 0
    2eea:	b0 e0       	ldi	r27, 0x00	; 0
    2eec:	8c 83       	std	Y+4, r24	; 0x04
    2eee:	9d 83       	std	Y+5, r25	; 0x05
    2ef0:	ae 83       	std	Y+6, r26	; 0x06
    2ef2:	bf 83       	std	Y+7, r27	; 0x07
    2ef4:	46 2c       	mov	r4, r6
    2ef6:	2a 81       	ldd	r18, Y+2	; 0x02
    2ef8:	3b 81       	ldd	r19, Y+3	; 0x03
    2efa:	d6 01       	movw	r26, r12
    2efc:	4c 91       	ld	r20, X
    2efe:	60 e0       	ldi	r22, 0x00	; 0
    2f00:	c1 01       	movw	r24, r2
    2f02:	0e 94 28 15 	call	0x2a50	; 0x2a50 <_ZN3USB11dispatchPktEhhj>
    2f06:	f8 2e       	mov	r15, r24
    2f08:	b6 e0       	ldi	r27, 0x06	; 6
    2f0a:	8b 13       	cpse	r24, r27
    2f0c:	15 c0       	rjmp	.+42     	; 0x2f38 <_ZN3USB10InTransferEP6EpInfojPjPhh+0xba>
    2f0e:	88 ef       	ldi	r24, 0xF8	; 248
    2f10:	0e 94 82 14 	call	0x2904	; 0x2904 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.5>
    2f14:	82 95       	swap	r24
    2f16:	81 70       	andi	r24, 0x01	; 1
    2f18:	91 e0       	ldi	r25, 0x01	; 1
    2f1a:	89 27       	eor	r24, r25
    2f1c:	f6 01       	movw	r30, r12
    2f1e:	92 81       	ldd	r25, Z+2	; 0x02
    2f20:	80 fb       	bst	r24, 0
    2f22:	91 f9       	bld	r25, 1
    2f24:	92 83       	std	Z+2, r25	; 0x02
    2f26:	91 fd       	sbrc	r25, 1
    2f28:	02 c0       	rjmp	.+4      	; 0x2f2e <_ZN3USB10InTransferEP6EpInfojPjPhh+0xb0>
    2f2a:	60 e1       	ldi	r22, 0x10	; 16
    2f2c:	01 c0       	rjmp	.+2      	; 0x2f30 <_ZN3USB10InTransferEP6EpInfojPjPhh+0xb2>
    2f2e:	60 e2       	ldi	r22, 0x20	; 32
    2f30:	88 ee       	ldi	r24, 0xE8	; 232
    2f32:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
    2f36:	df cf       	rjmp	.-66     	; 0x2ef6 <_ZN3USB10InTransferEP6EpInfojPjPhh+0x78>
    2f38:	81 11       	cpse	r24, r1
    2f3a:	6e c0       	rjmp	.+220    	; 0x3018 <_ZN3USB10InTransferEP6EpInfojPjPhh+0x19a>
    2f3c:	88 ec       	ldi	r24, 0xC8	; 200
    2f3e:	0e 94 82 14 	call	0x2904	; 0x2904 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.5>
    2f42:	82 ff       	sbrs	r24, 2
    2f44:	67 c0       	rjmp	.+206    	; 0x3014 <_ZN3USB10InTransferEP6EpInfojPjPhh+0x196>
    2f46:	80 e3       	ldi	r24, 0x30	; 48
    2f48:	0e 94 82 14 	call	0x2904	; 0x2904 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.5>
    2f4c:	58 2e       	mov	r5, r24
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	68 16       	cp	r6, r24
    2f52:	79 06       	cpc	r7, r25
    2f54:	08 f4       	brcc	.+2      	; 0x2f58 <_ZN3USB10InTransferEP6EpInfojPjPhh+0xda>
    2f56:	54 2c       	mov	r5, r4
    2f58:	d5 01       	movw	r26, r10
    2f5a:	8d 91       	ld	r24, X+
    2f5c:	9c 91       	ld	r25, X
    2f5e:	f3 01       	movw	r30, r6
    2f60:	e8 1b       	sub	r30, r24
    2f62:	f9 0b       	sbc	r31, r25
    2f64:	f9 87       	std	Y+9, r31	; 0x09
    2f66:	e8 87       	std	Y+8, r30	; 0x08
    2f68:	f7 ff       	sbrs	r31, 7
    2f6a:	02 c0       	rjmp	.+4      	; 0x2f70 <_ZN3USB10InTransferEP6EpInfojPjPhh+0xf2>
    2f6c:	19 86       	std	Y+9, r1	; 0x09
    2f6e:	18 86       	std	Y+8, r1	; 0x08
    2f70:	85 2c       	mov	r8, r5
    2f72:	91 2c       	mov	r9, r1
    2f74:	28 85       	ldd	r18, Y+8	; 0x08
    2f76:	39 85       	ldd	r19, Y+9	; 0x09
    2f78:	82 16       	cp	r8, r18
    2f7a:	93 06       	cpc	r9, r19
    2f7c:	14 f4       	brge	.+4      	; 0x2f82 <_ZN3USB10InTransferEP6EpInfojPjPhh+0x104>
    2f7e:	99 86       	std	Y+9, r9	; 0x09
    2f80:	88 86       	std	Y+8, r8	; 0x08
    2f82:	80 e5       	ldi	r24, 0x50	; 80
    2f84:	91 e0       	ldi	r25, 0x01	; 1
    2f86:	0e 94 fe 04 	call	0x9fc	; 0x9fc <_ZN8SPIClass16beginTransactionE11SPISettings>
    2f8a:	0e 94 80 14 	call	0x2900	; 0x2900 <_ZN4TPinI5PortbLh2EE5ClearEv>
    2f8e:	88 e0       	ldi	r24, 0x08	; 8
    2f90:	0e 94 bc 13 	call	0x2778	; 0x2778 <_ZN8SPIClass8transferEh>
    2f94:	48 85       	ldd	r20, Y+8	; 0x08
    2f96:	59 85       	ldd	r21, Y+9	; 0x09
    2f98:	60 e0       	ldi	r22, 0x00	; 0
    2f9a:	70 e0       	ldi	r23, 0x00	; 0
    2f9c:	c8 01       	movw	r24, r16
    2f9e:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <memset>
    2fa2:	88 85       	ldd	r24, Y+8	; 0x08
    2fa4:	99 85       	ldd	r25, Y+9	; 0x09
    2fa6:	00 97       	sbiw	r24, 0x00	; 0
    2fa8:	21 f0       	breq	.+8      	; 0x2fb2 <_ZN3USB10InTransferEP6EpInfojPjPhh+0x134>
    2faa:	bc 01       	movw	r22, r24
    2fac:	c8 01       	movw	r24, r16
    2fae:	0e 94 20 13 	call	0x2640	; 0x2640 <_ZN8SPIClass8transferEPvj.part.0>
    2fb2:	a8 85       	ldd	r26, Y+8	; 0x08
    2fb4:	b9 85       	ldd	r27, Y+9	; 0x09
    2fb6:	0a 0f       	add	r16, r26
    2fb8:	1b 1f       	adc	r17, r27
    2fba:	0e 94 28 05 	call	0xa50	; 0xa50 <_ZN4TPinI5PortbLh2EE3SetEv>
    2fbe:	0e 94 c3 13 	call	0x2786	; 0x2786 <_ZN8SPIClass14endTransactionEv>
    2fc2:	64 e0       	ldi	r22, 0x04	; 4
    2fc4:	88 ec       	ldi	r24, 0xC8	; 200
    2fc6:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
    2fca:	f5 01       	movw	r30, r10
    2fcc:	80 81       	ld	r24, Z
    2fce:	91 81       	ldd	r25, Z+1	; 0x01
    2fd0:	88 0e       	add	r8, r24
    2fd2:	99 1e       	adc	r9, r25
    2fd4:	91 82       	std	Z+1, r9	; 0x01
    2fd6:	80 82       	st	Z, r8
    2fd8:	f9 81       	ldd	r31, Y+1	; 0x01
    2fda:	5f 16       	cp	r5, r31
    2fdc:	18 f0       	brcs	.+6      	; 0x2fe4 <_ZN3USB10InTransferEP6EpInfojPjPhh+0x166>
    2fde:	86 14       	cp	r8, r6
    2fe0:	97 04       	cpc	r9, r7
    2fe2:	70 f0       	brcs	.+28     	; 0x3000 <_ZN3USB10InTransferEP6EpInfojPjPhh+0x182>
    2fe4:	88 ef       	ldi	r24, 0xF8	; 248
    2fe6:	0e 94 82 14 	call	0x2904	; 0x2904 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.5>
    2fea:	82 95       	swap	r24
    2fec:	81 70       	andi	r24, 0x01	; 1
    2fee:	d6 01       	movw	r26, r12
    2ff0:	12 96       	adiw	r26, 0x02	; 2
    2ff2:	9c 91       	ld	r25, X
    2ff4:	12 97       	sbiw	r26, 0x02	; 2
    2ff6:	80 fb       	bst	r24, 0
    2ff8:	91 f9       	bld	r25, 1
    2ffa:	12 96       	adiw	r26, 0x02	; 2
    2ffc:	9c 93       	st	X, r25
    2ffe:	0c c0       	rjmp	.+24     	; 0x3018 <_ZN3USB10InTransferEP6EpInfojPjPhh+0x19a>
    3000:	ee 20       	and	r14, r14
    3002:	09 f4       	brne	.+2      	; 0x3006 <_ZN3USB10InTransferEP6EpInfojPjPhh+0x188>
    3004:	78 cf       	rjmp	.-272    	; 0x2ef6 <_ZN3USB10InTransferEP6EpInfojPjPhh+0x78>
    3006:	6c 81       	ldd	r22, Y+4	; 0x04
    3008:	7d 81       	ldd	r23, Y+5	; 0x05
    300a:	8e 81       	ldd	r24, Y+6	; 0x06
    300c:	9f 81       	ldd	r25, Y+7	; 0x07
    300e:	0e 94 4d 09 	call	0x129a	; 0x129a <delay>
    3012:	71 cf       	rjmp	.-286    	; 0x2ef6 <_ZN3USB10InTransferEP6EpInfojPjPhh+0x78>
    3014:	80 ef       	ldi	r24, 0xF0	; 240
    3016:	f8 2e       	mov	r15, r24
    3018:	8f 2d       	mov	r24, r15
    301a:	29 96       	adiw	r28, 0x09	; 9
    301c:	0f b6       	in	r0, 0x3f	; 63
    301e:	f8 94       	cli
    3020:	de bf       	out	0x3e, r29	; 62
    3022:	0f be       	out	0x3f, r0	; 63
    3024:	cd bf       	out	0x3d, r28	; 61
    3026:	df 91       	pop	r29
    3028:	cf 91       	pop	r28
    302a:	1f 91       	pop	r17
    302c:	0f 91       	pop	r16
    302e:	ff 90       	pop	r15
    3030:	ef 90       	pop	r14
    3032:	df 90       	pop	r13
    3034:	cf 90       	pop	r12
    3036:	bf 90       	pop	r11
    3038:	af 90       	pop	r10
    303a:	9f 90       	pop	r9
    303c:	8f 90       	pop	r8
    303e:	7f 90       	pop	r7
    3040:	6f 90       	pop	r6
    3042:	5f 90       	pop	r5
    3044:	4f 90       	pop	r4
    3046:	3f 90       	pop	r3
    3048:	2f 90       	pop	r2
    304a:	08 95       	ret

0000304c <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser>:
    304c:	2f 92       	push	r2
    304e:	3f 92       	push	r3
    3050:	4f 92       	push	r4
    3052:	5f 92       	push	r5
    3054:	6f 92       	push	r6
    3056:	7f 92       	push	r7
    3058:	8f 92       	push	r8
    305a:	9f 92       	push	r9
    305c:	af 92       	push	r10
    305e:	bf 92       	push	r11
    3060:	cf 92       	push	r12
    3062:	df 92       	push	r13
    3064:	ef 92       	push	r14
    3066:	ff 92       	push	r15
    3068:	0f 93       	push	r16
    306a:	1f 93       	push	r17
    306c:	cf 93       	push	r28
    306e:	df 93       	push	r29
    3070:	cd b7       	in	r28, 0x3d	; 61
    3072:	de b7       	in	r29, 0x3e	; 62
    3074:	61 97       	sbiw	r28, 0x11	; 17
    3076:	0f b6       	in	r0, 0x3f	; 63
    3078:	f8 94       	cli
    307a:	de bf       	out	0x3e, r29	; 62
    307c:	0f be       	out	0x3f, r0	; 63
    307e:	cd bf       	out	0x3d, r28	; 61
    3080:	3c 01       	movw	r6, r24
    3082:	f4 2e       	mov	r15, r20
    3084:	32 2e       	mov	r3, r18
    3086:	20 2e       	mov	r2, r16
    3088:	c9 8a       	std	Y+17, r12	; 0x11
    308a:	4e a0       	ldd	r4, Y+38	; 0x26
    308c:	5f a0       	ldd	r5, Y+39	; 0x27
    308e:	c8 a4       	ldd	r12, Y+40	; 0x28
    3090:	d9 a4       	ldd	r13, Y+41	; 0x29
    3092:	18 8a       	std	Y+16, r1	; 0x10
    3094:	1f 86       	std	Y+15, r1	; 0x0f
    3096:	1e 86       	std	Y+14, r1	; 0x0e
    3098:	1d 86       	std	Y+13, r1	; 0x0d
    309a:	8e 01       	movw	r16, r28
    309c:	03 5f       	subi	r16, 0xF3	; 243
    309e:	1f 4f       	sbci	r17, 0xFF	; 255
    30a0:	9e 01       	movw	r18, r28
    30a2:	21 5f       	subi	r18, 0xF1	; 241
    30a4:	3f 4f       	sbci	r19, 0xFF	; 255
    30a6:	0e 94 bb 14 	call	0x2976	; 0x2976 <_ZN3USB10SetAddressEhhPP6EpInfoPj>
    30aa:	81 11       	cpse	r24, r1
    30ac:	96 c0       	rjmp	.+300    	; 0x31da <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x18e>
    30ae:	39 82       	std	Y+1, r3	; 0x01
    30b0:	2a 82       	std	Y+2, r2	; 0x02
    30b2:	eb 82       	std	Y+3, r14	; 0x03
    30b4:	89 89       	ldd	r24, Y+17	; 0x11
    30b6:	8c 83       	std	Y+4, r24	; 0x04
    30b8:	be 82       	std	Y+6, r11	; 0x06
    30ba:	ad 82       	std	Y+5, r10	; 0x05
    30bc:	98 86       	std	Y+8, r9	; 0x08
    30be:	8f 82       	std	Y+7, r8	; 0x07
    30c0:	ae 01       	movw	r20, r28
    30c2:	4f 5f       	subi	r20, 0xFF	; 255
    30c4:	5f 4f       	sbci	r21, 0xFF	; 255
    30c6:	68 e0       	ldi	r22, 0x08	; 8
    30c8:	80 e2       	ldi	r24, 0x20	; 32
    30ca:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE7bytesWrEhhPh.isra.7>
    30ce:	2d 85       	ldd	r18, Y+13	; 0x0d
    30d0:	3e 85       	ldd	r19, Y+14	; 0x0e
    30d2:	4f 2d       	mov	r20, r15
    30d4:	60 e1       	ldi	r22, 0x10	; 16
    30d6:	c3 01       	movw	r24, r6
    30d8:	0e 94 28 15 	call	0x2a50	; 0x2a50 <_ZN3USB11dispatchPktEhhj>
    30dc:	e8 2e       	mov	r14, r24
    30de:	81 11       	cpse	r24, r1
    30e0:	78 c0       	rjmp	.+240    	; 0x31d2 <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x186>
    30e2:	93 2d       	mov	r25, r3
    30e4:	90 78       	andi	r25, 0x80	; 128
    30e6:	39 2e       	mov	r3, r25
    30e8:	c1 14       	cp	r12, r1
    30ea:	d1 04       	cpc	r13, r1
    30ec:	09 f4       	brne	.+2      	; 0x30f0 <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0xa4>
    30ee:	62 c0       	rjmp	.+196    	; 0x31b4 <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x168>
    30f0:	ef 85       	ldd	r30, Y+15	; 0x0f
    30f2:	f8 89       	ldd	r31, Y+16	; 0x10
    30f4:	82 81       	ldd	r24, Z+2	; 0x02
    30f6:	99 23       	and	r25, r25
    30f8:	09 f4       	brne	.+2      	; 0x30fc <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0xb0>
    30fa:	4d c0       	rjmp	.+154    	; 0x3196 <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x14a>
    30fc:	82 60       	ori	r24, 0x02	; 2
    30fe:	82 83       	std	Z+2, r24	; 0x02
    3100:	54 01       	movw	r10, r8
    3102:	22 24       	eor	r2, r2
    3104:	23 94       	inc	r2
    3106:	a1 14       	cp	r10, r1
    3108:	b1 04       	cpc	r11, r1
    310a:	09 f4       	brne	.+2      	; 0x310e <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0xc2>
    310c:	58 c0       	rjmp	.+176    	; 0x31be <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x172>
    310e:	5c 86       	std	Y+12, r5	; 0x0c
    3110:	4b 86       	std	Y+11, r4	; 0x0b
    3112:	4d 85       	ldd	r20, Y+13	; 0x0d
    3114:	5e 85       	ldd	r21, Y+14	; 0x0e
    3116:	6f 85       	ldd	r22, Y+15	; 0x0f
    3118:	78 89       	ldd	r23, Y+16	; 0x10
    311a:	e1 2c       	mov	r14, r1
    311c:	86 01       	movw	r16, r12
    311e:	9e 01       	movw	r18, r28
    3120:	25 5f       	subi	r18, 0xF5	; 245
    3122:	3f 4f       	sbci	r19, 0xFF	; 255
    3124:	c3 01       	movw	r24, r6
    3126:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <_ZN3USB10InTransferEP6EpInfojPjPhh>
    312a:	e8 2e       	mov	r14, r24
    312c:	a6 e0       	ldi	r26, 0x06	; 6
    312e:	8a 13       	cpse	r24, r26
    3130:	0f c0       	rjmp	.+30     	; 0x3150 <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x104>
    3132:	0f 85       	ldd	r16, Y+15	; 0x0f
    3134:	18 89       	ldd	r17, Y+16	; 0x10
    3136:	88 ef       	ldi	r24, 0xF8	; 248
    3138:	0e 94 82 14 	call	0x2904	; 0x2904 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.5>
    313c:	85 fb       	bst	r24, 5
    313e:	88 27       	eor	r24, r24
    3140:	80 f9       	bld	r24, 0
    3142:	82 25       	eor	r24, r2
    3144:	f8 01       	movw	r30, r16
    3146:	92 81       	ldd	r25, Z+2	; 0x02
    3148:	80 fb       	bst	r24, 0
    314a:	91 f9       	bld	r25, 1
    314c:	92 83       	std	Z+2, r25	; 0x02
    314e:	db cf       	rjmp	.-74     	; 0x3106 <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0xba>
    3150:	81 11       	cpse	r24, r1
    3152:	3f c0       	rjmp	.+126    	; 0x31d2 <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x186>
    3154:	8a a5       	ldd	r24, Y+42	; 0x2a
    3156:	9b a5       	ldd	r25, Y+43	; 0x2b
    3158:	00 97       	sbiw	r24, 0x00	; 0
    315a:	a1 f0       	breq	.+40     	; 0x3184 <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x138>
    315c:	dc 01       	movw	r26, r24
    315e:	ed 91       	ld	r30, X+
    3160:	fc 91       	ld	r31, X
    3162:	11 97       	sbiw	r26, 0x01	; 1
    3164:	01 90       	ld	r0, Z+
    3166:	f0 81       	ld	r31, Z
    3168:	e0 2d       	mov	r30, r0
    316a:	c4 01       	movw	r24, r8
    316c:	8a 19       	sub	r24, r10
    316e:	9b 09       	sbc	r25, r11
    3170:	9a 87       	std	Y+10, r25	; 0x0a
    3172:	89 87       	std	Y+9, r24	; 0x09
    3174:	6b 85       	ldd	r22, Y+11	; 0x0b
    3176:	7c 85       	ldd	r23, Y+12	; 0x0c
    3178:	9e 01       	movw	r18, r28
    317a:	27 5f       	subi	r18, 0xF7	; 247
    317c:	3f 4f       	sbci	r19, 0xFF	; 255
    317e:	a6 01       	movw	r20, r12
    3180:	cd 01       	movw	r24, r26
    3182:	09 95       	icall
    3184:	8b 85       	ldd	r24, Y+11	; 0x0b
    3186:	9c 85       	ldd	r25, Y+12	; 0x0c
    3188:	a8 1a       	sub	r10, r24
    318a:	b9 0a       	sbc	r11, r25
    318c:	84 15       	cp	r24, r4
    318e:	95 05       	cpc	r25, r5
    3190:	08 f0       	brcs	.+2      	; 0x3194 <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x148>
    3192:	b9 cf       	rjmp	.-142    	; 0x3106 <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0xba>
    3194:	0f c0       	rjmp	.+30     	; 0x31b4 <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x168>
    3196:	81 60       	ori	r24, 0x01	; 1
    3198:	82 83       	std	Z+2, r24	; 0x02
    319a:	4d 85       	ldd	r20, Y+13	; 0x0d
    319c:	5e 85       	ldd	r21, Y+14	; 0x0e
    319e:	86 01       	movw	r16, r12
    31a0:	92 01       	movw	r18, r4
    31a2:	bf 01       	movw	r22, r30
    31a4:	c3 01       	movw	r24, r6
    31a6:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <_ZN3USB11OutTransferEP6EpInfojjPh>
    31aa:	81 11       	cpse	r24, r1
    31ac:	16 c0       	rjmp	.+44     	; 0x31da <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x18e>
    31ae:	2d 85       	ldd	r18, Y+13	; 0x0d
    31b0:	3e 85       	ldd	r19, Y+14	; 0x0e
    31b2:	11 c0       	rjmp	.+34     	; 0x31d6 <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x18a>
    31b4:	2d 85       	ldd	r18, Y+13	; 0x0d
    31b6:	3e 85       	ldd	r19, Y+14	; 0x0e
    31b8:	31 10       	cpse	r3, r1
    31ba:	05 c0       	rjmp	.+10     	; 0x31c6 <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x17a>
    31bc:	0c c0       	rjmp	.+24     	; 0x31d6 <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x18a>
    31be:	e1 10       	cpse	r14, r1
    31c0:	08 c0       	rjmp	.+16     	; 0x31d2 <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x186>
    31c2:	2d 85       	ldd	r18, Y+13	; 0x0d
    31c4:	3e 85       	ldd	r19, Y+14	; 0x0e
    31c6:	60 ea       	ldi	r22, 0xA0	; 160
    31c8:	4f 2d       	mov	r20, r15
    31ca:	c3 01       	movw	r24, r6
    31cc:	0e 94 28 15 	call	0x2a50	; 0x2a50 <_ZN3USB11dispatchPktEhhj>
    31d0:	04 c0       	rjmp	.+8      	; 0x31da <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x18e>
    31d2:	8e 2d       	mov	r24, r14
    31d4:	02 c0       	rjmp	.+4      	; 0x31da <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x18e>
    31d6:	60 e8       	ldi	r22, 0x80	; 128
    31d8:	f7 cf       	rjmp	.-18     	; 0x31c8 <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x17c>
    31da:	61 96       	adiw	r28, 0x11	; 17
    31dc:	0f b6       	in	r0, 0x3f	; 63
    31de:	f8 94       	cli
    31e0:	de bf       	out	0x3e, r29	; 62
    31e2:	0f be       	out	0x3f, r0	; 63
    31e4:	cd bf       	out	0x3d, r28	; 61
    31e6:	df 91       	pop	r29
    31e8:	cf 91       	pop	r28
    31ea:	1f 91       	pop	r17
    31ec:	0f 91       	pop	r16
    31ee:	ff 90       	pop	r15
    31f0:	ef 90       	pop	r14
    31f2:	df 90       	pop	r13
    31f4:	cf 90       	pop	r12
    31f6:	bf 90       	pop	r11
    31f8:	af 90       	pop	r10
    31fa:	9f 90       	pop	r9
    31fc:	8f 90       	pop	r8
    31fe:	7f 90       	pop	r7
    3200:	6f 90       	pop	r6
    3202:	5f 90       	pop	r5
    3204:	4f 90       	pop	r4
    3206:	3f 90       	pop	r3
    3208:	2f 90       	pop	r2
    320a:	08 95       	ret

0000320c <_ZN3USB11getDevDescrEhhjPh>:
    320c:	8f 92       	push	r8
    320e:	9f 92       	push	r9
    3210:	af 92       	push	r10
    3212:	bf 92       	push	r11
    3214:	cf 92       	push	r12
    3216:	ef 92       	push	r14
    3218:	0f 93       	push	r16
    321a:	1f 93       	push	r17
    321c:	1f 92       	push	r1
    321e:	1f 92       	push	r1
    3220:	1f 93       	push	r17
    3222:	0f 93       	push	r16
    3224:	3f 93       	push	r19
    3226:	2f 93       	push	r18
    3228:	49 01       	movw	r8, r18
    322a:	a1 2c       	mov	r10, r1
    322c:	b1 2c       	mov	r11, r1
    322e:	cc 24       	eor	r12, r12
    3230:	c3 94       	inc	r12
    3232:	e1 2c       	mov	r14, r1
    3234:	06 e0       	ldi	r16, 0x06	; 6
    3236:	20 e8       	ldi	r18, 0x80	; 128
    3238:	0e 94 26 18 	call	0x304c	; 0x304c <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser>
    323c:	0f 90       	pop	r0
    323e:	0f 90       	pop	r0
    3240:	0f 90       	pop	r0
    3242:	0f 90       	pop	r0
    3244:	0f 90       	pop	r0
    3246:	0f 90       	pop	r0
    3248:	1f 91       	pop	r17
    324a:	0f 91       	pop	r16
    324c:	ef 90       	pop	r14
    324e:	cf 90       	pop	r12
    3250:	bf 90       	pop	r11
    3252:	af 90       	pop	r10
    3254:	9f 90       	pop	r9
    3256:	8f 90       	pop	r8
    3258:	08 95       	ret

0000325a <_ZN3USB12getConfDescrEhhjhPh>:
    325a:	8f 92       	push	r8
    325c:	9f 92       	push	r9
    325e:	af 92       	push	r10
    3260:	bf 92       	push	r11
    3262:	cf 92       	push	r12
    3264:	ef 92       	push	r14
    3266:	ff 92       	push	r15
    3268:	0f 93       	push	r16
    326a:	1f 92       	push	r1
    326c:	1f 92       	push	r1
    326e:	ff 92       	push	r15
    3270:	ef 92       	push	r14
    3272:	3f 93       	push	r19
    3274:	2f 93       	push	r18
    3276:	49 01       	movw	r8, r18
    3278:	a1 2c       	mov	r10, r1
    327a:	b1 2c       	mov	r11, r1
    327c:	22 e0       	ldi	r18, 0x02	; 2
    327e:	c2 2e       	mov	r12, r18
    3280:	e0 2e       	mov	r14, r16
    3282:	06 e0       	ldi	r16, 0x06	; 6
    3284:	20 e8       	ldi	r18, 0x80	; 128
    3286:	0e 94 26 18 	call	0x304c	; 0x304c <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser>
    328a:	0f 90       	pop	r0
    328c:	0f 90       	pop	r0
    328e:	0f 90       	pop	r0
    3290:	0f 90       	pop	r0
    3292:	0f 90       	pop	r0
    3294:	0f 90       	pop	r0
    3296:	0f 91       	pop	r16
    3298:	ff 90       	pop	r15
    329a:	ef 90       	pop	r14
    329c:	cf 90       	pop	r12
    329e:	bf 90       	pop	r11
    32a0:	af 90       	pop	r10
    32a2:	9f 90       	pop	r9
    32a4:	8f 90       	pop	r8
    32a6:	08 95       	ret

000032a8 <_ZN3USB12getConfDescrEhhhP13USBReadParser>:
    32a8:	4f 92       	push	r4
    32aa:	5f 92       	push	r5
    32ac:	6f 92       	push	r6
    32ae:	7f 92       	push	r7
    32b0:	8f 92       	push	r8
    32b2:	9f 92       	push	r9
    32b4:	af 92       	push	r10
    32b6:	bf 92       	push	r11
    32b8:	cf 92       	push	r12
    32ba:	df 92       	push	r13
    32bc:	ef 92       	push	r14
    32be:	ff 92       	push	r15
    32c0:	0f 93       	push	r16
    32c2:	1f 93       	push	r17
    32c4:	cf 93       	push	r28
    32c6:	df 93       	push	r29
    32c8:	cd b7       	in	r28, 0x3d	; 61
    32ca:	de b7       	in	r29, 0x3e	; 62
    32cc:	c0 54       	subi	r28, 0x40	; 64
    32ce:	d1 09       	sbc	r29, r1
    32d0:	0f b6       	in	r0, 0x3f	; 63
    32d2:	f8 94       	cli
    32d4:	de bf       	out	0x3e, r29	; 62
    32d6:	0f be       	out	0x3f, r0	; 63
    32d8:	cd bf       	out	0x3d, r28	; 61
    32da:	3c 01       	movw	r6, r24
    32dc:	d6 2e       	mov	r13, r22
    32de:	54 2e       	mov	r5, r20
    32e0:	42 2e       	mov	r4, r18
    32e2:	c0 2e       	mov	r12, r16
    32e4:	ce 01       	movw	r24, r28
    32e6:	01 96       	adiw	r24, 0x01	; 1
    32e8:	5c 01       	movw	r10, r24
    32ea:	7c 01       	movw	r14, r24
    32ec:	02 2f       	mov	r16, r18
    32ee:	29 e0       	ldi	r18, 0x09	; 9
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	c3 01       	movw	r24, r6
    32f4:	0e 94 2d 19 	call	0x325a	; 0x325a <_ZN3USB12getConfDescrEhhjhPh>
    32f8:	81 11       	cpse	r24, r1
    32fa:	1b c0       	rjmp	.+54     	; 0x3332 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x8a>
    32fc:	8b 80       	ldd	r8, Y+3	; 0x03
    32fe:	9c 80       	ldd	r9, Y+4	; 0x04
    3300:	1f 93       	push	r17
    3302:	cf 92       	push	r12
    3304:	bf 92       	push	r11
    3306:	af 92       	push	r10
    3308:	1f 92       	push	r1
    330a:	80 e4       	ldi	r24, 0x40	; 64
    330c:	8f 93       	push	r24
    330e:	a1 2c       	mov	r10, r1
    3310:	b1 2c       	mov	r11, r1
    3312:	82 e0       	ldi	r24, 0x02	; 2
    3314:	c8 2e       	mov	r12, r24
    3316:	e4 2c       	mov	r14, r4
    3318:	06 e0       	ldi	r16, 0x06	; 6
    331a:	20 e8       	ldi	r18, 0x80	; 128
    331c:	45 2d       	mov	r20, r5
    331e:	6d 2d       	mov	r22, r13
    3320:	c3 01       	movw	r24, r6
    3322:	0e 94 26 18 	call	0x304c	; 0x304c <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser>
    3326:	0f 90       	pop	r0
    3328:	0f 90       	pop	r0
    332a:	0f 90       	pop	r0
    332c:	0f 90       	pop	r0
    332e:	0f 90       	pop	r0
    3330:	0f 90       	pop	r0
    3332:	c0 5c       	subi	r28, 0xC0	; 192
    3334:	df 4f       	sbci	r29, 0xFF	; 255
    3336:	0f b6       	in	r0, 0x3f	; 63
    3338:	f8 94       	cli
    333a:	de bf       	out	0x3e, r29	; 62
    333c:	0f be       	out	0x3f, r0	; 63
    333e:	cd bf       	out	0x3d, r28	; 61
    3340:	df 91       	pop	r29
    3342:	cf 91       	pop	r28
    3344:	1f 91       	pop	r17
    3346:	0f 91       	pop	r16
    3348:	ff 90       	pop	r15
    334a:	ef 90       	pop	r14
    334c:	df 90       	pop	r13
    334e:	cf 90       	pop	r12
    3350:	bf 90       	pop	r11
    3352:	af 90       	pop	r10
    3354:	9f 90       	pop	r9
    3356:	8f 90       	pop	r8
    3358:	7f 90       	pop	r7
    335a:	6f 90       	pop	r6
    335c:	5f 90       	pop	r5
    335e:	4f 90       	pop	r4
    3360:	08 95       	ret

00003362 <_ZN3USB7setAddrEhhh>:
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
    3362:	8f 92       	push	r8
    3364:	9f 92       	push	r9
    3366:	af 92       	push	r10
    3368:	bf 92       	push	r11
    336a:	cf 92       	push	r12
    336c:	ef 92       	push	r14
    336e:	0f 93       	push	r16
    3370:	cf 93       	push	r28
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
    3372:	1f 92       	push	r1
    3374:	1f 92       	push	r1
    3376:	1f 92       	push	r1
    3378:	1f 92       	push	r1
    337a:	1f 92       	push	r1
    337c:	1f 92       	push	r1
    337e:	81 2c       	mov	r8, r1
    3380:	91 2c       	mov	r9, r1
    3382:	a1 2c       	mov	r10, r1
    3384:	b1 2c       	mov	r11, r1
    3386:	c1 2c       	mov	r12, r1
    3388:	e2 2e       	mov	r14, r18
    338a:	05 e0       	ldi	r16, 0x05	; 5
    338c:	20 e0       	ldi	r18, 0x00	; 0
    338e:	0e 94 26 18 	call	0x304c	; 0x304c <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser>
    3392:	c8 2f       	mov	r28, r24
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
    3394:	6c e2       	ldi	r22, 0x2C	; 44
    3396:	71 e0       	ldi	r23, 0x01	; 1
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	0e 94 4d 09 	call	0x129a	; 0x129a <delay>
        return rcode;
    33a0:	0f 90       	pop	r0
    33a2:	0f 90       	pop	r0
    33a4:	0f 90       	pop	r0
    33a6:	0f 90       	pop	r0
    33a8:	0f 90       	pop	r0
    33aa:	0f 90       	pop	r0
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
    33ac:	8c 2f       	mov	r24, r28
    33ae:	cf 91       	pop	r28
    33b0:	0f 91       	pop	r16
    33b2:	ef 90       	pop	r14
    33b4:	cf 90       	pop	r12
    33b6:	bf 90       	pop	r11
    33b8:	af 90       	pop	r10
    33ba:	9f 90       	pop	r9
    33bc:	8f 90       	pop	r8
    33be:	08 95       	ret

000033c0 <_ZN3USB17DefaultAddressingEhhb>:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
    33c0:	0f 93       	push	r16
    33c2:	1f 93       	push	r17
    33c4:	cf 93       	push	r28
    33c6:	df 93       	push	r29
        UsbDevice *p0 = NULL, *p = NULL;

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);

        if(!p0)
    33c8:	8a 3f       	cpi	r24, 0xFA	; 250
    33ca:	3f ef       	ldi	r19, 0xFF	; 255
    33cc:	93 07       	cpc	r25, r19
    33ce:	11 f4       	brne	.+4      	; 0x33d4 <_ZN3USB17DefaultAddressingEhhb+0x14>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    33d0:	86 ed       	ldi	r24, 0xD6	; 214
    33d2:	2d c0       	rjmp	.+90     	; 0x342e <_ZN3USB17DefaultAddressingEhhb+0x6e>

        if(!p0->epinfo)
    33d4:	dc 01       	movw	r26, r24
    33d6:	16 96       	adiw	r26, 0x06	; 6
    33d8:	ed 91       	ld	r30, X+
    33da:	fc 91       	ld	r31, X
    33dc:	17 97       	sbiw	r26, 0x07	; 7
    33de:	ef 2b       	or	r30, r31
    33e0:	09 f1       	breq	.+66     	; 0x3424 <_ZN3USB17DefaultAddressingEhhb+0x64>
    33e2:	12 2f       	mov	r17, r18
    33e4:	24 2f       	mov	r18, r20
    33e6:	ec 01       	movw	r28, r24
                return USB_ERROR_EPINFO_IS_NULL;

        p0->lowspeed = (lowspeed) ? true : false;
    33e8:	1a 87       	std	Y+10, r17	; 0x0a

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
    33ea:	40 e0       	ldi	r20, 0x00	; 0
    33ec:	0e 94 c7 12 	call	0x258e	; 0x258e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
    33f0:	08 2f       	mov	r16, r24

        if(!bAddress)
    33f2:	88 23       	and	r24, r24
    33f4:	c9 f0       	breq	.+50     	; 0x3428 <_ZN3USB17DefaultAddressingEhhb+0x68>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;

        p = addrPool.GetUsbDevicePtr(bAddress);
    33f6:	68 2f       	mov	r22, r24
    33f8:	ce 01       	movw	r24, r28
    33fa:	0e 94 3a 13 	call	0x2674	; 0x2674 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>

        if(!p)
    33fe:	00 97       	sbiw	r24, 0x00	; 0
    3400:	39 f3       	breq	.-50     	; 0x33d0 <_ZN3USB17DefaultAddressingEhhb+0x10>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;

        p->lowspeed = lowspeed;
    3402:	fc 01       	movw	r30, r24
    3404:	14 83       	std	Z+4, r17	; 0x04

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
    3406:	20 2f       	mov	r18, r16
    3408:	40 e0       	ldi	r20, 0x00	; 0
    340a:	60 e0       	ldi	r22, 0x00	; 0
    340c:	ce 01       	movw	r24, r28
    340e:	0e 94 b1 19 	call	0x3362	; 0x3362 <_ZN3USB7setAddrEhhh>
    3412:	18 2f       	mov	r17, r24

        if(rcode) {
    3414:	88 23       	and	r24, r24
    3416:	51 f0       	breq	.+20     	; 0x342c <_ZN3USB17DefaultAddressingEhhb+0x6c>
                addrPool.FreeAddress(bAddress);
    3418:	60 2f       	mov	r22, r16
    341a:	ce 01       	movw	r24, r28
    341c:	0e 94 9a 13 	call	0x2734	; 0x2734 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
    3420:	81 2f       	mov	r24, r17
    3422:	05 c0       	rjmp	.+10     	; 0x342e <_ZN3USB17DefaultAddressingEhhb+0x6e>

        if(!p0)
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;

        if(!p0->epinfo)
                return USB_ERROR_EPINFO_IS_NULL;
    3424:	87 ed       	ldi	r24, 0xD7	; 215
    3426:	03 c0       	rjmp	.+6      	; 0x342e <_ZN3USB17DefaultAddressingEhhb+0x6e>

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);

        if(!bAddress)
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    3428:	84 ed       	ldi	r24, 0xD4	; 212
    342a:	01 c0       	rjmp	.+2      	; 0x342e <_ZN3USB17DefaultAddressingEhhb+0x6e>
        if(rcode) {
                addrPool.FreeAddress(bAddress);
                bAddress = 0;
                return rcode;
        }
        return 0;
    342c:	80 e0       	ldi	r24, 0x00	; 0
};
    342e:	df 91       	pop	r29
    3430:	cf 91       	pop	r28
    3432:	1f 91       	pop	r17
    3434:	0f 91       	pop	r16
    3436:	08 95       	ret

00003438 <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
    3438:	2f 92       	push	r2
    343a:	3f 92       	push	r3
    343c:	4f 92       	push	r4
    343e:	5f 92       	push	r5
    3440:	6f 92       	push	r6
    3442:	7f 92       	push	r7
    3444:	8f 92       	push	r8
    3446:	9f 92       	push	r9
    3448:	af 92       	push	r10
    344a:	bf 92       	push	r11
    344c:	cf 92       	push	r12
    344e:	df 92       	push	r13
    3450:	ef 92       	push	r14
    3452:	ff 92       	push	r15
    3454:	0f 93       	push	r16
    3456:	1f 93       	push	r17
    3458:	cf 93       	push	r28
    345a:	df 93       	push	r29
    345c:	cd b7       	in	r28, 0x3d	; 61
    345e:	de b7       	in	r29, 0x3e	; 62
    3460:	66 97       	sbiw	r28, 0x16	; 22
    3462:	0f b6       	in	r0, 0x3f	; 63
    3464:	f8 94       	cli
    3466:	de bf       	out	0x3e, r29	; 62
    3468:	0f be       	out	0x3f, r0	; 63
    346a:	cd bf       	out	0x3d, r28	; 61
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
        UsbDevice *p = NULL;
        EpInfo *oldep_ptr = NULL;
        EpInfo epInfo;

        epInfo.epAddr = 0;
    346c:	1b 8a       	std	Y+19, r1	; 0x13
        epInfo.maxPktSize = 8;
    346e:	38 e0       	ldi	r19, 0x08	; 8
    3470:	3c 8b       	std	Y+20, r19	; 0x14
        epInfo.bmSndToggle = 0;
        epInfo.bmRcvToggle = 0;
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
    3472:	3c e3       	ldi	r19, 0x3C	; 60
    3474:	3d 8b       	std	Y+21, r19	; 0x15

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
        if(!p) {
    3476:	8a 3f       	cpi	r24, 0xFA	; 250
    3478:	3f ef       	ldi	r19, 0xFF	; 255
    347a:	93 07       	cpc	r25, r19
    347c:	09 f4       	brne	.+2      	; 0x3480 <_ZN3USB11ConfiguringEhhb+0x48>
    347e:	64 c0       	rjmp	.+200    	; 0x3548 <_ZN3USB11ConfiguringEhhb+0x110>
    3480:	52 2e       	mov	r5, r18
    3482:	34 2e       	mov	r3, r20
    3484:	46 2e       	mov	r4, r22
    3486:	7c 01       	movw	r14, r24
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    3488:	dc 01       	movw	r26, r24
    348a:	16 96       	adiw	r26, 0x06	; 6
    348c:	cd 90       	ld	r12, X+
    348e:	dc 90       	ld	r13, X
    3490:	17 97       	sbiw	r26, 0x07	; 7

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
    3492:	ce 01       	movw	r24, r28
    3494:	43 96       	adiw	r24, 0x13	; 19
    3496:	17 96       	adiw	r26, 0x07	; 7
    3498:	9c 93       	st	X, r25
    349a:	8e 93       	st	-X, r24
    349c:	16 97       	sbiw	r26, 0x06	; 6

        p->lowspeed = lowspeed;
    349e:	1a 96       	adiw	r26, 0x0a	; 10
    34a0:	2c 93       	st	X, r18
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
    34a2:	8e 01       	movw	r16, r28
    34a4:	0f 5f       	subi	r16, 0xFF	; 255
    34a6:	1f 4f       	sbci	r17, 0xFF	; 255
    34a8:	22 e1       	ldi	r18, 0x12	; 18
    34aa:	30 e0       	ldi	r19, 0x00	; 0
    34ac:	40 e0       	ldi	r20, 0x00	; 0
    34ae:	60 e0       	ldi	r22, 0x00	; 0
    34b0:	c7 01       	movw	r24, r14
    34b2:	0e 94 06 19 	call	0x320c	; 0x320c <_ZN3USB11getDevDescrEhhjPh>

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    34b6:	f7 01       	movw	r30, r14
    34b8:	d7 82       	std	Z+7, r13	; 0x07
    34ba:	c6 82       	std	Z+6, r12	; 0x06

        if(rcode) {
    34bc:	81 11       	cpse	r24, r1
    34be:	a6 c0       	rjmp	.+332    	; 0x360c <_ZN3USB11ConfiguringEhhb+0x1d4>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
    34c0:	89 84       	ldd	r8, Y+9	; 0x09
    34c2:	9a 84       	ldd	r9, Y+10	; 0x0a
        uint16_t pid = udd->idProduct;
    34c4:	6b 84       	ldd	r6, Y+11	; 0x0b
    34c6:	7c 84       	ldd	r7, Y+12	; 0x0c
        uint8_t klass = udd->bDeviceClass;
    34c8:	fd 81       	ldd	r31, Y+5	; 0x05
    34ca:	fe 8b       	std	Y+22, r31	; 0x16
        uint8_t subklass = udd->bDeviceSubClass;
    34cc:	2e 80       	ldd	r2, Y+6	; 0x06
    34ce:	67 01       	movw	r12, r14
    34d0:	36 e5       	ldi	r19, 0x56	; 86
    34d2:	c3 0e       	add	r12, r19
    34d4:	d1 1c       	adc	r13, r1
    34d6:	56 01       	movw	r10, r12
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    34d8:	10 e0       	ldi	r17, 0x00	; 0
                if(!devConfig[devConfigIndex]) continue; // no driver
    34da:	d5 01       	movw	r26, r10
    34dc:	8d 91       	ld	r24, X+
    34de:	9c 91       	ld	r25, X
    34e0:	00 97       	sbiw	r24, 0x00	; 0
    34e2:	f1 f1       	breq	.+124    	; 0x3560 <_ZN3USB11ConfiguringEhhb+0x128>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    34e4:	dc 01       	movw	r26, r24
    34e6:	ed 91       	ld	r30, X+
    34e8:	fc 91       	ld	r31, X
    34ea:	00 84       	ldd	r0, Z+8	; 0x08
    34ec:	f1 85       	ldd	r31, Z+9	; 0x09
    34ee:	e0 2d       	mov	r30, r0
    34f0:	09 95       	icall
    34f2:	81 11       	cpse	r24, r1
    34f4:	35 c0       	rjmp	.+106    	; 0x3560 <_ZN3USB11ConfiguringEhhb+0x128>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
    34f6:	f5 01       	movw	r30, r10
    34f8:	80 81       	ld	r24, Z
    34fa:	91 81       	ldd	r25, Z+1	; 0x01
    34fc:	dc 01       	movw	r26, r24
    34fe:	ed 91       	ld	r30, X+
    3500:	fc 91       	ld	r31, X
    3502:	00 88       	ldd	r0, Z+16	; 0x10
    3504:	f1 89       	ldd	r31, Z+17	; 0x11
    3506:	e0 2d       	mov	r30, r0
    3508:	62 2d       	mov	r22, r2
    350a:	09 95       	icall
    350c:	88 23       	and	r24, r24
    350e:	41 f1       	breq	.+80     	; 0x3560 <_ZN3USB11ConfiguringEhhb+0x128>
    3510:	f5 01       	movw	r30, r10
    3512:	80 81       	ld	r24, Z
    3514:	91 81       	ldd	r25, Z+1	; 0x01
    3516:	dc 01       	movw	r26, r24
    3518:	ed 91       	ld	r30, X+
    351a:	fc 91       	ld	r31, X
    351c:	04 84       	ldd	r0, Z+12	; 0x0c
    351e:	f5 85       	ldd	r31, Z+13	; 0x0d
    3520:	e0 2d       	mov	r30, r0
    3522:	a3 01       	movw	r20, r6
    3524:	b4 01       	movw	r22, r8
    3526:	09 95       	icall
    3528:	81 11       	cpse	r24, r1
    352a:	10 c0       	rjmp	.+32     	; 0x354c <_ZN3USB11ConfiguringEhhb+0x114>
    352c:	f5 01       	movw	r30, r10
    352e:	80 81       	ld	r24, Z
    3530:	91 81       	ldd	r25, Z+1	; 0x01
    3532:	dc 01       	movw	r26, r24
    3534:	ed 91       	ld	r30, X+
    3536:	fc 91       	ld	r31, X
    3538:	06 84       	ldd	r0, Z+14	; 0x0e
    353a:	f7 85       	ldd	r31, Z+15	; 0x0f
    353c:	e0 2d       	mov	r30, r0
    353e:	6e 89       	ldd	r22, Y+22	; 0x16
    3540:	09 95       	icall
    3542:	81 11       	cpse	r24, r1
    3544:	03 c0       	rjmp	.+6      	; 0x354c <_ZN3USB11ConfiguringEhhb+0x114>
    3546:	0c c0       	rjmp	.+24     	; 0x3560 <_ZN3USB11ConfiguringEhhb+0x128>
        AddressPool &addrPool = GetAddressPool();
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
        if(!p) {
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    3548:	86 ed       	ldi	r24, 0xD6	; 214
    354a:	60 c0       	rjmp	.+192    	; 0x360c <_ZN3USB11ConfiguringEhhb+0x1d4>
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue; // no driver
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
    354c:	05 2d       	mov	r16, r5
    354e:	23 2d       	mov	r18, r3
    3550:	44 2d       	mov	r20, r4
    3552:	61 2f       	mov	r22, r17
    3554:	c7 01       	movw	r24, r14
    3556:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <_ZN3USB13AttemptConfigEhhhb>
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
    355a:	81 3d       	cpi	r24, 0xD1	; 209
    355c:	09 f0       	breq	.+2      	; 0x3560 <_ZN3USB11ConfiguringEhhb+0x128>
    355e:	56 c0       	rjmp	.+172    	; 0x360c <_ZN3USB11ConfiguringEhhb+0x1d4>
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    3560:	1f 5f       	subi	r17, 0xFF	; 255
    3562:	b2 e0       	ldi	r27, 0x02	; 2
    3564:	ab 0e       	add	r10, r27
    3566:	b1 1c       	adc	r11, r1
    3568:	10 31       	cpi	r17, 0x10	; 16
    356a:	09 f0       	breq	.+2      	; 0x356e <_ZN3USB11ConfiguringEhhb+0x136>
    356c:	b6 cf       	rjmp	.-148    	; 0x34da <_ZN3USB11ConfiguringEhhb+0xa2>
    356e:	10 e0       	ldi	r17, 0x00	; 0
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue;
    3570:	f6 01       	movw	r30, r12
    3572:	80 81       	ld	r24, Z
    3574:	91 81       	ldd	r25, Z+1	; 0x01
    3576:	00 97       	sbiw	r24, 0x00	; 0
    3578:	e1 f1       	breq	.+120    	; 0x35f2 <_ZN3USB11ConfiguringEhhb+0x1ba>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    357a:	dc 01       	movw	r26, r24
    357c:	ed 91       	ld	r30, X+
    357e:	fc 91       	ld	r31, X
    3580:	00 84       	ldd	r0, Z+8	; 0x08
    3582:	f1 85       	ldd	r31, Z+9	; 0x09
    3584:	e0 2d       	mov	r30, r0
    3586:	09 95       	icall
    3588:	81 11       	cpse	r24, r1
    358a:	33 c0       	rjmp	.+102    	; 0x35f2 <_ZN3USB11ConfiguringEhhb+0x1ba>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
    358c:	f6 01       	movw	r30, r12
    358e:	80 81       	ld	r24, Z
    3590:	91 81       	ldd	r25, Z+1	; 0x01
    3592:	dc 01       	movw	r26, r24
    3594:	ed 91       	ld	r30, X+
    3596:	fc 91       	ld	r31, X
    3598:	00 88       	ldd	r0, Z+16	; 0x10
    359a:	f1 89       	ldd	r31, Z+17	; 0x11
    359c:	e0 2d       	mov	r30, r0
    359e:	62 2d       	mov	r22, r2
    35a0:	09 95       	icall
    35a2:	88 23       	and	r24, r24
    35a4:	d9 f0       	breq	.+54     	; 0x35dc <_ZN3USB11ConfiguringEhhb+0x1a4>
    35a6:	f6 01       	movw	r30, r12
    35a8:	80 81       	ld	r24, Z
    35aa:	91 81       	ldd	r25, Z+1	; 0x01
    35ac:	dc 01       	movw	r26, r24
    35ae:	ed 91       	ld	r30, X+
    35b0:	fc 91       	ld	r31, X
    35b2:	04 84       	ldd	r0, Z+12	; 0x0c
    35b4:	f5 85       	ldd	r31, Z+13	; 0x0d
    35b6:	e0 2d       	mov	r30, r0
    35b8:	a3 01       	movw	r20, r6
    35ba:	b4 01       	movw	r22, r8
    35bc:	09 95       	icall
    35be:	81 11       	cpse	r24, r1
    35c0:	18 c0       	rjmp	.+48     	; 0x35f2 <_ZN3USB11ConfiguringEhhb+0x1ba>
    35c2:	f6 01       	movw	r30, r12
    35c4:	80 81       	ld	r24, Z
    35c6:	91 81       	ldd	r25, Z+1	; 0x01
    35c8:	dc 01       	movw	r26, r24
    35ca:	ed 91       	ld	r30, X+
    35cc:	fc 91       	ld	r31, X
    35ce:	06 84       	ldd	r0, Z+14	; 0x0e
    35d0:	f7 85       	ldd	r31, Z+15	; 0x0f
    35d2:	e0 2d       	mov	r30, r0
    35d4:	6e 89       	ldd	r22, Y+22	; 0x16
    35d6:	09 95       	icall
    35d8:	81 11       	cpse	r24, r1
    35da:	0b c0       	rjmp	.+22     	; 0x35f2 <_ZN3USB11ConfiguringEhhb+0x1ba>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
    35dc:	05 2d       	mov	r16, r5
    35de:	23 2d       	mov	r18, r3
    35e0:	44 2d       	mov	r20, r4
    35e2:	61 2f       	mov	r22, r17
    35e4:	c7 01       	movw	r24, r14
    35e6:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <_ZN3USB13AttemptConfigEhhhb>

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
    35ea:	98 2f       	mov	r25, r24
    35ec:	97 7f       	andi	r25, 0xF7	; 247
    35ee:	91 3d       	cpi	r25, 0xD1	; 209
    35f0:	69 f4       	brne	.+26     	; 0x360c <_ZN3USB11ConfiguringEhhb+0x1d4>
                return rcode;
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    35f2:	1f 5f       	subi	r17, 0xFF	; 255
    35f4:	e2 e0       	ldi	r30, 0x02	; 2
    35f6:	ce 0e       	add	r12, r30
    35f8:	d1 1c       	adc	r13, r1
    35fa:	10 31       	cpi	r17, 0x10	; 16
    35fc:	09 f0       	breq	.+2      	; 0x3600 <_ZN3USB11ConfiguringEhhb+0x1c8>
    35fe:	b8 cf       	rjmp	.-144    	; 0x3570 <_ZN3USB11ConfiguringEhhb+0x138>
                        //        devConfigIndex = 0;
                        return rcode;
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
    3600:	25 2d       	mov	r18, r5
    3602:	43 2d       	mov	r20, r3
    3604:	64 2d       	mov	r22, r4
    3606:	c7 01       	movw	r24, r14
    3608:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <_ZN3USB17DefaultAddressingEhhb>

        return rcode;
}
    360c:	66 96       	adiw	r28, 0x16	; 22
    360e:	0f b6       	in	r0, 0x3f	; 63
    3610:	f8 94       	cli
    3612:	de bf       	out	0x3e, r29	; 62
    3614:	0f be       	out	0x3f, r0	; 63
    3616:	cd bf       	out	0x3d, r28	; 61
    3618:	df 91       	pop	r29
    361a:	cf 91       	pop	r28
    361c:	1f 91       	pop	r17
    361e:	0f 91       	pop	r16
    3620:	ff 90       	pop	r15
    3622:	ef 90       	pop	r14
    3624:	df 90       	pop	r13
    3626:	cf 90       	pop	r12
    3628:	bf 90       	pop	r11
    362a:	af 90       	pop	r10
    362c:	9f 90       	pop	r9
    362e:	8f 90       	pop	r8
    3630:	7f 90       	pop	r7
    3632:	6f 90       	pop	r6
    3634:	5f 90       	pop	r5
    3636:	4f 90       	pop	r4
    3638:	3f 90       	pop	r3
    363a:	2f 90       	pop	r2
    363c:	08 95       	ret

0000363e <_ZN3USB7setConfEhhh>:
        return rcode;
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
    363e:	8f 92       	push	r8
    3640:	9f 92       	push	r9
    3642:	af 92       	push	r10
    3644:	bf 92       	push	r11
    3646:	cf 92       	push	r12
    3648:	ef 92       	push	r14
    364a:	0f 93       	push	r16
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
    364c:	1f 92       	push	r1
    364e:	1f 92       	push	r1
    3650:	1f 92       	push	r1
    3652:	1f 92       	push	r1
    3654:	1f 92       	push	r1
    3656:	1f 92       	push	r1
    3658:	81 2c       	mov	r8, r1
    365a:	91 2c       	mov	r9, r1
    365c:	a1 2c       	mov	r10, r1
    365e:	b1 2c       	mov	r11, r1
    3660:	c1 2c       	mov	r12, r1
    3662:	e2 2e       	mov	r14, r18
    3664:	09 e0       	ldi	r16, 0x09	; 9
    3666:	20 e0       	ldi	r18, 0x00	; 0
    3668:	0e 94 26 18 	call	0x304c	; 0x304c <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser>
    366c:	0f 90       	pop	r0
    366e:	0f 90       	pop	r0
    3670:	0f 90       	pop	r0
    3672:	0f 90       	pop	r0
    3674:	0f 90       	pop	r0
    3676:	0f 90       	pop	r0
}
    3678:	0f 91       	pop	r16
    367a:	ef 90       	pop	r14
    367c:	cf 90       	pop	r12
    367e:	bf 90       	pop	r11
    3680:	af 90       	pop	r10
    3682:	9f 90       	pop	r9
    3684:	8f 90       	pop	r8
    3686:	08 95       	ret

00003688 <_ZN3USB10inTransferEhhPjPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
    3688:	8f 92       	push	r8
    368a:	9f 92       	push	r9
    368c:	af 92       	push	r10
    368e:	bf 92       	push	r11
    3690:	cf 92       	push	r12
    3692:	df 92       	push	r13
    3694:	ef 92       	push	r14
    3696:	0f 93       	push	r16
    3698:	1f 93       	push	r17
    369a:	cf 93       	push	r28
    369c:	df 93       	push	r29
    369e:	00 d0       	rcall	.+0      	; 0x36a0 <_ZN3USB10inTransferEhhPjPhh+0x18>
    36a0:	00 d0       	rcall	.+0      	; 0x36a2 <_ZN3USB10inTransferEhhPjPhh+0x1a>
    36a2:	cd b7       	in	r28, 0x3d	; 61
    36a4:	de b7       	in	r29, 0x3e	; 62
    36a6:	6c 01       	movw	r12, r24
    36a8:	59 01       	movw	r10, r18
    36aa:	48 01       	movw	r8, r16
        EpInfo *pep = NULL;
    36ac:	1c 82       	std	Y+4, r1	; 0x04
    36ae:	1b 82       	std	Y+3, r1	; 0x03
        uint16_t nak_limit = 0;
    36b0:	1a 82       	std	Y+2, r1	; 0x02
    36b2:	19 82       	std	Y+1, r1	; 0x01

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
    36b4:	8e 01       	movw	r16, r28
    36b6:	0f 5f       	subi	r16, 0xFF	; 255
    36b8:	1f 4f       	sbci	r17, 0xFF	; 255
    36ba:	9e 01       	movw	r18, r28
    36bc:	2d 5f       	subi	r18, 0xFD	; 253
    36be:	3f 4f       	sbci	r19, 0xFF	; 255
    36c0:	0e 94 bb 14 	call	0x2976	; 0x2976 <_ZN3USB10SetAddressEhhPP6EpInfoPj>

        if(rcode) {
    36c4:	81 11       	cpse	r24, r1
    36c6:	09 c0       	rjmp	.+18     	; 0x36da <_ZN3USB10inTransferEhhPjPhh+0x52>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
                return rcode;
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
    36c8:	49 81       	ldd	r20, Y+1	; 0x01
    36ca:	5a 81       	ldd	r21, Y+2	; 0x02
    36cc:	6b 81       	ldd	r22, Y+3	; 0x03
    36ce:	7c 81       	ldd	r23, Y+4	; 0x04
    36d0:	84 01       	movw	r16, r8
    36d2:	95 01       	movw	r18, r10
    36d4:	c6 01       	movw	r24, r12
    36d6:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <_ZN3USB10InTransferEP6EpInfojPjPhh>
}
    36da:	0f 90       	pop	r0
    36dc:	0f 90       	pop	r0
    36de:	0f 90       	pop	r0
    36e0:	0f 90       	pop	r0
    36e2:	df 91       	pop	r29
    36e4:	cf 91       	pop	r28
    36e6:	1f 91       	pop	r17
    36e8:	0f 91       	pop	r16
    36ea:	ef 90       	pop	r14
    36ec:	df 90       	pop	r13
    36ee:	cf 90       	pop	r12
    36f0:	bf 90       	pop	r11
    36f2:	af 90       	pop	r10
    36f4:	9f 90       	pop	r9
    36f6:	8f 90       	pop	r8
    36f8:	08 95       	ret

000036fa <_ZN3USB4TaskEv>:
        return ( rcode);
}

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
    36fa:	af 92       	push	r10
    36fc:	bf 92       	push	r11
    36fe:	cf 92       	push	r12
    3700:	df 92       	push	r13
    3702:	ef 92       	push	r14
    3704:	ff 92       	push	r15
    3706:	0f 93       	push	r16
    3708:	1f 93       	push	r17
    370a:	cf 93       	push	r28
    370c:	8c 01       	movw	r16, r24
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
    370e:	19 99       	sbic	0x03, 1	; 3
    3710:	0e c0       	rjmp	.+28     	; 0x372e <_ZN3USB4TaskEv+0x34>

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
        HIRQ = regRd(rHIRQ); //determine interrupt source
    3712:	88 ec       	ldi	r24, 0xC8	; 200
    3714:	0e 94 82 14 	call	0x2904	; 0x2904 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.5>
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
    3718:	85 ff       	sbrs	r24, 5
    371a:	05 c0       	rjmp	.+10     	; 0x3726 <_ZN3USB4TaskEv+0x2c>
                busprobe();
    371c:	c8 01       	movw	r24, r16
    371e:	0e 94 68 05 	call	0xad0	; 0xad0 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
    3722:	60 e2       	ldi	r22, 0x20	; 32
    3724:	01 c0       	rjmp	.+2      	; 0x3728 <_ZN3USB4TaskEv+0x2e>
}

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
    3726:	60 e0       	ldi	r22, 0x00	; 0
        if(HIRQ & bmCONDETIRQ) {
                busprobe();
                HIRQ_sendback |= bmCONDETIRQ;
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
    3728:	88 ec       	ldi	r24, 0xC8	; 200
    372a:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
        MAX3421E::Task();

        tmpdata = getVbusState();

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
    372e:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <__data_end>
    3732:	81 30       	cpi	r24, 0x01	; 1
    3734:	39 f0       	breq	.+14     	; 0x3744 <_ZN3USB4TaskEv+0x4a>
    3736:	40 f0       	brcs	.+16     	; 0x3748 <_ZN3USB4TaskEv+0x4e>
    3738:	82 30       	cpi	r24, 0x02	; 2
    373a:	79 f0       	breq	.+30     	; 0x375a <_ZN3USB4TaskEv+0x60>
    373c:	83 30       	cpi	r24, 0x03	; 3
    373e:	39 f5       	brne	.+78     	; 0x378e <_ZN3USB4TaskEv+0x94>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
                        lowspeed = false;
                        break;
                case LSHOST:

                        lowspeed = true;
    3740:	c1 e0       	ldi	r28, 0x01	; 1
    3742:	0c c0       	rjmp	.+24     	; 0x375c <_ZN3USB4TaskEv+0x62>
        tmpdata = getVbusState();

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
    3744:	83 e1       	ldi	r24, 0x13	; 19
    3746:	06 c0       	rjmp	.+12     	; 0x3754 <_ZN3USB4TaskEv+0x5a>
                        lowspeed = false;
                        break;
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
    3748:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <_ZL14usb_task_state>
    374c:	80 7f       	andi	r24, 0xF0	; 240
    374e:	80 31       	cpi	r24, 0x10	; 16
    3750:	f1 f0       	breq	.+60     	; 0x378e <_ZN3USB4TaskEv+0x94>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    3752:	81 e1       	ldi	r24, 0x11	; 17
    3754:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <_ZL14usb_task_state>
    3758:	1a c0       	rjmp	.+52     	; 0x378e <_ZN3USB4TaskEv+0x94>
{
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
    375a:	c0 e0       	ldi	r28, 0x00	; 0
                case LSHOST:

                        lowspeed = true;
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
    375c:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <_ZL14usb_task_state>
    3760:	80 7f       	andi	r24, 0xF0	; 240
    3762:	80 31       	cpi	r24, 0x10	; 16
    3764:	a9 f4       	brne	.+42     	; 0x3790 <_ZN3USB4TaskEv+0x96>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
    3766:	0e 94 1c 09 	call	0x1238	; 0x1238 <millis>
    376a:	dc 01       	movw	r26, r24
    376c:	cb 01       	movw	r24, r22
    376e:	88 53       	subi	r24, 0x38	; 56
    3770:	9f 4f       	sbci	r25, 0xFF	; 255
    3772:	af 4f       	sbci	r26, 0xFF	; 255
    3774:	bf 4f       	sbci	r27, 0xFF	; 255
    3776:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <_ZZN3USB4TaskEvE5delay>
    377a:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <_ZZN3USB4TaskEvE5delay+0x1>
    377e:	a0 93 8a 04 	sts	0x048A, r26	; 0x80048a <_ZZN3USB4TaskEvE5delay+0x2>
    3782:	b0 93 8b 04 	sts	0x048B, r27	; 0x80048b <_ZZN3USB4TaskEvE5delay+0x3>
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
    3786:	80 e2       	ldi	r24, 0x20	; 32
    3788:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <_ZL14usb_task_state>
    378c:	01 c0       	rjmp	.+2      	; 0x3790 <_ZN3USB4TaskEv+0x96>
                        lowspeed = false;
                        break;
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
                        lowspeed = false;
    378e:	c0 e0       	ldi	r28, 0x00	; 0
    3790:	78 01       	movw	r14, r16
    3792:	86 e5       	ldi	r24, 0x56	; 86
    3794:	e8 0e       	add	r14, r24
    3796:	f1 1c       	adc	r15, r1
    3798:	68 01       	movw	r12, r16
    379a:	a6 e7       	ldi	r26, 0x76	; 118
    379c:	ca 0e       	add	r12, r26
    379e:	d1 1c       	adc	r13, r1
    37a0:	57 01       	movw	r10, r14
                        }
                        break;
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
    37a2:	f5 01       	movw	r30, r10
    37a4:	81 91       	ld	r24, Z+
    37a6:	91 91       	ld	r25, Z+
    37a8:	5f 01       	movw	r10, r30
    37aa:	00 97       	sbiw	r24, 0x00	; 0
    37ac:	39 f0       	breq	.+14     	; 0x37bc <_ZN3USB4TaskEv+0xc2>
                        rcode = devConfig[i]->Poll();
    37ae:	dc 01       	movw	r26, r24
    37b0:	ed 91       	ld	r30, X+
    37b2:	fc 91       	ld	r31, X
    37b4:	06 80       	ldd	r0, Z+6	; 0x06
    37b6:	f7 81       	ldd	r31, Z+7	; 0x07
    37b8:	e0 2d       	mov	r30, r0
    37ba:	09 95       	icall
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
                        }
                        break;
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    37bc:	ac 14       	cp	r10, r12
    37be:	bd 04       	cpc	r11, r13
    37c0:	81 f7       	brne	.-32     	; 0x37a2 <_ZN3USB4TaskEv+0xa8>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    37c2:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <_ZL14usb_task_state>
    37c6:	80 34       	cpi	r24, 0x40	; 64
    37c8:	09 f4       	brne	.+2      	; 0x37cc <_ZN3USB4TaskEv+0xd2>
    37ca:	3f c0       	rjmp	.+126    	; 0x384a <_ZN3USB4TaskEv+0x150>
    37cc:	50 f4       	brcc	.+20     	; 0x37e2 <_ZN3USB4TaskEv+0xe8>
    37ce:	80 32       	cpi	r24, 0x20	; 32
    37d0:	21 f1       	breq	.+72     	; 0x381a <_ZN3USB4TaskEv+0x120>
    37d2:	80 33       	cpi	r24, 0x30	; 48
    37d4:	a1 f1       	breq	.+104    	; 0x383e <_ZN3USB4TaskEv+0x144>
    37d6:	81 31       	cpi	r24, 0x11	; 17
    37d8:	09 f0       	breq	.+2      	; 0x37dc <_ZN3USB4TaskEv+0xe2>
    37da:	82 c0       	rjmp	.+260    	; 0x38e0 <_ZN3USB4TaskEv+0x1e6>
}

/* Initialize data structures */
void USB::init() {
        //devConfigIndex = 0;
        bmHubPre = 0;
    37dc:	f6 01       	movw	r30, r12
    37de:	10 82       	st	Z, r1
    37e0:	0a c0       	rjmp	.+20     	; 0x37f6 <_ZN3USB4TaskEv+0xfc>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    37e2:	81 35       	cpi	r24, 0x51	; 81
    37e4:	09 f4       	brne	.+2      	; 0x37e8 <_ZN3USB4TaskEv+0xee>
    37e6:	58 c0       	rjmp	.+176    	; 0x3898 <_ZN3USB4TaskEv+0x19e>
    37e8:	80 38       	cpi	r24, 0x80	; 128
    37ea:	09 f4       	brne	.+2      	; 0x37ee <_ZN3USB4TaskEv+0xf4>
    37ec:	6a c0       	rjmp	.+212    	; 0x38c2 <_ZN3USB4TaskEv+0x1c8>
    37ee:	80 35       	cpi	r24, 0x50	; 80
    37f0:	09 f0       	breq	.+2      	; 0x37f4 <_ZN3USB4TaskEv+0xfa>
    37f2:	76 c0       	rjmp	.+236    	; 0x38e0 <_ZN3USB4TaskEv+0x1e6>
    37f4:	39 c0       	rjmp	.+114    	; 0x3868 <_ZN3USB4TaskEv+0x16e>
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                                if(devConfig[i])
    37f6:	d7 01       	movw	r26, r14
    37f8:	8d 91       	ld	r24, X+
    37fa:	9d 91       	ld	r25, X+
    37fc:	7d 01       	movw	r14, r26
    37fe:	00 97       	sbiw	r24, 0x00	; 0
    3800:	39 f0       	breq	.+14     	; 0x3810 <_ZN3USB4TaskEv+0x116>
                                        rcode = devConfig[i]->Release();
    3802:	dc 01       	movw	r26, r24
    3804:	ed 91       	ld	r30, X+
    3806:	fc 91       	ld	r31, X
    3808:	04 80       	ldd	r0, Z+4	; 0x04
    380a:	f5 81       	ldd	r31, Z+5	; 0x05
    380c:	e0 2d       	mov	r30, r0
    380e:	09 95       	icall

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    3810:	ec 14       	cp	r14, r12
    3812:	fd 04       	cpc	r15, r13
    3814:	81 f7       	brne	.-32     	; 0x37f6 <_ZN3USB4TaskEv+0xfc>
                                if(devConfig[i])
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
    3816:	82 e1       	ldi	r24, 0x12	; 18
    3818:	61 c0       	rjmp	.+194    	; 0x38dc <_ZN3USB4TaskEv+0x1e2>
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
    381a:	0e 94 1c 09 	call	0x1238	; 0x1238 <millis>
    381e:	00 91 88 04 	lds	r16, 0x0488	; 0x800488 <_ZZN3USB4TaskEvE5delay>
    3822:	10 91 89 04 	lds	r17, 0x0489	; 0x800489 <_ZZN3USB4TaskEvE5delay+0x1>
    3826:	20 91 8a 04 	lds	r18, 0x048A	; 0x80048a <_ZZN3USB4TaskEvE5delay+0x2>
    382a:	30 91 8b 04 	lds	r19, 0x048B	; 0x80048b <_ZZN3USB4TaskEvE5delay+0x3>
    382e:	dc 01       	movw	r26, r24
    3830:	cb 01       	movw	r24, r22
    3832:	80 1b       	sub	r24, r16
    3834:	91 0b       	sbc	r25, r17
    3836:	a2 0b       	sbc	r26, r18
    3838:	b3 0b       	sbc	r27, r19
    383a:	b7 fd       	sbrc	r27, 7
    383c:	51 c0       	rjmp	.+162    	; 0x38e0 <_ZN3USB4TaskEv+0x1e6>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                        else break; // don't fall through
                case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    383e:	61 e0       	ldi	r22, 0x01	; 1
    3840:	88 ee       	ldi	r24, 0xE8	; 232
    3842:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
    3846:	80 e4       	ldi	r24, 0x40	; 64
    3848:	49 c0       	rjmp	.+146    	; 0x38dc <_ZN3USB4TaskEv+0x1e2>
                        break;
                case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
    384a:	88 ee       	ldi	r24, 0xE8	; 232
    384c:	0e 94 82 14 	call	0x2904	; 0x2904 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.5>
    3850:	80 fd       	sbrc	r24, 0
    3852:	46 c0       	rjmp	.+140    	; 0x38e0 <_ZN3USB4TaskEv+0x1e6>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
    3854:	88 ed       	ldi	r24, 0xD8	; 216
    3856:	0e 94 82 14 	call	0x2904	; 0x2904 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.5>
                                regWr(rMODE, tmpdata);
    385a:	68 2f       	mov	r22, r24
    385c:	68 60       	ori	r22, 0x08	; 8
    385e:	88 ed       	ldi	r24, 0xD8	; 216
    3860:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.6>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
    3864:	80 e5       	ldi	r24, 0x50	; 80
    3866:	3a c0       	rjmp	.+116    	; 0x38dc <_ZN3USB4TaskEv+0x1e2>
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
                case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
    3868:	88 ec       	ldi	r24, 0xC8	; 200
    386a:	0e 94 82 14 	call	0x2904	; 0x2904 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.5>
    386e:	86 ff       	sbrs	r24, 6
    3870:	37 c0       	rjmp	.+110    	; 0x38e0 <_ZN3USB4TaskEv+0x1e6>
                                //when first SOF received _and_ 20ms has passed we can continue
                                /*
                                if (delay < (uint32_t)millis()) //20ms passed
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
    3872:	81 e5       	ldi	r24, 0x51	; 81
    3874:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <_ZL14usb_task_state>
                                delay = (uint32_t)millis() + 20;
    3878:	0e 94 1c 09 	call	0x1238	; 0x1238 <millis>
    387c:	dc 01       	movw	r26, r24
    387e:	cb 01       	movw	r24, r22
    3880:	44 96       	adiw	r24, 0x14	; 20
    3882:	a1 1d       	adc	r26, r1
    3884:	b1 1d       	adc	r27, r1
    3886:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <_ZZN3USB4TaskEvE5delay>
    388a:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <_ZZN3USB4TaskEvE5delay+0x1>
    388e:	a0 93 8a 04 	sts	0x048A, r26	; 0x80048a <_ZZN3USB4TaskEvE5delay+0x2>
    3892:	b0 93 8b 04 	sts	0x048B, r27	; 0x80048b <_ZZN3USB4TaskEvE5delay+0x3>
    3896:	24 c0       	rjmp	.+72     	; 0x38e0 <_ZN3USB4TaskEv+0x1e6>
                        }
                        break;
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
    3898:	0e 94 1c 09 	call	0x1238	; 0x1238 <millis>
    389c:	c0 90 88 04 	lds	r12, 0x0488	; 0x800488 <_ZZN3USB4TaskEvE5delay>
    38a0:	d0 90 89 04 	lds	r13, 0x0489	; 0x800489 <_ZZN3USB4TaskEvE5delay+0x1>
    38a4:	e0 90 8a 04 	lds	r14, 0x048A	; 0x80048a <_ZZN3USB4TaskEvE5delay+0x2>
    38a8:	f0 90 8b 04 	lds	r15, 0x048B	; 0x80048b <_ZZN3USB4TaskEvE5delay+0x3>
    38ac:	dc 01       	movw	r26, r24
    38ae:	cb 01       	movw	r24, r22
    38b0:	8c 19       	sub	r24, r12
    38b2:	9d 09       	sbc	r25, r13
    38b4:	ae 09       	sbc	r26, r14
    38b6:	bf 09       	sbc	r27, r15
    38b8:	b7 fd       	sbrc	r27, 7
    38ba:	12 c0       	rjmp	.+36     	; 0x38e0 <_ZN3USB4TaskEv+0x1e6>
    38bc:	80 e8       	ldi	r24, 0x80	; 128
    38be:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <_ZL14usb_task_state>
                case USB_STATE_CONFIGURING:

                        //Serial.print("\r\nConf.LS: ");
                        //Serial.println(lowspeed, HEX);

                        rcode = Configuring(0, 0, lowspeed);
    38c2:	2c 2f       	mov	r18, r28
    38c4:	40 e0       	ldi	r20, 0x00	; 0
    38c6:	60 e0       	ldi	r22, 0x00	; 0
    38c8:	c8 01       	movw	r24, r16
    38ca:	0e 94 1c 1a 	call	0x3438	; 0x3438 <_ZN3USB11ConfiguringEhhb>

                        if(rcode) {
    38ce:	88 23       	and	r24, r24
    38d0:	21 f0       	breq	.+8      	; 0x38da <_ZN3USB4TaskEv+0x1e0>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
    38d2:	82 3d       	cpi	r24, 0xD2	; 210
    38d4:	29 f0       	breq	.+10     	; 0x38e0 <_ZN3USB4TaskEv+0x1e6>
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
    38d6:	80 ea       	ldi	r24, 0xA0	; 160
    38d8:	01 c0       	rjmp	.+2      	; 0x38dc <_ZN3USB4TaskEv+0x1e2>
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
    38da:	80 e9       	ldi	r24, 0x90	; 144
    38dc:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <_ZL14usb_task_state>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    38e0:	cf 91       	pop	r28
    38e2:	1f 91       	pop	r17
    38e4:	0f 91       	pop	r16
    38e6:	ff 90       	pop	r15
    38e8:	ef 90       	pop	r14
    38ea:	df 90       	pop	r13
    38ec:	cf 90       	pop	r12
    38ee:	bf 90       	pop	r11
    38f0:	af 90       	pop	r10
    38f2:	08 95       	ret

000038f4 <_ZN6USBHID14GetReportDescrEjP13USBReadParser>:
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_IN, HID_REQUEST_GET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
}

uint8_t USBHID::GetIdle(uint8_t iface, uint8_t reportID, uint8_t* dataptr) {
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_IDLE, reportID, 0, iface, 0x0001, 0x0001, dataptr, NULL));
}
    38f4:	8f 92       	push	r8
    38f6:	9f 92       	push	r9
    38f8:	af 92       	push	r10
    38fa:	bf 92       	push	r11
    38fc:	cf 92       	push	r12
    38fe:	ef 92       	push	r14
    3900:	0f 93       	push	r16
    3902:	cf 93       	push	r28
    3904:	df 93       	push	r29
    3906:	cd b7       	in	r28, 0x3d	; 61
    3908:	de b7       	in	r29, 0x3e	; 62
    390a:	c0 54       	subi	r28, 0x40	; 64
    390c:	d1 09       	sbc	r29, r1
    390e:	0f b6       	in	r0, 0x3f	; 63
    3910:	f8 94       	cli
    3912:	de bf       	out	0x3e, r29	; 62
    3914:	0f be       	out	0x3f, r0	; 63
    3916:	cd bf       	out	0x3d, r28	; 61
    3918:	5f 93       	push	r21
    391a:	4f 93       	push	r20
    391c:	9e 01       	movw	r18, r28
    391e:	2f 5f       	subi	r18, 0xFF	; 255
    3920:	3f 4f       	sbci	r19, 0xFF	; 255
    3922:	3f 93       	push	r19
    3924:	2f 93       	push	r18
    3926:	1f 92       	push	r1
    3928:	20 e4       	ldi	r18, 0x40	; 64
    392a:	2f 93       	push	r18
    392c:	20 e8       	ldi	r18, 0x80	; 128
    392e:	82 2e       	mov	r8, r18
    3930:	91 2c       	mov	r9, r1
    3932:	5b 01       	movw	r10, r22
    3934:	32 e2       	ldi	r19, 0x22	; 34
    3936:	c3 2e       	mov	r12, r19
    3938:	e1 2c       	mov	r14, r1
    393a:	06 e0       	ldi	r16, 0x06	; 6
    393c:	21 e8       	ldi	r18, 0x81	; 129
    393e:	40 e0       	ldi	r20, 0x00	; 0
    3940:	fc 01       	movw	r30, r24
    3942:	66 81       	ldd	r22, Z+6	; 0x06
    3944:	84 81       	ldd	r24, Z+4	; 0x04
    3946:	95 81       	ldd	r25, Z+5	; 0x05
    3948:	0e 94 26 18 	call	0x304c	; 0x304c <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser>
    394c:	0f 90       	pop	r0
    394e:	0f 90       	pop	r0
    3950:	0f 90       	pop	r0
    3952:	0f 90       	pop	r0
    3954:	0f 90       	pop	r0
    3956:	0f 90       	pop	r0
    3958:	c0 5c       	subi	r28, 0xC0	; 192
    395a:	df 4f       	sbci	r29, 0xFF	; 255
    395c:	0f b6       	in	r0, 0x3f	; 63
    395e:	f8 94       	cli
    3960:	de bf       	out	0x3e, r29	; 62
    3962:	0f be       	out	0x3f, r0	; 63
    3964:	cd bf       	out	0x3d, r28	; 61
    3966:	df 91       	pop	r29
    3968:	cf 91       	pop	r28
    396a:	0f 91       	pop	r16
    396c:	ef 90       	pop	r14
    396e:	cf 90       	pop	r12
    3970:	bf 90       	pop	r11
    3972:	af 90       	pop	r10
    3974:	9f 90       	pop	r9
    3976:	8f 90       	pop	r8
    3978:	08 95       	ret

0000397a <_ZN6USBHID7SetIdleEhhh>:

uint8_t USBHID::SetIdle(uint8_t iface, uint8_t reportID, uint8_t duration) {
    397a:	8f 92       	push	r8
    397c:	9f 92       	push	r9
    397e:	af 92       	push	r10
    3980:	bf 92       	push	r11
    3982:	cf 92       	push	r12
    3984:	ef 92       	push	r14
    3986:	0f 93       	push	r16
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_IDLE, reportID, duration, iface, 0x0000, 0x0000, NULL, NULL));
    3988:	a6 2e       	mov	r10, r22
    398a:	b1 2c       	mov	r11, r1
    398c:	1f 92       	push	r1
    398e:	1f 92       	push	r1
    3990:	1f 92       	push	r1
    3992:	1f 92       	push	r1
    3994:	1f 92       	push	r1
    3996:	1f 92       	push	r1
    3998:	81 2c       	mov	r8, r1
    399a:	91 2c       	mov	r9, r1
    399c:	c2 2e       	mov	r12, r18
    399e:	e4 2e       	mov	r14, r20
    39a0:	0a e0       	ldi	r16, 0x0A	; 10
    39a2:	21 e2       	ldi	r18, 0x21	; 33
    39a4:	40 e0       	ldi	r20, 0x00	; 0
    39a6:	fc 01       	movw	r30, r24
    39a8:	66 81       	ldd	r22, Z+6	; 0x06
    39aa:	84 81       	ldd	r24, Z+4	; 0x04
    39ac:	95 81       	ldd	r25, Z+5	; 0x05
    39ae:	0e 94 26 18 	call	0x304c	; 0x304c <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser>
    39b2:	0f 90       	pop	r0
    39b4:	0f 90       	pop	r0
    39b6:	0f 90       	pop	r0
    39b8:	0f 90       	pop	r0
    39ba:	0f 90       	pop	r0
    39bc:	0f 90       	pop	r0
}
    39be:	0f 91       	pop	r16
    39c0:	ef 90       	pop	r14
    39c2:	cf 90       	pop	r12
    39c4:	bf 90       	pop	r11
    39c6:	af 90       	pop	r10
    39c8:	9f 90       	pop	r9
    39ca:	8f 90       	pop	r8
    39cc:	08 95       	ret

000039ce <_ZN6USBHID11SetProtocolEhh>:

uint8_t USBHID::SetProtocol(uint8_t iface, uint8_t protocol) {
    39ce:	8f 92       	push	r8
    39d0:	9f 92       	push	r9
    39d2:	af 92       	push	r10
    39d4:	bf 92       	push	r11
    39d6:	cf 92       	push	r12
    39d8:	ef 92       	push	r14
    39da:	0f 93       	push	r16
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_PROTOCOL, protocol, 0x00, iface, 0x0000, 0x0000, NULL, NULL));
    39dc:	a6 2e       	mov	r10, r22
    39de:	b1 2c       	mov	r11, r1
    39e0:	1f 92       	push	r1
    39e2:	1f 92       	push	r1
    39e4:	1f 92       	push	r1
    39e6:	1f 92       	push	r1
    39e8:	1f 92       	push	r1
    39ea:	1f 92       	push	r1
    39ec:	81 2c       	mov	r8, r1
    39ee:	91 2c       	mov	r9, r1
    39f0:	c1 2c       	mov	r12, r1
    39f2:	e4 2e       	mov	r14, r20
    39f4:	0b e0       	ldi	r16, 0x0B	; 11
    39f6:	21 e2       	ldi	r18, 0x21	; 33
    39f8:	40 e0       	ldi	r20, 0x00	; 0
    39fa:	fc 01       	movw	r30, r24
    39fc:	66 81       	ldd	r22, Z+6	; 0x06
    39fe:	84 81       	ldd	r24, Z+4	; 0x04
    3a00:	95 81       	ldd	r25, Z+5	; 0x05
    3a02:	0e 94 26 18 	call	0x304c	; 0x304c <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser>
    3a06:	0f 90       	pop	r0
    3a08:	0f 90       	pop	r0
    3a0a:	0f 90       	pop	r0
    3a0c:	0f 90       	pop	r0
    3a0e:	0f 90       	pop	r0
    3a10:	0f 90       	pop	r0
}
    3a12:	0f 91       	pop	r16
    3a14:	ef 90       	pop	r14
    3a16:	cf 90       	pop	r12
    3a18:	bf 90       	pop	r11
    3a1a:	af 90       	pop	r10
    3a1c:	9f 90       	pop	r9
    3a1e:	8f 90       	pop	r8
    3a20:	08 95       	ret

00003a22 <_ZN6USBHub10GetAddressEv>:
        uint8_t Poll();
        void ResetHubPort(uint8_t port);

        virtual uint8_t GetAddress() {
                return bAddress;
        };
    3a22:	fc 01       	movw	r30, r24
    3a24:	82 85       	ldd	r24, Z+10	; 0x0a
    3a26:	08 95       	ret

00003a28 <_ZN6USBHub10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass) {
                return (klass == 0x09);
    3a28:	81 e0       	ldi	r24, 0x01	; 1
    3a2a:	69 30       	cpi	r22, 0x09	; 9
    3a2c:	09 f0       	breq	.+2      	; 0x3a30 <_ZN6USBHub10DEVCLASSOKEh+0x8>
    3a2e:	80 e0       	ldi	r24, 0x00	; 0
        }
    3a30:	08 95       	ret

00003a32 <_ZN6USBHub7ReleaseEv>:
Fail:
        USBTRACE("...FAIL\r\n");
        return rcode;
}

uint8_t USBHub::Release() {
    3a32:	cf 93       	push	r28
    3a34:	df 93       	push	r29
    3a36:	ec 01       	movw	r28, r24
        pUsb->GetAddressPool().FreeAddress(bAddress);
    3a38:	8a 81       	ldd	r24, Y+2	; 0x02
    3a3a:	9b 81       	ldd	r25, Y+3	; 0x03
    3a3c:	dc 01       	movw	r26, r24
    3a3e:	ed 91       	ld	r30, X+
    3a40:	fc 91       	ld	r31, X
    3a42:	04 80       	ldd	r0, Z+4	; 0x04
    3a44:	f5 81       	ldd	r31, Z+5	; 0x05
    3a46:	e0 2d       	mov	r30, r0
    3a48:	6a 85       	ldd	r22, Y+10	; 0x0a
    3a4a:	09 95       	icall

        if(bAddress == 0x41)
    3a4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a4e:	81 34       	cpi	r24, 0x41	; 65
    3a50:	39 f4       	brne	.+14     	; 0x3a60 <_ZN6USBHub7ReleaseEv+0x2e>
                pUsb->SetHubPreMask();
    3a52:	ea 81       	ldd	r30, Y+2	; 0x02
    3a54:	fb 81       	ldd	r31, Y+3	; 0x03

public:
        USB(void);

        void SetHubPreMask() {
                bmHubPre |= bmHUBPRE;
    3a56:	ea 58       	subi	r30, 0x8A	; 138
    3a58:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5a:	80 81       	ld	r24, Z
    3a5c:	84 60       	ori	r24, 0x04	; 4
    3a5e:	80 83       	st	Z, r24

        bAddress = 0;
    3a60:	1a 86       	std	Y+10, r1	; 0x0a
        bNbrPorts = 0;
    3a62:	1b 86       	std	Y+11, r1	; 0x0b
        qNextPollTime = 0;
    3a64:	1c 86       	std	Y+12, r1	; 0x0c
    3a66:	1d 86       	std	Y+13, r1	; 0x0d
    3a68:	1e 86       	std	Y+14, r1	; 0x0e
    3a6a:	1f 86       	std	Y+15, r1	; 0x0f
        bPollEnable = false;
    3a6c:	18 8a       	std	Y+16, r1	; 0x10
        return 0;
}
    3a6e:	80 e0       	ldi	r24, 0x00	; 0
    3a70:	df 91       	pop	r29
    3a72:	cf 91       	pop	r28
    3a74:	08 95       	ret

00003a76 <_ZN6USBHub16ClearPortFeatureEhhh>:
inline uint8_t USBHub::ClearHubFeature(uint8_t fid) {
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_CLEAR_HUB_FEATURE, USB_REQUEST_CLEAR_FEATURE, fid, 0, 0, 0, 0, NULL, NULL));
}
// Clear Port Feature

inline uint8_t USBHub::ClearPortFeature(uint8_t fid, uint8_t port, uint8_t sel) {
    3a76:	8f 92       	push	r8
    3a78:	9f 92       	push	r9
    3a7a:	af 92       	push	r10
    3a7c:	bf 92       	push	r11
    3a7e:	cf 92       	push	r12
    3a80:	ef 92       	push	r14
    3a82:	0f 93       	push	r16
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_CLEAR_PORT_FEATURE, USB_REQUEST_CLEAR_FEATURE, fid, 0, ((0x0000 | port) | (sel << 8)), 0, 0, NULL, NULL));
    3a84:	a4 2e       	mov	r10, r20
    3a86:	b1 2c       	mov	r11, r1
    3a88:	b2 2a       	or	r11, r18
    3a8a:	1f 92       	push	r1
    3a8c:	1f 92       	push	r1
    3a8e:	1f 92       	push	r1
    3a90:	1f 92       	push	r1
    3a92:	1f 92       	push	r1
    3a94:	1f 92       	push	r1
    3a96:	81 2c       	mov	r8, r1
    3a98:	91 2c       	mov	r9, r1
    3a9a:	c1 2c       	mov	r12, r1
    3a9c:	e6 2e       	mov	r14, r22
    3a9e:	01 e0       	ldi	r16, 0x01	; 1
    3aa0:	23 e2       	ldi	r18, 0x23	; 35
    3aa2:	40 e0       	ldi	r20, 0x00	; 0
    3aa4:	fc 01       	movw	r30, r24
    3aa6:	62 85       	ldd	r22, Z+10	; 0x0a
    3aa8:	82 81       	ldd	r24, Z+2	; 0x02
    3aaa:	93 81       	ldd	r25, Z+3	; 0x03
    3aac:	0e 94 26 18 	call	0x304c	; 0x304c <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser>
    3ab0:	0f 90       	pop	r0
    3ab2:	0f 90       	pop	r0
    3ab4:	0f 90       	pop	r0
    3ab6:	0f 90       	pop	r0
    3ab8:	0f 90       	pop	r0
    3aba:	0f 90       	pop	r0
}
    3abc:	0f 91       	pop	r16
    3abe:	ef 90       	pop	r14
    3ac0:	cf 90       	pop	r12
    3ac2:	bf 90       	pop	r11
    3ac4:	af 90       	pop	r10
    3ac6:	9f 90       	pop	r9
    3ac8:	8f 90       	pop	r8
    3aca:	08 95       	ret

00003acc <_ZN6USBHub13GetPortStatusEhjPh>:
inline uint8_t USBHub::GetHubStatus(uint16_t nbytes, uint8_t* dataptr) {
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_GET_HUB_STATUS, USB_REQUEST_GET_STATUS, 0, 0, 0x0000, nbytes, nbytes, dataptr, NULL));
}
// Get Port Status

inline uint8_t USBHub::GetPortStatus(uint8_t port, uint16_t nbytes, uint8_t* dataptr) {
    3acc:	8f 92       	push	r8
    3ace:	9f 92       	push	r9
    3ad0:	af 92       	push	r10
    3ad2:	bf 92       	push	r11
    3ad4:	cf 92       	push	r12
    3ad6:	ef 92       	push	r14
    3ad8:	0f 93       	push	r16
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_GET_PORT_STATUS, USB_REQUEST_GET_STATUS, 0, 0, port, nbytes, nbytes, dataptr, NULL));
    3ada:	a6 2e       	mov	r10, r22
    3adc:	b1 2c       	mov	r11, r1
    3ade:	1f 92       	push	r1
    3ae0:	1f 92       	push	r1
    3ae2:	3f 93       	push	r19
    3ae4:	2f 93       	push	r18
    3ae6:	5f 93       	push	r21
    3ae8:	4f 93       	push	r20
    3aea:	4a 01       	movw	r8, r20
    3aec:	c1 2c       	mov	r12, r1
    3aee:	e1 2c       	mov	r14, r1
    3af0:	00 e0       	ldi	r16, 0x00	; 0
    3af2:	23 ea       	ldi	r18, 0xA3	; 163
    3af4:	40 e0       	ldi	r20, 0x00	; 0
    3af6:	fc 01       	movw	r30, r24
    3af8:	62 85       	ldd	r22, Z+10	; 0x0a
    3afa:	82 81       	ldd	r24, Z+2	; 0x02
    3afc:	93 81       	ldd	r25, Z+3	; 0x03
    3afe:	0e 94 26 18 	call	0x304c	; 0x304c <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser>
    3b02:	0f 90       	pop	r0
    3b04:	0f 90       	pop	r0
    3b06:	0f 90       	pop	r0
    3b08:	0f 90       	pop	r0
    3b0a:	0f 90       	pop	r0
    3b0c:	0f 90       	pop	r0
}
    3b0e:	0f 91       	pop	r16
    3b10:	ef 90       	pop	r14
    3b12:	cf 90       	pop	r12
    3b14:	bf 90       	pop	r11
    3b16:	af 90       	pop	r10
    3b18:	9f 90       	pop	r9
    3b1a:	8f 90       	pop	r8
    3b1c:	08 95       	ret

00003b1e <_ZN6USBHub14SetPortFeatureEhhh>:
inline uint8_t USBHub::SetHubFeature(uint8_t fid) {
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_SET_HUB_FEATURE, USB_REQUEST_SET_FEATURE, fid, 0, 0, 0, 0, NULL, NULL));
}
// Set Port Feature

inline uint8_t USBHub::SetPortFeature(uint8_t fid, uint8_t port, uint8_t sel) {
    3b1e:	8f 92       	push	r8
    3b20:	9f 92       	push	r9
    3b22:	af 92       	push	r10
    3b24:	bf 92       	push	r11
    3b26:	cf 92       	push	r12
    3b28:	ef 92       	push	r14
    3b2a:	0f 93       	push	r16
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_SET_PORT_FEATURE, USB_REQUEST_SET_FEATURE, fid, 0, (((0x0000 | sel) << 8) | port), 0, 0, NULL, NULL));
    3b2c:	a4 2e       	mov	r10, r20
    3b2e:	b1 2c       	mov	r11, r1
    3b30:	b2 2a       	or	r11, r18
    3b32:	1f 92       	push	r1
    3b34:	1f 92       	push	r1
    3b36:	1f 92       	push	r1
    3b38:	1f 92       	push	r1
    3b3a:	1f 92       	push	r1
    3b3c:	1f 92       	push	r1
    3b3e:	81 2c       	mov	r8, r1
    3b40:	91 2c       	mov	r9, r1
    3b42:	c1 2c       	mov	r12, r1
    3b44:	e6 2e       	mov	r14, r22
    3b46:	03 e0       	ldi	r16, 0x03	; 3
    3b48:	23 e2       	ldi	r18, 0x23	; 35
    3b4a:	40 e0       	ldi	r20, 0x00	; 0
    3b4c:	fc 01       	movw	r30, r24
    3b4e:	62 85       	ldd	r22, Z+10	; 0x0a
    3b50:	82 81       	ldd	r24, Z+2	; 0x02
    3b52:	93 81       	ldd	r25, Z+3	; 0x03
    3b54:	0e 94 26 18 	call	0x304c	; 0x304c <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser>
    3b58:	0f 90       	pop	r0
    3b5a:	0f 90       	pop	r0
    3b5c:	0f 90       	pop	r0
    3b5e:	0f 90       	pop	r0
    3b60:	0f 90       	pop	r0
    3b62:	0f 90       	pop	r0
}
    3b64:	0f 91       	pop	r16
    3b66:	ef 90       	pop	r14
    3b68:	cf 90       	pop	r12
    3b6a:	bf 90       	pop	r11
    3b6c:	af 90       	pop	r10
    3b6e:	9f 90       	pop	r9
    3b70:	8f 90       	pop	r8
    3b72:	08 95       	ret

00003b74 <_ZN6USBHub4InitEhhb>:

        if(pUsb)
                pUsb->RegisterDeviceClass(this);
}

uint8_t USBHub::Init(uint8_t parent, uint8_t port, bool lowspeed) {
    3b74:	2f 92       	push	r2
    3b76:	3f 92       	push	r3
    3b78:	4f 92       	push	r4
    3b7a:	5f 92       	push	r5
    3b7c:	6f 92       	push	r6
    3b7e:	7f 92       	push	r7
    3b80:	8f 92       	push	r8
    3b82:	9f 92       	push	r9
    3b84:	af 92       	push	r10
    3b86:	bf 92       	push	r11
    3b88:	cf 92       	push	r12
    3b8a:	df 92       	push	r13
    3b8c:	ef 92       	push	r14
    3b8e:	ff 92       	push	r15
    3b90:	0f 93       	push	r16
    3b92:	1f 93       	push	r17
    3b94:	cf 93       	push	r28
    3b96:	df 93       	push	r29
    3b98:	cd b7       	in	r28, 0x3d	; 61
    3b9a:	de b7       	in	r29, 0x3e	; 62
    3b9c:	e8 97       	sbiw	r28, 0x38	; 56
    3b9e:	0f b6       	in	r0, 0x3f	; 63
    3ba0:	f8 94       	cli
    3ba2:	de bf       	out	0x3e, r29	; 62
    3ba4:	0f be       	out	0x3f, r0	; 63
    3ba6:	cd bf       	out	0x3d, r28	; 61

        AddressPool &addrPool = pUsb->GetAddressPool();

        //switch (bInitState) {
        //        case 0:
        if(bAddress)
    3ba8:	dc 01       	movw	r26, r24
    3baa:	1a 96       	adiw	r26, 0x0a	; 10
    3bac:	3c 91       	ld	r19, X
    3bae:	31 11       	cpse	r19, r1
    3bb0:	07 c1       	rjmp	.+526    	; 0x3dc0 <_ZN6USBHub4InitEhhb+0x24c>
    3bb2:	12 2f       	mov	r17, r18
    3bb4:	24 2e       	mov	r2, r20
    3bb6:	36 2e       	mov	r3, r22
    3bb8:	3c 01       	movw	r6, r24
        uint16_t cd_len = 0;

        //USBTRACE("\r\nHub Init Start ");
        //D_PrintHex<uint8_t > (bInitState, 0x80);

        AddressPool &addrPool = pUsb->GetAddressPool();
    3bba:	fc 01       	movw	r30, r24
    3bbc:	c2 80       	ldd	r12, Z+2	; 0x02
    3bbe:	d3 80       	ldd	r13, Z+3	; 0x03
        //        case 0:
        if(bAddress)
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;

        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
    3bc0:	d6 01       	movw	r26, r12
    3bc2:	ed 91       	ld	r30, X+
    3bc4:	fc 91       	ld	r31, X
    3bc6:	01 90       	ld	r0, Z+
    3bc8:	f0 81       	ld	r31, Z
    3bca:	e0 2d       	mov	r30, r0
    3bcc:	60 e0       	ldi	r22, 0x00	; 0
    3bce:	c6 01       	movw	r24, r12
    3bd0:	09 95       	icall
    3bd2:	7c 01       	movw	r14, r24

        if(!p)
    3bd4:	00 97       	sbiw	r24, 0x00	; 0
    3bd6:	09 f4       	brne	.+2      	; 0x3bda <_ZN6USBHub4InitEhhb+0x66>
    3bd8:	f5 c0       	rjmp	.+490    	; 0x3dc4 <_ZN6USBHub4InitEhhb+0x250>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;

        if(!p->epinfo)
    3bda:	fc 01       	movw	r30, r24
    3bdc:	a0 80       	ld	r10, Z
    3bde:	b1 80       	ldd	r11, Z+1	; 0x01
    3be0:	a1 14       	cp	r10, r1
    3be2:	b1 04       	cpc	r11, r1
    3be4:	09 f4       	brne	.+2      	; 0x3be8 <_ZN6USBHub4InitEhhb+0x74>
    3be6:	f0 c0       	rjmp	.+480    	; 0x3dc8 <_ZN6USBHub4InitEhhb+0x254>

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
    3be8:	43 01       	movw	r8, r6
    3bea:	f4 e0       	ldi	r31, 0x04	; 4
    3bec:	8f 0e       	add	r8, r31
    3bee:	91 1c       	adc	r9, r1
    3bf0:	dc 01       	movw	r26, r24
    3bf2:	11 96       	adiw	r26, 0x01	; 1
    3bf4:	9c 92       	st	X, r9
    3bf6:	8e 92       	st	-X, r8

        p->lowspeed = lowspeed;
    3bf8:	14 96       	adiw	r26, 0x04	; 4
    3bfa:	1c 93       	st	X, r17

        // Get device descriptor
        rcode = pUsb->getDevDescr(0, 0, 8, (uint8_t*)buf);
    3bfc:	fe 01       	movw	r30, r28
    3bfe:	31 96       	adiw	r30, 0x01	; 1
    3c00:	2f 01       	movw	r4, r30
    3c02:	8f 01       	movw	r16, r30
    3c04:	28 e0       	ldi	r18, 0x08	; 8
    3c06:	30 e0       	ldi	r19, 0x00	; 0
    3c08:	40 e0       	ldi	r20, 0x00	; 0
    3c0a:	60 e0       	ldi	r22, 0x00	; 0
    3c0c:	d3 01       	movw	r26, r6
    3c0e:	12 96       	adiw	r26, 0x02	; 2
    3c10:	8d 91       	ld	r24, X+
    3c12:	9c 91       	ld	r25, X
    3c14:	13 97       	sbiw	r26, 0x03	; 3
    3c16:	0e 94 06 19 	call	0x320c	; 0x320c <_ZN3USB11getDevDescrEhhjPh>

        p->lowspeed = false;
    3c1a:	f7 01       	movw	r30, r14
    3c1c:	14 82       	std	Z+4, r1	; 0x04

        if(!rcode)
    3c1e:	81 11       	cpse	r24, r1
    3c20:	d9 c0       	rjmp	.+434    	; 0x3dd4 <_ZN6USBHub4InitEhhb+0x260>
                return rcode;
        }

        // Extract device class from device descriptor
        // If device class is not a hub return
        if(udd->bDeviceClass != 0x09)
    3c22:	8d 81       	ldd	r24, Y+5	; 0x05
    3c24:	89 30       	cpi	r24, 0x09	; 9
    3c26:	09 f0       	breq	.+2      	; 0x3c2a <_ZN6USBHub4InitEhhb+0xb6>
    3c28:	d1 c0       	rjmp	.+418    	; 0x3dcc <_ZN6USBHub4InitEhhb+0x258>
        rcode = pUsb->getDevDescr(0, 0, 8, (uint8_t*)buf);

        p->lowspeed = false;

        if(!rcode)
                len = (buf[0] > 32) ? 32 : buf[0];
    3c2a:	09 81       	ldd	r16, Y+1	; 0x01
        // If device class is not a hub return
        if(udd->bDeviceClass != 0x09)
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, (udd->bDeviceClass == 0x09) ? true : false, port);
    3c2c:	d6 01       	movw	r26, r12
    3c2e:	ed 91       	ld	r30, X+
    3c30:	fc 91       	ld	r31, X
    3c32:	02 80       	ldd	r0, Z+2	; 0x02
    3c34:	f3 81       	ldd	r31, Z+3	; 0x03
    3c36:	e0 2d       	mov	r30, r0
    3c38:	22 2d       	mov	r18, r2
    3c3a:	41 e0       	ldi	r20, 0x01	; 1
    3c3c:	63 2d       	mov	r22, r3
    3c3e:	c6 01       	movw	r24, r12
    3c40:	09 95       	icall
    3c42:	f3 01       	movw	r30, r6
    3c44:	82 87       	std	Z+10, r24	; 0x0a

        if(!bAddress)
    3c46:	88 23       	and	r24, r24
    3c48:	09 f4       	brne	.+2      	; 0x3c4c <_ZN6USBHub4InitEhhb+0xd8>
    3c4a:	c2 c0       	rjmp	.+388    	; 0x3dd0 <_ZN6USBHub4InitEhhb+0x25c>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;

        // Extract Max Packet Size from the device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
    3c4c:	98 85       	ldd	r25, Y+8	; 0x08
    3c4e:	95 83       	std	Z+5, r25	; 0x05

        // Assign new address to the device
        rcode = pUsb->setAddr(0, 0, bAddress);
    3c50:	28 2f       	mov	r18, r24
    3c52:	40 e0       	ldi	r20, 0x00	; 0
    3c54:	60 e0       	ldi	r22, 0x00	; 0
    3c56:	82 81       	ldd	r24, Z+2	; 0x02
    3c58:	93 81       	ldd	r25, Z+3	; 0x03
    3c5a:	0e 94 b1 19 	call	0x3362	; 0x3362 <_ZN3USB7setAddrEhhh>
    3c5e:	18 2f       	mov	r17, r24

        if(rcode) {
    3c60:	88 23       	and	r24, r24
    3c62:	89 f0       	breq	.+34     	; 0x3c86 <_ZN6USBHub4InitEhhb+0x112>
                // Restore p->epinfo
                p->epinfo = oldep_ptr;
    3c64:	d7 01       	movw	r26, r14
    3c66:	ad 92       	st	X+, r10
    3c68:	bc 92       	st	X, r11
                addrPool.FreeAddress(bAddress);
    3c6a:	d6 01       	movw	r26, r12
    3c6c:	ed 91       	ld	r30, X+
    3c6e:	fc 91       	ld	r31, X
    3c70:	04 80       	ldd	r0, Z+4	; 0x04
    3c72:	f5 81       	ldd	r31, Z+5	; 0x05
    3c74:	e0 2d       	mov	r30, r0
    3c76:	d3 01       	movw	r26, r6
    3c78:	1a 96       	adiw	r26, 0x0a	; 10
    3c7a:	6c 91       	ld	r22, X
    3c7c:	c6 01       	movw	r24, r12
    3c7e:	09 95       	icall
                bAddress = 0;
    3c80:	f3 01       	movw	r30, r6
    3c82:	12 86       	std	Z+10, r1	; 0x0a
                return rcode;
    3c84:	ab c0       	rjmp	.+342    	; 0x3ddc <_ZN6USBHub4InitEhhb+0x268>
        rcode = pUsb->getDevDescr(0, 0, 8, (uint8_t*)buf);

        p->lowspeed = false;

        if(!rcode)
                len = (buf[0] > 32) ? 32 : buf[0];
    3c86:	20 2f       	mov	r18, r16
    3c88:	01 32       	cpi	r16, 0x21	; 33
    3c8a:	08 f0       	brcs	.+2      	; 0x3c8e <_ZN6USBHub4InitEhhb+0x11a>
    3c8c:	20 e2       	ldi	r18, 0x20	; 32
        }

        //USBTRACE2("\r\nHub address: ", bAddress );

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    3c8e:	d7 01       	movw	r26, r14
    3c90:	ad 92       	st	X+, r10
    3c92:	bc 92       	st	X, r11

        if(len)
    3c94:	21 11       	cpse	r18, r1
    3c96:	0b c0       	rjmp	.+22     	; 0x3cae <_ZN6USBHub4InitEhhb+0x13a>

        if(rcode)
                goto FailGetDevDescr;

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 2, epInfo);
    3c98:	94 01       	movw	r18, r8
    3c9a:	42 e0       	ldi	r20, 0x02	; 2
    3c9c:	f3 01       	movw	r30, r6
    3c9e:	62 85       	ldd	r22, Z+10	; 0x0a
    3ca0:	82 81       	ldd	r24, Z+2	; 0x02
    3ca2:	93 81       	ldd	r25, Z+3	; 0x03
    3ca4:	0e 94 21 14 	call	0x2842	; 0x2842 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>

        if(rcode)
    3ca8:	81 11       	cpse	r24, r1
    3caa:	97 c0       	rjmp	.+302    	; 0x3dda <_ZN6USBHub4InitEhhb+0x266>
    3cac:	10 c0       	rjmp	.+32     	; 0x3cce <_ZN6USBHub4InitEhhb+0x15a>

        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if(len)
                rcode = pUsb->getDevDescr(bAddress, 0, len, (uint8_t*)buf);
    3cae:	30 e0       	ldi	r19, 0x00	; 0
    3cb0:	82 01       	movw	r16, r4
    3cb2:	40 e0       	ldi	r20, 0x00	; 0
    3cb4:	d3 01       	movw	r26, r6
    3cb6:	1a 96       	adiw	r26, 0x0a	; 10
    3cb8:	6c 91       	ld	r22, X
    3cba:	1a 97       	sbiw	r26, 0x0a	; 10
    3cbc:	12 96       	adiw	r26, 0x02	; 2
    3cbe:	8d 91       	ld	r24, X+
    3cc0:	9c 91       	ld	r25, X
    3cc2:	13 97       	sbiw	r26, 0x03	; 3
    3cc4:	0e 94 06 19 	call	0x320c	; 0x320c <_ZN3USB11getDevDescrEhhjPh>

        if(rcode)
    3cc8:	81 11       	cpse	r24, r1
    3cca:	87 c0       	rjmp	.+270    	; 0x3dda <_ZN6USBHub4InitEhhb+0x266>
    3ccc:	e5 cf       	rjmp	.-54     	; 0x3c98 <_ZN6USBHub4InitEhhb+0x124>
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_CLEAR_PORT_FEATURE, USB_REQUEST_CLEAR_FEATURE, fid, 0, ((0x0000 | port) | (sel << 8)), 0, 0, NULL, NULL));
}
// Get Hub Descriptor

inline uint8_t USBHub::GetHubDescriptor(uint8_t index, uint16_t nbytes, uint8_t *dataptr) {
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_GET_HUB_DESCRIPTOR, USB_REQUEST_GET_DESCRIPTOR, index, 0x29, 0, nbytes, nbytes, dataptr, NULL));
    3cce:	1f 92       	push	r1
    3cd0:	1f 92       	push	r1
    3cd2:	5f 92       	push	r5
    3cd4:	4f 92       	push	r4
    3cd6:	1f 92       	push	r1
    3cd8:	88 e0       	ldi	r24, 0x08	; 8
    3cda:	8f 93       	push	r24
    3cdc:	88 e0       	ldi	r24, 0x08	; 8
    3cde:	88 2e       	mov	r8, r24
    3ce0:	91 2c       	mov	r9, r1
    3ce2:	a1 2c       	mov	r10, r1
    3ce4:	b1 2c       	mov	r11, r1
    3ce6:	99 e2       	ldi	r25, 0x29	; 41
    3ce8:	c9 2e       	mov	r12, r25
    3cea:	e1 2c       	mov	r14, r1
    3cec:	06 e0       	ldi	r16, 0x06	; 6
    3cee:	20 ea       	ldi	r18, 0xA0	; 160
    3cf0:	40 e0       	ldi	r20, 0x00	; 0
    3cf2:	f3 01       	movw	r30, r6
    3cf4:	62 85       	ldd	r22, Z+10	; 0x0a
    3cf6:	82 81       	ldd	r24, Z+2	; 0x02
    3cf8:	93 81       	ldd	r25, Z+3	; 0x03
    3cfa:	0e 94 26 18 	call	0x304c	; 0x304c <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser>
    3cfe:	18 2f       	mov	r17, r24

        //        case 1:
        // Get hub descriptor
        rcode = GetHubDescriptor(0, 8, buf);

        if(rcode)
    3d00:	0f 90       	pop	r0
    3d02:	0f 90       	pop	r0
    3d04:	0f 90       	pop	r0
    3d06:	0f 90       	pop	r0
    3d08:	0f 90       	pop	r0
    3d0a:	0f 90       	pop	r0
    3d0c:	81 11       	cpse	r24, r1
    3d0e:	66 c0       	rjmp	.+204    	; 0x3ddc <_ZN6USBHub4InitEhhb+0x268>
                goto FailGetHubDescr;

        // Save number of ports for future use
        bNbrPorts = hd->bNbrPorts;
    3d10:	8b 81       	ldd	r24, Y+3	; 0x03
    3d12:	d3 01       	movw	r26, r6
    3d14:	1b 96       	adiw	r26, 0x0b	; 11
    3d16:	8c 93       	st	X, r24
    3d18:	1b 97       	sbiw	r26, 0x0b	; 11

        //                bInitState = 2;

        //        case 2:
        // Read configuration Descriptor in Order To Obtain Proper Configuration Value
        rcode = pUsb->getConfDescr(bAddress, 0, 8, 0, buf);
    3d1a:	72 01       	movw	r14, r4
    3d1c:	00 e0       	ldi	r16, 0x00	; 0
    3d1e:	28 e0       	ldi	r18, 0x08	; 8
    3d20:	30 e0       	ldi	r19, 0x00	; 0
    3d22:	40 e0       	ldi	r20, 0x00	; 0
    3d24:	1a 96       	adiw	r26, 0x0a	; 10
    3d26:	6c 91       	ld	r22, X
    3d28:	1a 97       	sbiw	r26, 0x0a	; 10
    3d2a:	12 96       	adiw	r26, 0x02	; 2
    3d2c:	8d 91       	ld	r24, X+
    3d2e:	9c 91       	ld	r25, X
    3d30:	13 97       	sbiw	r26, 0x03	; 3
    3d32:	0e 94 2d 19 	call	0x325a	; 0x325a <_ZN3USB12getConfDescrEhhjhPh>

        if(!rcode) {
    3d36:	81 11       	cpse	r24, r1
    3d38:	50 c0       	rjmp	.+160    	; 0x3dda <_ZN6USBHub4InitEhhb+0x266>
                cd_len = ucd->wTotalLength;
                rcode = pUsb->getConfDescr(bAddress, 0, cd_len, 0, buf);
    3d3a:	2b 81       	ldd	r18, Y+3	; 0x03
    3d3c:	3c 81       	ldd	r19, Y+4	; 0x04
    3d3e:	40 e0       	ldi	r20, 0x00	; 0
    3d40:	f3 01       	movw	r30, r6
    3d42:	62 85       	ldd	r22, Z+10	; 0x0a
    3d44:	82 81       	ldd	r24, Z+2	; 0x02
    3d46:	93 81       	ldd	r25, Z+3	; 0x03
    3d48:	0e 94 2d 19 	call	0x325a	; 0x325a <_ZN3USB12getConfDescrEhhjhPh>
        }
        if(rcode)
    3d4c:	81 11       	cpse	r24, r1
    3d4e:	45 c0       	rjmp	.+138    	; 0x3dda <_ZN6USBHub4InitEhhb+0x266>
        // The following code is of no practical use in real life applications.
        // It only intended for the usb protocol sniffer to properly parse hub-class requests.
        {
                uint8_t buf2[24];

                rcode = pUsb->getConfDescr(bAddress, 0, buf[0], 0, buf2);
    3d50:	29 81       	ldd	r18, Y+1	; 0x01
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	ce 01       	movw	r24, r28
    3d56:	81 96       	adiw	r24, 0x21	; 33
    3d58:	7c 01       	movw	r14, r24
    3d5a:	40 e0       	ldi	r20, 0x00	; 0
    3d5c:	d3 01       	movw	r26, r6
    3d5e:	1a 96       	adiw	r26, 0x0a	; 10
    3d60:	6c 91       	ld	r22, X
    3d62:	1a 97       	sbiw	r26, 0x0a	; 10
    3d64:	12 96       	adiw	r26, 0x02	; 2
    3d66:	8d 91       	ld	r24, X+
    3d68:	9c 91       	ld	r25, X
    3d6a:	13 97       	sbiw	r26, 0x03	; 3
    3d6c:	0e 94 2d 19 	call	0x325a	; 0x325a <_ZN3USB12getConfDescrEhhjhPh>

                if(rcode)
    3d70:	81 11       	cpse	r24, r1
    3d72:	33 c0       	rjmp	.+102    	; 0x3dda <_ZN6USBHub4InitEhhb+0x266>
                        goto FailGetConfDescr;
        }

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, buf[5]);
    3d74:	2e 81       	ldd	r18, Y+6	; 0x06
    3d76:	40 e0       	ldi	r20, 0x00	; 0
    3d78:	f3 01       	movw	r30, r6
    3d7a:	62 85       	ldd	r22, Z+10	; 0x0a
    3d7c:	82 81       	ldd	r24, Z+2	; 0x02
    3d7e:	93 81       	ldd	r25, Z+3	; 0x03
    3d80:	0e 94 1f 1b 	call	0x363e	; 0x363e <_ZN3USB7setConfEhhh>

        if(rcode)
    3d84:	81 11       	cpse	r24, r1
    3d86:	29 c0       	rjmp	.+82     	; 0x3dda <_ZN6USBHub4InitEhhb+0x266>
    3d88:	01 e0       	ldi	r16, 0x01	; 1

        //                bInitState = 3;

        //        case 3:
        // Power on all ports
        for(uint8_t j = 1; j <= bNbrPorts; j++)
    3d8a:	d3 01       	movw	r26, r6
    3d8c:	1b 96       	adiw	r26, 0x0b	; 11
    3d8e:	8c 91       	ld	r24, X
    3d90:	80 17       	cp	r24, r16
    3d92:	40 f0       	brcs	.+16     	; 0x3da4 <_ZN6USBHub4InitEhhb+0x230>
                SetPortFeature(HUB_FEATURE_PORT_POWER, j, 0); //HubPortPowerOn(j);
    3d94:	20 e0       	ldi	r18, 0x00	; 0
    3d96:	40 2f       	mov	r20, r16
    3d98:	68 e0       	ldi	r22, 0x08	; 8
    3d9a:	c3 01       	movw	r24, r6
    3d9c:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <_ZN6USBHub14SetPortFeatureEhhh>

        //                bInitState = 3;

        //        case 3:
        // Power on all ports
        for(uint8_t j = 1; j <= bNbrPorts; j++)
    3da0:	0f 5f       	subi	r16, 0xFF	; 255
    3da2:	f3 cf       	rjmp	.-26     	; 0x3d8a <_ZN6USBHub4InitEhhb+0x216>
                SetPortFeature(HUB_FEATURE_PORT_POWER, j, 0); //HubPortPowerOn(j);

        pUsb->SetHubPreMask();
    3da4:	d3 01       	movw	r26, r6
    3da6:	12 96       	adiw	r26, 0x02	; 2
    3da8:	ed 91       	ld	r30, X+
    3daa:	fc 91       	ld	r31, X
    3dac:	13 97       	sbiw	r26, 0x03	; 3
    3dae:	ea 58       	subi	r30, 0x8A	; 138
    3db0:	ff 4f       	sbci	r31, 0xFF	; 255
    3db2:	80 81       	ld	r24, Z
    3db4:	84 60       	ori	r24, 0x04	; 4
    3db6:	80 83       	st	Z, r24
        bPollEnable = true;
    3db8:	81 e0       	ldi	r24, 0x01	; 1
    3dba:	50 96       	adiw	r26, 0x10	; 16
    3dbc:	8c 93       	st	X, r24
        //                bInitState = 0;
        //}
        //bInitState = 0;
        //USBTRACE("...OK\r\n");
        return 0;
    3dbe:	0e c0       	rjmp	.+28     	; 0x3ddc <_ZN6USBHub4InitEhhb+0x268>
        AddressPool &addrPool = pUsb->GetAddressPool();

        //switch (bInitState) {
        //        case 0:
        if(bAddress)
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
    3dc0:	19 ed       	ldi	r17, 0xD9	; 217
    3dc2:	0c c0       	rjmp	.+24     	; 0x3ddc <_ZN6USBHub4InitEhhb+0x268>

        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);

        if(!p)
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    3dc4:	16 ed       	ldi	r17, 0xD6	; 214
    3dc6:	0a c0       	rjmp	.+20     	; 0x3ddc <_ZN6USBHub4InitEhhb+0x268>

        if(!p->epinfo)
                return USB_ERROR_EPINFO_IS_NULL;
    3dc8:	17 ed       	ldi	r17, 0xD7	; 215
    3dca:	08 c0       	rjmp	.+16     	; 0x3ddc <_ZN6USBHub4InitEhhb+0x268>
        }

        // Extract device class from device descriptor
        // If device class is not a hub return
        if(udd->bDeviceClass != 0x09)
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
    3dcc:	11 ed       	ldi	r17, 0xD1	; 209
    3dce:	06 c0       	rjmp	.+12     	; 0x3ddc <_ZN6USBHub4InitEhhb+0x268>

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, (udd->bDeviceClass == 0x09) ? true : false, port);

        if(!bAddress)
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    3dd0:	14 ed       	ldi	r17, 0xD4	; 212
    3dd2:	04 c0       	rjmp	.+8      	; 0x3ddc <_ZN6USBHub4InitEhhb+0x268>
        if(!rcode)
                len = (buf[0] > 32) ? 32 : buf[0];

        if(rcode) {
                // Restore p->epinfo
                p->epinfo = oldep_ptr;
    3dd4:	f7 01       	movw	r30, r14
    3dd6:	b1 82       	std	Z+1, r11	; 0x01
    3dd8:	a0 82       	st	Z, r10
                return rcode;
    3dda:	18 2f       	mov	r17, r24
        goto Fail;

Fail:
        USBTRACE("...FAIL\r\n");
        return rcode;
}
    3ddc:	81 2f       	mov	r24, r17
    3dde:	e8 96       	adiw	r28, 0x38	; 56
    3de0:	0f b6       	in	r0, 0x3f	; 63
    3de2:	f8 94       	cli
    3de4:	de bf       	out	0x3e, r29	; 62
    3de6:	0f be       	out	0x3f, r0	; 63
    3de8:	cd bf       	out	0x3d, r28	; 61
    3dea:	df 91       	pop	r29
    3dec:	cf 91       	pop	r28
    3dee:	1f 91       	pop	r17
    3df0:	0f 91       	pop	r16
    3df2:	ff 90       	pop	r15
    3df4:	ef 90       	pop	r14
    3df6:	df 90       	pop	r13
    3df8:	cf 90       	pop	r12
    3dfa:	bf 90       	pop	r11
    3dfc:	af 90       	pop	r10
    3dfe:	9f 90       	pop	r9
    3e00:	8f 90       	pop	r8
    3e02:	7f 90       	pop	r7
    3e04:	6f 90       	pop	r6
    3e06:	5f 90       	pop	r5
    3e08:	4f 90       	pop	r4
    3e0a:	3f 90       	pop	r3
    3e0c:	2f 90       	pop	r2
    3e0e:	08 95       	ret

00003e10 <_ZN6USBHub12ResetHubPortEh>:
                        return rcode;
        } // for
        return 0;
}

void USBHub::ResetHubPort(uint8_t port) {
    3e10:	cf 92       	push	r12
    3e12:	df 92       	push	r13
    3e14:	ff 92       	push	r15
    3e16:	0f 93       	push	r16
    3e18:	1f 93       	push	r17
    3e1a:	cf 93       	push	r28
    3e1c:	df 93       	push	r29
    3e1e:	00 d0       	rcall	.+0      	; 0x3e20 <_ZN6USBHub12ResetHubPortEh+0x10>
    3e20:	00 d0       	rcall	.+0      	; 0x3e22 <_ZN6USBHub12ResetHubPortEh+0x12>
    3e22:	cd b7       	in	r28, 0x3d	; 61
    3e24:	de b7       	in	r29, 0x3e	; 62
    3e26:	8c 01       	movw	r16, r24
    3e28:	f6 2e       	mov	r15, r22
        HubEvent evt;
        evt.bmEvent = 0;
    3e2a:	19 82       	std	Y+1, r1	; 0x01
    3e2c:	1a 82       	std	Y+2, r1	; 0x02
    3e2e:	1b 82       	std	Y+3, r1	; 0x03
    3e30:	1c 82       	std	Y+4, r1	; 0x04
        uint8_t rcode;

        ClearPortFeature(HUB_FEATURE_C_PORT_ENABLE, port, 0);
    3e32:	20 e0       	ldi	r18, 0x00	; 0
    3e34:	46 2f       	mov	r20, r22
    3e36:	61 e1       	ldi	r22, 0x11	; 17
    3e38:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <_ZN6USBHub16ClearPortFeatureEhhh>
        ClearPortFeature(HUB_FEATURE_C_PORT_CONNECTION, port, 0);
    3e3c:	20 e0       	ldi	r18, 0x00	; 0
    3e3e:	4f 2d       	mov	r20, r15
    3e40:	60 e1       	ldi	r22, 0x10	; 16
    3e42:	c8 01       	movw	r24, r16
    3e44:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <_ZN6USBHub16ClearPortFeatureEhhh>
        SetPortFeature(HUB_FEATURE_PORT_RESET, port, 0);
    3e48:	20 e0       	ldi	r18, 0x00	; 0
    3e4a:	4f 2d       	mov	r20, r15
    3e4c:	64 e0       	ldi	r22, 0x04	; 4
    3e4e:	c8 01       	movw	r24, r16
    3e50:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <_ZN6USBHub14SetPortFeatureEhhh>
    3e54:	83 e0       	ldi	r24, 0x03	; 3
    3e56:	c8 2e       	mov	r12, r24
    3e58:	d1 2c       	mov	r13, r1


        for(int i = 0; i < 3; i++) {
                rcode = GetPortStatus(port, 4, evt.evtBuff);
    3e5a:	9e 01       	movw	r18, r28
    3e5c:	2f 5f       	subi	r18, 0xFF	; 255
    3e5e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e60:	44 e0       	ldi	r20, 0x04	; 4
    3e62:	50 e0       	ldi	r21, 0x00	; 0
    3e64:	6f 2d       	mov	r22, r15
    3e66:	c8 01       	movw	r24, r16
    3e68:	0e 94 66 1d 	call	0x3acc	; 0x3acc <_ZN6USBHub13GetPortStatusEhjPh>
                if(rcode) break; // Some kind of error, bail.
    3e6c:	88 23       	and	r24, r24
    3e6e:	f1 f0       	breq	.+60     	; 0x3eac <_ZN6USBHub12ResetHubPortEh+0x9c>
                if(evt.bmEvent == bmHUB_PORT_EVENT_RESET_COMPLETE || evt.bmEvent == bmHUB_PORT_EVENT_LS_RESET_COMPLETE) {
                        break;
                }
                delay(100); // simulate polling.
        }
        ClearPortFeature(HUB_FEATURE_C_PORT_RESET, port, 0);
    3e70:	20 e0       	ldi	r18, 0x00	; 0
    3e72:	4f 2d       	mov	r20, r15
    3e74:	64 e1       	ldi	r22, 0x14	; 20
    3e76:	c8 01       	movw	r24, r16
    3e78:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <_ZN6USBHub16ClearPortFeatureEhhh>
        ClearPortFeature(HUB_FEATURE_C_PORT_CONNECTION, port, 0);
    3e7c:	20 e0       	ldi	r18, 0x00	; 0
    3e7e:	4f 2d       	mov	r20, r15
    3e80:	60 e1       	ldi	r22, 0x10	; 16
    3e82:	c8 01       	movw	r24, r16
    3e84:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <_ZN6USBHub16ClearPortFeatureEhhh>
        delay(20);
    3e88:	64 e1       	ldi	r22, 0x14	; 20
    3e8a:	70 e0       	ldi	r23, 0x00	; 0
    3e8c:	80 e0       	ldi	r24, 0x00	; 0
    3e8e:	90 e0       	ldi	r25, 0x00	; 0
    3e90:	0e 94 4d 09 	call	0x129a	; 0x129a <delay>
}
    3e94:	0f 90       	pop	r0
    3e96:	0f 90       	pop	r0
    3e98:	0f 90       	pop	r0
    3e9a:	0f 90       	pop	r0
    3e9c:	df 91       	pop	r29
    3e9e:	cf 91       	pop	r28
    3ea0:	1f 91       	pop	r17
    3ea2:	0f 91       	pop	r16
    3ea4:	ff 90       	pop	r15
    3ea6:	df 90       	pop	r13
    3ea8:	cf 90       	pop	r12
    3eaa:	08 95       	ret


        for(int i = 0; i < 3; i++) {
                rcode = GetPortStatus(port, 4, evt.evtBuff);
                if(rcode) break; // Some kind of error, bail.
                if(evt.bmEvent == bmHUB_PORT_EVENT_RESET_COMPLETE || evt.bmEvent == bmHUB_PORT_EVENT_LS_RESET_COMPLETE) {
    3eac:	89 81       	ldd	r24, Y+1	; 0x01
    3eae:	9a 81       	ldd	r25, Y+2	; 0x02
    3eb0:	ab 81       	ldd	r26, Y+3	; 0x03
    3eb2:	bc 81       	ldd	r27, Y+4	; 0x04
    3eb4:	9d 7f       	andi	r25, 0xFD	; 253
    3eb6:	83 30       	cpi	r24, 0x03	; 3
    3eb8:	91 40       	sbci	r25, 0x01	; 1
    3eba:	a0 41       	sbci	r26, 0x10	; 16
    3ebc:	b1 05       	cpc	r27, r1
    3ebe:	c1 f2       	breq	.-80     	; 0x3e70 <_ZN6USBHub12ResetHubPortEh+0x60>
                        break;
                }
                delay(100); // simulate polling.
    3ec0:	64 e6       	ldi	r22, 0x64	; 100
    3ec2:	70 e0       	ldi	r23, 0x00	; 0
    3ec4:	80 e0       	ldi	r24, 0x00	; 0
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	0e 94 4d 09 	call	0x129a	; 0x129a <delay>
    3ecc:	81 e0       	ldi	r24, 0x01	; 1
    3ece:	c8 1a       	sub	r12, r24
    3ed0:	d1 08       	sbc	r13, r1
        ClearPortFeature(HUB_FEATURE_C_PORT_ENABLE, port, 0);
        ClearPortFeature(HUB_FEATURE_C_PORT_CONNECTION, port, 0);
        SetPortFeature(HUB_FEATURE_PORT_RESET, port, 0);


        for(int i = 0; i < 3; i++) {
    3ed2:	19 f6       	brne	.-122    	; 0x3e5a <_ZN6USBHub12ResetHubPortEh+0x4a>
    3ed4:	cd cf       	rjmp	.-102    	; 0x3e70 <_ZN6USBHub12ResetHubPortEh+0x60>

00003ed6 <_ZN6USBHubC1EP3USB>:
 */
#include "usbhub.h"

bool USBHub::bResetInitiated = false;

USBHub::USBHub(USB *p) :
    3ed6:	fc 01       	movw	r30, r24
pUsb(p),
bAddress(0),
bNbrPorts(0),
//bInitState(0),
qNextPollTime(0),
bPollEnable(false) {
    3ed8:	8d ec       	ldi	r24, 0xCD	; 205
    3eda:	92 e0       	ldi	r25, 0x02	; 2
    3edc:	91 83       	std	Z+1, r25	; 0x01
    3ede:	80 83       	st	Z, r24
    3ee0:	73 83       	std	Z+3, r23	; 0x03
    3ee2:	62 83       	std	Z+2, r22	; 0x02
    3ee4:	12 86       	std	Z+10, r1	; 0x0a
    3ee6:	13 86       	std	Z+11, r1	; 0x0b
    3ee8:	14 86       	std	Z+12, r1	; 0x0c
    3eea:	15 86       	std	Z+13, r1	; 0x0d
    3eec:	16 86       	std	Z+14, r1	; 0x0e
    3eee:	17 86       	std	Z+15, r1	; 0x0f
    3ef0:	10 8a       	std	Z+16, r1	; 0x10
        epInfo[0].epAddr = 0;
    3ef2:	14 82       	std	Z+4, r1	; 0x04
        epInfo[0].maxPktSize = 8;
    3ef4:	88 e0       	ldi	r24, 0x08	; 8
    3ef6:	85 83       	std	Z+5, r24	; 0x05
        epInfo[0].bmSndToggle = 0;
        epInfo[0].bmRcvToggle = 0;
        epInfo[0].bmNakPower = USB_NAK_MAX_POWER;
    3ef8:	9c e3       	ldi	r25, 0x3C	; 60
    3efa:	96 83       	std	Z+6, r25	; 0x06

        epInfo[1].epAddr = 1;
    3efc:	91 e0       	ldi	r25, 0x01	; 1
    3efe:	97 83       	std	Z+7, r25	; 0x07
        epInfo[1].maxPktSize = 8; //kludge
    3f00:	80 87       	std	Z+8, r24	; 0x08
        epInfo[1].bmSndToggle = 0;
        epInfo[1].bmRcvToggle = 0;
        epInfo[1].bmNakPower = USB_NAK_NOWAIT;
    3f02:	84 e0       	ldi	r24, 0x04	; 4
    3f04:	81 87       	std	Z+9, r24	; 0x09

        if(pUsb)
    3f06:	61 15       	cp	r22, r1
    3f08:	71 05       	cpc	r23, r1
    3f0a:	b1 f0       	breq	.+44     	; 0x3f38 <_ZN6USBHubC1EP3USB+0x62>
    3f0c:	db 01       	movw	r26, r22
    3f0e:	aa 5a       	subi	r26, 0xAA	; 170
    3f10:	bf 4f       	sbci	r27, 0xFF	; 255
    3f12:	80 e0       	ldi	r24, 0x00	; 0
    3f14:	90 e0       	ldi	r25, 0x00	; 0
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
                        if(!devConfig[i]) {
    3f16:	2d 91       	ld	r18, X+
    3f18:	3d 91       	ld	r19, X+
    3f1a:	23 2b       	or	r18, r19
    3f1c:	49 f4       	brne	.+18     	; 0x3f30 <_ZN6USBHubC1EP3USB+0x5a>
                                devConfig[i] = pdev;
    3f1e:	8b 96       	adiw	r24, 0x2b	; 43
    3f20:	88 0f       	add	r24, r24
    3f22:	99 1f       	adc	r25, r25
    3f24:	db 01       	movw	r26, r22
    3f26:	a8 0f       	add	r26, r24
    3f28:	b9 1f       	adc	r27, r25
    3f2a:	ed 93       	st	X+, r30
    3f2c:	fc 93       	st	X, r31
    3f2e:	08 95       	ret
    3f30:	01 96       	adiw	r24, 0x01	; 1
        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    3f32:	80 31       	cpi	r24, 0x10	; 16
    3f34:	91 05       	cpc	r25, r1
    3f36:	79 f7       	brne	.-34     	; 0x3f16 <_ZN6USBHubC1EP3USB+0x40>
    3f38:	08 95       	ret

00003f3a <_ZN6USBHub16PortStatusChangeEhR8HubEvent>:
        ClearPortFeature(HUB_FEATURE_C_PORT_RESET, port, 0);
        ClearPortFeature(HUB_FEATURE_C_PORT_CONNECTION, port, 0);
        delay(20);
}

uint8_t USBHub::PortStatusChange(uint8_t port, HubEvent &evt) {
    3f3a:	ef 92       	push	r14
    3f3c:	ff 92       	push	r15
    3f3e:	0f 93       	push	r16
    3f40:	1f 93       	push	r17
    3f42:	cf 93       	push	r28
    3f44:	8c 01       	movw	r16, r24
    3f46:	c6 2f       	mov	r28, r22
    3f48:	7a 01       	movw	r14, r20
        switch(evt.bmEvent) {
    3f4a:	fa 01       	movw	r30, r20
    3f4c:	80 81       	ld	r24, Z
    3f4e:	91 81       	ldd	r25, Z+1	; 0x01
    3f50:	a2 81       	ldd	r26, Z+2	; 0x02
    3f52:	b3 81       	ldd	r27, Z+3	; 0x03
    3f54:	81 30       	cpi	r24, 0x01	; 1
    3f56:	f3 e0       	ldi	r31, 0x03	; 3
    3f58:	9f 07       	cpc	r25, r31
    3f5a:	f1 e0       	ldi	r31, 0x01	; 1
    3f5c:	af 07       	cpc	r26, r31
    3f5e:	b1 05       	cpc	r27, r1
    3f60:	d1 f0       	breq	.+52     	; 0x3f96 <_ZN6USBHub16PortStatusChangeEhR8HubEvent+0x5c>
    3f62:	60 f4       	brcc	.+24     	; 0x3f7c <_ZN6USBHub16PortStatusChangeEhR8HubEvent+0x42>
    3f64:	81 15       	cp	r24, r1
    3f66:	e1 e0       	ldi	r30, 0x01	; 1
    3f68:	9e 07       	cpc	r25, r30
    3f6a:	ae 07       	cpc	r26, r30
    3f6c:	b1 05       	cpc	r27, r1
    3f6e:	71 f1       	breq	.+92     	; 0x3fcc <_ZN6USBHub16PortStatusChangeEhR8HubEvent+0x92>
    3f70:	81 30       	cpi	r24, 0x01	; 1
    3f72:	91 40       	sbci	r25, 0x01	; 1
    3f74:	a1 40       	sbci	r26, 0x01	; 1
    3f76:	b1 05       	cpc	r27, r1
    3f78:	71 f0       	breq	.+28     	; 0x3f96 <_ZN6USBHub16PortStatusChangeEhR8HubEvent+0x5c>
    3f7a:	64 c0       	rjmp	.+200    	; 0x4044 <_ZN6USBHub16PortStatusChangeEhR8HubEvent+0x10a>
    3f7c:	83 30       	cpi	r24, 0x03	; 3
    3f7e:	21 e0       	ldi	r18, 0x01	; 1
    3f80:	92 07       	cpc	r25, r18
    3f82:	20 e1       	ldi	r18, 0x10	; 16
    3f84:	a2 07       	cpc	r26, r18
    3f86:	b1 05       	cpc	r27, r1
    3f88:	e1 f1       	breq	.+120    	; 0x4002 <_ZN6USBHub16PortStatusChangeEhR8HubEvent+0xc8>
    3f8a:	83 30       	cpi	r24, 0x03	; 3
    3f8c:	93 40       	sbci	r25, 0x03	; 3
    3f8e:	a0 41       	sbci	r26, 0x10	; 16
    3f90:	b1 05       	cpc	r27, r1
    3f92:	b9 f1       	breq	.+110    	; 0x4002 <_ZN6USBHub16PortStatusChangeEhR8HubEvent+0xc8>
    3f94:	57 c0       	rjmp	.+174    	; 0x4044 <_ZN6USBHub16PortStatusChangeEhR8HubEvent+0x10a>
                        // Device connected event
                case bmHUB_PORT_EVENT_CONNECT:
                case bmHUB_PORT_EVENT_LS_CONNECT:
                        if(bResetInitiated)
    3f96:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <_ZN6USBHub15bResetInitiatedE>
    3f9a:	81 11       	cpse	r24, r1
    3f9c:	53 c0       	rjmp	.+166    	; 0x4044 <_ZN6USBHub16PortStatusChangeEhR8HubEvent+0x10a>
                                return 0;

                        ClearPortFeature(HUB_FEATURE_C_PORT_ENABLE, port, 0);
    3f9e:	20 e0       	ldi	r18, 0x00	; 0
    3fa0:	4c 2f       	mov	r20, r28
    3fa2:	61 e1       	ldi	r22, 0x11	; 17
    3fa4:	c8 01       	movw	r24, r16
    3fa6:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <_ZN6USBHub16ClearPortFeatureEhhh>
                        ClearPortFeature(HUB_FEATURE_C_PORT_CONNECTION, port, 0);
    3faa:	20 e0       	ldi	r18, 0x00	; 0
    3fac:	4c 2f       	mov	r20, r28
    3fae:	60 e1       	ldi	r22, 0x10	; 16
    3fb0:	c8 01       	movw	r24, r16
    3fb2:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <_ZN6USBHub16ClearPortFeatureEhhh>
                        SetPortFeature(HUB_FEATURE_PORT_RESET, port, 0);
    3fb6:	20 e0       	ldi	r18, 0x00	; 0
    3fb8:	4c 2f       	mov	r20, r28
    3fba:	64 e0       	ldi	r22, 0x04	; 4
    3fbc:	c8 01       	movw	r24, r16
    3fbe:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <_ZN6USBHub14SetPortFeatureEhhh>
                        bResetInitiated = true;
    3fc2:	81 e0       	ldi	r24, 0x01	; 1
    3fc4:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <_ZN6USBHub15bResetInitiatedE>
                        return HUB_ERROR_PORT_HAS_BEEN_RESET;
    3fc8:	81 eb       	ldi	r24, 0xB1	; 177
    3fca:	3d c0       	rjmp	.+122    	; 0x4046 <_ZN6USBHub16PortStatusChangeEhR8HubEvent+0x10c>

                        // Device disconnected event
                case bmHUB_PORT_EVENT_DISCONNECT:
                        ClearPortFeature(HUB_FEATURE_C_PORT_ENABLE, port, 0);
    3fcc:	20 e0       	ldi	r18, 0x00	; 0
    3fce:	46 2f       	mov	r20, r22
    3fd0:	61 e1       	ldi	r22, 0x11	; 17
    3fd2:	c8 01       	movw	r24, r16
    3fd4:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <_ZN6USBHub16ClearPortFeatureEhhh>
                        ClearPortFeature(HUB_FEATURE_C_PORT_CONNECTION, port, 0);
    3fd8:	20 e0       	ldi	r18, 0x00	; 0
    3fda:	4c 2f       	mov	r20, r28
    3fdc:	60 e1       	ldi	r22, 0x10	; 16
    3fde:	c8 01       	movw	r24, r16
    3fe0:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <_ZN6USBHub16ClearPortFeatureEhhh>
                        bResetInitiated = false;
    3fe4:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <_ZN6USBHub15bResetInitiatedE>

                        UsbDeviceAddress a;
                        a.devAddress = 0;
                        a.bmHub = 0;
                        a.bmParent = bAddress;
    3fe8:	f8 01       	movw	r30, r16
    3fea:	62 85       	ldd	r22, Z+10	; 0x0a
    3fec:	67 70       	andi	r22, 0x07	; 7
                        a.bmAddress = port;
    3fee:	c7 70       	andi	r28, 0x07	; 7
    3ff0:	66 0f       	add	r22, r22
    3ff2:	66 0f       	add	r22, r22
    3ff4:	66 0f       	add	r22, r22
    3ff6:	6c 2b       	or	r22, r28
                        pUsb->ReleaseDevice(a.devAddress);
    3ff8:	82 81       	ldd	r24, Z+2	; 0x02
    3ffa:	93 81       	ldd	r25, Z+3	; 0x03
    3ffc:	0e 94 3e 14 	call	0x287c	; 0x287c <_ZN3USB13ReleaseDeviceEh>
    4000:	21 c0       	rjmp	.+66     	; 0x4044 <_ZN6USBHub16PortStatusChangeEhR8HubEvent+0x10a>
                        return 0;

                        // Reset complete event
                case bmHUB_PORT_EVENT_RESET_COMPLETE:
                case bmHUB_PORT_EVENT_LS_RESET_COMPLETE:
                        ClearPortFeature(HUB_FEATURE_C_PORT_RESET, port, 0);
    4002:	20 e0       	ldi	r18, 0x00	; 0
    4004:	4c 2f       	mov	r20, r28
    4006:	64 e1       	ldi	r22, 0x14	; 20
    4008:	c8 01       	movw	r24, r16
    400a:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <_ZN6USBHub16ClearPortFeatureEhhh>
                        ClearPortFeature(HUB_FEATURE_C_PORT_CONNECTION, port, 0);
    400e:	20 e0       	ldi	r18, 0x00	; 0
    4010:	4c 2f       	mov	r20, r28
    4012:	60 e1       	ldi	r22, 0x10	; 16
    4014:	c8 01       	movw	r24, r16
    4016:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <_ZN6USBHub16ClearPortFeatureEhhh>

                        delay(20);
    401a:	64 e1       	ldi	r22, 0x14	; 20
    401c:	70 e0       	ldi	r23, 0x00	; 0
    401e:	80 e0       	ldi	r24, 0x00	; 0
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	0e 94 4d 09 	call	0x129a	; 0x129a <delay>

                        a.devAddress = bAddress;
    4026:	f8 01       	movw	r30, r16
    4028:	62 85       	ldd	r22, Z+10	; 0x0a

                        pUsb->Configuring(a.bmAddress, port, (evt.bmStatus & bmHUB_PORT_STATUS_PORT_LOW_SPEED));
    402a:	f7 01       	movw	r30, r14
    402c:	21 81       	ldd	r18, Z+1	; 0x01
    402e:	26 95       	lsr	r18
    4030:	21 70       	andi	r18, 0x01	; 1
    4032:	67 70       	andi	r22, 0x07	; 7
    4034:	4c 2f       	mov	r20, r28
    4036:	f8 01       	movw	r30, r16
    4038:	82 81       	ldd	r24, Z+2	; 0x02
    403a:	93 81       	ldd	r25, Z+3	; 0x03
    403c:	0e 94 1c 1a 	call	0x3438	; 0x3438 <_ZN3USB11ConfiguringEhhb>
                        bResetInitiated = false;
    4040:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <_ZN6USBHub15bResetInitiatedE>
                        break;

        } // switch (evt.bmEvent)
        return 0;
    4044:	80 e0       	ldi	r24, 0x00	; 0
}
    4046:	cf 91       	pop	r28
    4048:	1f 91       	pop	r17
    404a:	0f 91       	pop	r16
    404c:	ff 90       	pop	r15
    404e:	ef 90       	pop	r14
    4050:	08 95       	ret

00004052 <_ZN6USBHub14CheckHubStatusEv>:
                qNextPollTime = (uint32_t)millis() + 100;
        }
        return rcode;
}

uint8_t USBHub::CheckHubStatus() {
    4052:	cf 92       	push	r12
    4054:	df 92       	push	r13
    4056:	ef 92       	push	r14
    4058:	0f 93       	push	r16
    405a:	1f 93       	push	r17
    405c:	cf 93       	push	r28
    405e:	df 93       	push	r29
    4060:	cd b7       	in	r28, 0x3d	; 61
    4062:	de b7       	in	r29, 0x3e	; 62
    4064:	2e 97       	sbiw	r28, 0x0e	; 14
    4066:	0f b6       	in	r0, 0x3f	; 63
    4068:	f8 94       	cli
    406a:	de bf       	out	0x3e, r29	; 62
    406c:	0f be       	out	0x3f, r0	; 63
    406e:	cd bf       	out	0x3d, r28	; 61
    4070:	6c 01       	movw	r12, r24
        uint8_t rcode;
        uint8_t buf[8];
        uint16_t read = 1;
    4072:	81 e0       	ldi	r24, 0x01	; 1
    4074:	90 e0       	ldi	r25, 0x00	; 0
    4076:	9e 87       	std	Y+14, r25	; 0x0e
    4078:	8d 87       	std	Y+13, r24	; 0x0d

        rcode = pUsb->inTransfer(bAddress, 1, &read, buf);
    407a:	e1 2c       	mov	r14, r1
    407c:	8e 01       	movw	r16, r28
    407e:	0f 5f       	subi	r16, 0xFF	; 255
    4080:	1f 4f       	sbci	r17, 0xFF	; 255
    4082:	9e 01       	movw	r18, r28
    4084:	23 5f       	subi	r18, 0xF3	; 243
    4086:	3f 4f       	sbci	r19, 0xFF	; 255
    4088:	41 e0       	ldi	r20, 0x01	; 1
    408a:	f6 01       	movw	r30, r12
    408c:	62 85       	ldd	r22, Z+10	; 0x0a
    408e:	82 81       	ldd	r24, Z+2	; 0x02
    4090:	93 81       	ldd	r25, Z+3	; 0x03
    4092:	0e 94 44 1b 	call	0x3688	; 0x3688 <_ZN3USB10inTransferEhhPjPhh>

        if(rcode)
    4096:	81 11       	cpse	r24, r1
    4098:	51 c0       	rjmp	.+162    	; 0x413c <_ZN6USBHub14CheckHubStatusEv+0xea>
    409a:	02 e0       	ldi	r16, 0x02	; 2
    409c:	11 e0       	ldi	r17, 0x01	; 1
        //                USB_HOST_SERIAL.println(rcode, HEX);
        //                return rcode;
        //        }
        //}
        for(uint8_t port = 1, mask = 0x02; port < 8; mask <<= 1, port++) {
                if(buf[0] & mask) {
    409e:	89 81       	ldd	r24, Y+1	; 0x01
    40a0:	80 23       	and	r24, r16
    40a2:	d1 f0       	breq	.+52     	; 0x40d8 <_ZN6USBHub14CheckHubStatusEv+0x86>
                        HubEvent evt;
                        evt.bmEvent = 0;
    40a4:	19 86       	std	Y+9, r1	; 0x09
    40a6:	1a 86       	std	Y+10, r1	; 0x0a
    40a8:	1b 86       	std	Y+11, r1	; 0x0b
    40aa:	1c 86       	std	Y+12, r1	; 0x0c

                        rcode = GetPortStatus(port, 4, evt.evtBuff);
    40ac:	9e 01       	movw	r18, r28
    40ae:	27 5f       	subi	r18, 0xF7	; 247
    40b0:	3f 4f       	sbci	r19, 0xFF	; 255
    40b2:	44 e0       	ldi	r20, 0x04	; 4
    40b4:	50 e0       	ldi	r21, 0x00	; 0
    40b6:	61 2f       	mov	r22, r17
    40b8:	c6 01       	movw	r24, r12
    40ba:	0e 94 66 1d 	call	0x3acc	; 0x3acc <_ZN6USBHub13GetPortStatusEhjPh>

                        if(rcode)
    40be:	81 11       	cpse	r24, r1
    40c0:	0b c0       	rjmp	.+22     	; 0x40d8 <_ZN6USBHub14CheckHubStatusEv+0x86>
                                continue;

                        rcode = PortStatusChange(port, evt);
    40c2:	ae 01       	movw	r20, r28
    40c4:	47 5f       	subi	r20, 0xF7	; 247
    40c6:	5f 4f       	sbci	r21, 0xFF	; 255
    40c8:	61 2f       	mov	r22, r17
    40ca:	c6 01       	movw	r24, r12
    40cc:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <_ZN6USBHub16PortStatusChangeEhR8HubEvent>

                        if(rcode == HUB_ERROR_PORT_HAS_BEEN_RESET)
    40d0:	81 3b       	cpi	r24, 0xB1	; 177
    40d2:	99 f1       	breq	.+102    	; 0x413a <_ZN6USBHub14CheckHubStatusEv+0xe8>
                                return 0;

                        if(rcode)
    40d4:	81 11       	cpse	r24, r1
    40d6:	32 c0       	rjmp	.+100    	; 0x413c <_ZN6USBHub14CheckHubStatusEv+0xea>
        //                USB_HOST_SERIAL.print("GetHubStatus Error");
        //                USB_HOST_SERIAL.println(rcode, HEX);
        //                return rcode;
        //        }
        //}
        for(uint8_t port = 1, mask = 0x02; port < 8; mask <<= 1, port++) {
    40d8:	00 0f       	add	r16, r16
    40da:	1f 5f       	subi	r17, 0xFF	; 255
    40dc:	18 30       	cpi	r17, 0x08	; 8
    40de:	f9 f6       	brne	.-66     	; 0x409e <_ZN6USBHub14CheckHubStatusEv+0x4c>
    40e0:	11 e0       	ldi	r17, 0x01	; 1
                        if(rcode)
                                return rcode;
                }
        } // for

        for(uint8_t port = 1; port <= bNbrPorts; port++) {
    40e2:	f6 01       	movw	r30, r12
    40e4:	83 85       	ldd	r24, Z+11	; 0x0b
    40e6:	81 17       	cp	r24, r17
    40e8:	40 f1       	brcs	.+80     	; 0x413a <_ZN6USBHub14CheckHubStatusEv+0xe8>
                HubEvent evt;
                evt.bmEvent = 0;
    40ea:	19 86       	std	Y+9, r1	; 0x09
    40ec:	1a 86       	std	Y+10, r1	; 0x0a
    40ee:	1b 86       	std	Y+11, r1	; 0x0b
    40f0:	1c 86       	std	Y+12, r1	; 0x0c

                rcode = GetPortStatus(port, 4, evt.evtBuff);
    40f2:	9e 01       	movw	r18, r28
    40f4:	27 5f       	subi	r18, 0xF7	; 247
    40f6:	3f 4f       	sbci	r19, 0xFF	; 255
    40f8:	44 e0       	ldi	r20, 0x04	; 4
    40fa:	50 e0       	ldi	r21, 0x00	; 0
    40fc:	61 2f       	mov	r22, r17
    40fe:	c6 01       	movw	r24, r12
    4100:	0e 94 66 1d 	call	0x3acc	; 0x3acc <_ZN6USBHub13GetPortStatusEhjPh>

                if(rcode)
    4104:	81 11       	cpse	r24, r1
    4106:	17 c0       	rjmp	.+46     	; 0x4136 <_ZN6USBHub14CheckHubStatusEv+0xe4>
                        continue;

                if((evt.bmStatus & bmHUB_PORT_STATE_CHECK_DISABLED) != bmHUB_PORT_STATE_DISABLED)
    4108:	89 85       	ldd	r24, Y+9	; 0x09
    410a:	9a 85       	ldd	r25, Y+10	; 0x0a
    410c:	87 70       	andi	r24, 0x07	; 7
    410e:	91 70       	andi	r25, 0x01	; 1
    4110:	81 30       	cpi	r24, 0x01	; 1
    4112:	91 40       	sbci	r25, 0x01	; 1
    4114:	81 f4       	brne	.+32     	; 0x4136 <_ZN6USBHub14CheckHubStatusEv+0xe4>
                        continue;

                // Emulate connection event for the port
                evt.bmChange |= bmHUB_PORT_STATUS_C_PORT_CONNECTION;
    4116:	8b 85       	ldd	r24, Y+11	; 0x0b
    4118:	9c 85       	ldd	r25, Y+12	; 0x0c
    411a:	81 60       	ori	r24, 0x01	; 1
    411c:	9c 87       	std	Y+12, r25	; 0x0c
    411e:	8b 87       	std	Y+11, r24	; 0x0b

                rcode = PortStatusChange(port, evt);
    4120:	ae 01       	movw	r20, r28
    4122:	47 5f       	subi	r20, 0xF7	; 247
    4124:	5f 4f       	sbci	r21, 0xFF	; 255
    4126:	61 2f       	mov	r22, r17
    4128:	c6 01       	movw	r24, r12
    412a:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <_ZN6USBHub16PortStatusChangeEhR8HubEvent>

                if(rcode == HUB_ERROR_PORT_HAS_BEEN_RESET)
    412e:	81 3b       	cpi	r24, 0xB1	; 177
    4130:	21 f0       	breq	.+8      	; 0x413a <_ZN6USBHub14CheckHubStatusEv+0xe8>
                        return 0;

                if(rcode)
    4132:	81 11       	cpse	r24, r1
    4134:	03 c0       	rjmp	.+6      	; 0x413c <_ZN6USBHub14CheckHubStatusEv+0xea>
                        if(rcode)
                                return rcode;
                }
        } // for

        for(uint8_t port = 1; port <= bNbrPorts; port++) {
    4136:	1f 5f       	subi	r17, 0xFF	; 255
    4138:	d4 cf       	rjmp	.-88     	; 0x40e2 <_ZN6USBHub14CheckHubStatusEv+0x90>
                        return 0;

                if(rcode)
                        return rcode;
        } // for
        return 0;
    413a:	80 e0       	ldi	r24, 0x00	; 0
}
    413c:	2e 96       	adiw	r28, 0x0e	; 14
    413e:	0f b6       	in	r0, 0x3f	; 63
    4140:	f8 94       	cli
    4142:	de bf       	out	0x3e, r29	; 62
    4144:	0f be       	out	0x3f, r0	; 63
    4146:	cd bf       	out	0x3d, r28	; 61
    4148:	df 91       	pop	r29
    414a:	cf 91       	pop	r28
    414c:	1f 91       	pop	r17
    414e:	0f 91       	pop	r16
    4150:	ef 90       	pop	r14
    4152:	df 90       	pop	r13
    4154:	cf 90       	pop	r12
    4156:	08 95       	ret

00004158 <_ZN6USBHub4PollEv>:
        qNextPollTime = 0;
        bPollEnable = false;
        return 0;
}

uint8_t USBHub::Poll() {
    4158:	0f 93       	push	r16
    415a:	1f 93       	push	r17
    415c:	cf 93       	push	r28
    415e:	df 93       	push	r29
        uint8_t rcode = 0;

        if(!bPollEnable)
    4160:	fc 01       	movw	r30, r24
    4162:	20 89       	ldd	r18, Z+16	; 0x10
    4164:	21 11       	cpse	r18, r1
    4166:	02 c0       	rjmp	.+4      	; 0x416c <_ZN6USBHub4PollEv+0x14>
                return 0;
    4168:	80 e0       	ldi	r24, 0x00	; 0
    416a:	20 c0       	rjmp	.+64     	; 0x41ac <_ZN6USBHub4PollEv+0x54>
    416c:	ec 01       	movw	r28, r24

        if(((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L)) {
    416e:	0e 94 1c 09 	call	0x1238	; 0x1238 <millis>
    4172:	0c 85       	ldd	r16, Y+12	; 0x0c
    4174:	1d 85       	ldd	r17, Y+13	; 0x0d
    4176:	2e 85       	ldd	r18, Y+14	; 0x0e
    4178:	3f 85       	ldd	r19, Y+15	; 0x0f
    417a:	dc 01       	movw	r26, r24
    417c:	cb 01       	movw	r24, r22
    417e:	80 1b       	sub	r24, r16
    4180:	91 0b       	sbc	r25, r17
    4182:	a2 0b       	sbc	r26, r18
    4184:	b3 0b       	sbc	r27, r19
    4186:	b7 fd       	sbrc	r27, 7
    4188:	ef cf       	rjmp	.-34     	; 0x4168 <_ZN6USBHub4PollEv+0x10>
                rcode = CheckHubStatus();
    418a:	ce 01       	movw	r24, r28
    418c:	0e 94 29 20 	call	0x4052	; 0x4052 <_ZN6USBHub14CheckHubStatusEv>
    4190:	18 2f       	mov	r17, r24
                qNextPollTime = (uint32_t)millis() + 100;
    4192:	0e 94 1c 09 	call	0x1238	; 0x1238 <millis>
    4196:	dc 01       	movw	r26, r24
    4198:	cb 01       	movw	r24, r22
    419a:	8c 59       	subi	r24, 0x9C	; 156
    419c:	9f 4f       	sbci	r25, 0xFF	; 255
    419e:	af 4f       	sbci	r26, 0xFF	; 255
    41a0:	bf 4f       	sbci	r27, 0xFF	; 255
    41a2:	8c 87       	std	Y+12, r24	; 0x0c
    41a4:	9d 87       	std	Y+13, r25	; 0x0d
    41a6:	ae 87       	std	Y+14, r26	; 0x0e
    41a8:	bf 87       	std	Y+15, r27	; 0x0f
    41aa:	81 2f       	mov	r24, r17
        }
        return rcode;
}
    41ac:	df 91       	pop	r29
    41ae:	cf 91       	pop	r28
    41b0:	1f 91       	pop	r17
    41b2:	0f 91       	pop	r16
    41b4:	08 95       	ret

000041b6 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
  user_onReceive = function;
    41b6:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <_ZN7TwoWire14rxBufferLengthE>
    41ba:	90 e0       	ldi	r25, 0x00	; 0
    41bc:	20 91 c2 04 	lds	r18, 0x04C2	; 0x8004c2 <_ZN7TwoWire13rxBufferIndexE>
    41c0:	82 1b       	sub	r24, r18
    41c2:	91 09       	sbc	r25, r1
    41c4:	08 95       	ret

000041c6 <_ZN7TwoWire4readEv>:
    41c6:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <_ZN7TwoWire13rxBufferIndexE>
    41ca:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <_ZN7TwoWire14rxBufferLengthE>
    41ce:	98 17       	cp	r25, r24
    41d0:	50 f4       	brcc	.+20     	; 0x41e6 <_ZN7TwoWire4readEv+0x20>
    41d2:	e9 2f       	mov	r30, r25
    41d4:	f0 e0       	ldi	r31, 0x00	; 0
    41d6:	ed 53       	subi	r30, 0x3D	; 61
    41d8:	fb 4f       	sbci	r31, 0xFB	; 251
    41da:	20 81       	ld	r18, Z
    41dc:	30 e0       	ldi	r19, 0x00	; 0
    41de:	9f 5f       	subi	r25, 0xFF	; 255
    41e0:	90 93 c2 04 	sts	0x04C2, r25	; 0x8004c2 <_ZN7TwoWire13rxBufferIndexE>
    41e4:	02 c0       	rjmp	.+4      	; 0x41ea <_ZN7TwoWire4readEv+0x24>
    41e6:	2f ef       	ldi	r18, 0xFF	; 255
    41e8:	3f ef       	ldi	r19, 0xFF	; 255
    41ea:	c9 01       	movw	r24, r18
    41ec:	08 95       	ret

000041ee <_ZN7TwoWire4peekEv>:
    41ee:	e0 91 c2 04 	lds	r30, 0x04C2	; 0x8004c2 <_ZN7TwoWire13rxBufferIndexE>
    41f2:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <_ZN7TwoWire14rxBufferLengthE>
    41f6:	e8 17       	cp	r30, r24
    41f8:	30 f4       	brcc	.+12     	; 0x4206 <_ZN7TwoWire4peekEv+0x18>
    41fa:	f0 e0       	ldi	r31, 0x00	; 0
    41fc:	ed 53       	subi	r30, 0x3D	; 61
    41fe:	fb 4f       	sbci	r31, 0xFB	; 251
    4200:	80 81       	ld	r24, Z
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	08 95       	ret
    4206:	8f ef       	ldi	r24, 0xFF	; 255
    4208:	9f ef       	ldi	r25, 0xFF	; 255
    420a:	08 95       	ret

0000420c <_ZN7TwoWire5flushEv>:
    420c:	08 95       	ret

0000420e <_ZN7TwoWire16onReceiveServiceEPhi>:
    420e:	cf 93       	push	r28
    4210:	df 93       	push	r29
    4212:	ec 01       	movw	r28, r24
    4214:	e0 91 9a 04 	lds	r30, 0x049A	; 0x80049a <_ZN7TwoWire14user_onReceiveE>
    4218:	f0 91 9b 04 	lds	r31, 0x049B	; 0x80049b <_ZN7TwoWire14user_onReceiveE+0x1>
    421c:	30 97       	sbiw	r30, 0x00	; 0
    421e:	f1 f0       	breq	.+60     	; 0x425c <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    4220:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <_ZN7TwoWire13rxBufferIndexE>
    4224:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <_ZN7TwoWire14rxBufferLengthE>
    4228:	98 17       	cp	r25, r24
    422a:	c0 f0       	brcs	.+48     	; 0x425c <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    422c:	90 e0       	ldi	r25, 0x00	; 0
    422e:	29 2f       	mov	r18, r25
    4230:	30 e0       	ldi	r19, 0x00	; 0
    4232:	26 17       	cp	r18, r22
    4234:	37 07       	cpc	r19, r23
    4236:	54 f4       	brge	.+20     	; 0x424c <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    4238:	de 01       	movw	r26, r28
    423a:	a2 0f       	add	r26, r18
    423c:	b3 1f       	adc	r27, r19
    423e:	4c 91       	ld	r20, X
    4240:	d9 01       	movw	r26, r18
    4242:	ad 53       	subi	r26, 0x3D	; 61
    4244:	bb 4f       	sbci	r27, 0xFB	; 251
    4246:	4c 93       	st	X, r20
    4248:	9f 5f       	subi	r25, 0xFF	; 255
    424a:	f1 cf       	rjmp	.-30     	; 0x422e <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    424c:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <_ZN7TwoWire13rxBufferIndexE>
    4250:	60 93 c1 04 	sts	0x04C1, r22	; 0x8004c1 <_ZN7TwoWire14rxBufferLengthE>
    4254:	cb 01       	movw	r24, r22
    4256:	df 91       	pop	r29
    4258:	cf 91       	pop	r28
    425a:	09 94       	ijmp
    425c:	df 91       	pop	r29
    425e:	cf 91       	pop	r28
    4260:	08 95       	ret

00004262 <_ZN7TwoWire16onRequestServiceEv>:
    4262:	e0 91 9c 04 	lds	r30, 0x049C	; 0x80049c <_ZN7TwoWire14user_onRequestE>
    4266:	f0 91 9d 04 	lds	r31, 0x049D	; 0x80049d <_ZN7TwoWire14user_onRequestE+0x1>
    426a:	30 97       	sbiw	r30, 0x00	; 0
    426c:	29 f0       	breq	.+10     	; 0x4278 <_ZN7TwoWire16onRequestServiceEv+0x16>
    426e:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <_ZN7TwoWire13txBufferIndexE>
    4272:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <_ZN7TwoWire14txBufferLengthE>
    4276:	09 94       	ijmp
    4278:	08 95       	ret

0000427a <_ZN7TwoWire5writeEPKhj>:
    427a:	cf 92       	push	r12
    427c:	df 92       	push	r13
    427e:	ef 92       	push	r14
    4280:	ff 92       	push	r15
    4282:	0f 93       	push	r16
    4284:	1f 93       	push	r17
    4286:	cf 93       	push	r28
    4288:	df 93       	push	r29
    428a:	7c 01       	movw	r14, r24
    428c:	cb 01       	movw	r24, r22
    428e:	8a 01       	movw	r16, r20
    4290:	20 91 9e 04 	lds	r18, 0x049E	; 0x80049e <_ZN7TwoWire12transmittingE>
    4294:	22 23       	and	r18, r18
    4296:	89 f0       	breq	.+34     	; 0x42ba <_ZN7TwoWire5writeEPKhj+0x40>
    4298:	eb 01       	movw	r28, r22
    429a:	6b 01       	movw	r12, r22
    429c:	c4 0e       	add	r12, r20
    429e:	d5 1e       	adc	r13, r21
    42a0:	cc 15       	cp	r28, r12
    42a2:	dd 05       	cpc	r29, r13
    42a4:	69 f0       	breq	.+26     	; 0x42c0 <_ZN7TwoWire5writeEPKhj+0x46>
    42a6:	69 91       	ld	r22, Y+
    42a8:	d7 01       	movw	r26, r14
    42aa:	ed 91       	ld	r30, X+
    42ac:	fc 91       	ld	r31, X
    42ae:	01 90       	ld	r0, Z+
    42b0:	f0 81       	ld	r31, Z
    42b2:	e0 2d       	mov	r30, r0
    42b4:	c7 01       	movw	r24, r14
    42b6:	09 95       	icall
    42b8:	f3 cf       	rjmp	.-26     	; 0x42a0 <_ZN7TwoWire5writeEPKhj+0x26>
    42ba:	64 2f       	mov	r22, r20
    42bc:	0e 94 6f 22 	call	0x44de	; 0x44de <twi_transmit>
    42c0:	c8 01       	movw	r24, r16
    42c2:	df 91       	pop	r29
    42c4:	cf 91       	pop	r28
    42c6:	1f 91       	pop	r17
    42c8:	0f 91       	pop	r16
    42ca:	ff 90       	pop	r15
    42cc:	ef 90       	pop	r14
    42ce:	df 90       	pop	r13
    42d0:	cf 90       	pop	r12
    42d2:	08 95       	ret

000042d4 <_ZN7TwoWire5writeEh>:
    42d4:	cf 93       	push	r28
    42d6:	df 93       	push	r29
    42d8:	1f 92       	push	r1
    42da:	cd b7       	in	r28, 0x3d	; 61
    42dc:	de b7       	in	r29, 0x3e	; 62
    42de:	69 83       	std	Y+1, r22	; 0x01
    42e0:	20 91 9e 04 	lds	r18, 0x049E	; 0x80049e <_ZN7TwoWire12transmittingE>
    42e4:	22 23       	and	r18, r18
    42e6:	d1 f0       	breq	.+52     	; 0x431c <_ZN7TwoWire5writeEh+0x48>
    42e8:	20 91 9f 04 	lds	r18, 0x049F	; 0x80049f <_ZN7TwoWire14txBufferLengthE>
    42ec:	20 32       	cpi	r18, 0x20	; 32
    42ee:	40 f0       	brcs	.+16     	; 0x4300 <_ZN7TwoWire5writeEh+0x2c>
    42f0:	21 e0       	ldi	r18, 0x01	; 1
    42f2:	30 e0       	ldi	r19, 0x00	; 0
    42f4:	fc 01       	movw	r30, r24
    42f6:	33 83       	std	Z+3, r19	; 0x03
    42f8:	22 83       	std	Z+2, r18	; 0x02
    42fa:	80 e0       	ldi	r24, 0x00	; 0
    42fc:	90 e0       	ldi	r25, 0x00	; 0
    42fe:	15 c0       	rjmp	.+42     	; 0x432a <_ZN7TwoWire5writeEh+0x56>
    4300:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <_ZN7TwoWire13txBufferIndexE>
    4304:	e8 2f       	mov	r30, r24
    4306:	f0 e0       	ldi	r31, 0x00	; 0
    4308:	ef 55       	subi	r30, 0x5F	; 95
    430a:	fb 4f       	sbci	r31, 0xFB	; 251
    430c:	99 81       	ldd	r25, Y+1	; 0x01
    430e:	90 83       	st	Z, r25
    4310:	8f 5f       	subi	r24, 0xFF	; 255
    4312:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <_ZN7TwoWire13txBufferIndexE>
    4316:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <_ZN7TwoWire14txBufferLengthE>
    431a:	05 c0       	rjmp	.+10     	; 0x4326 <_ZN7TwoWire5writeEh+0x52>
    431c:	61 e0       	ldi	r22, 0x01	; 1
    431e:	ce 01       	movw	r24, r28
    4320:	01 96       	adiw	r24, 0x01	; 1
    4322:	0e 94 6f 22 	call	0x44de	; 0x44de <twi_transmit>
    4326:	81 e0       	ldi	r24, 0x01	; 1
    4328:	90 e0       	ldi	r25, 0x00	; 0
    432a:	0f 90       	pop	r0
    432c:	df 91       	pop	r29
    432e:	cf 91       	pop	r28
    4330:	08 95       	ret

00004332 <_ZN7TwoWireC1Ev>:
    4332:	fc 01       	movw	r30, r24
    4334:	13 82       	std	Z+3, r1	; 0x03
    4336:	12 82       	std	Z+2, r1	; 0x02
    4338:	88 ee       	ldi	r24, 0xE8	; 232
    433a:	93 e0       	ldi	r25, 0x03	; 3
    433c:	a0 e0       	ldi	r26, 0x00	; 0
    433e:	b0 e0       	ldi	r27, 0x00	; 0
    4340:	84 83       	std	Z+4, r24	; 0x04
    4342:	95 83       	std	Z+5, r25	; 0x05
    4344:	a6 83       	std	Z+6, r26	; 0x06
    4346:	b7 83       	std	Z+7, r27	; 0x07
    4348:	83 ee       	ldi	r24, 0xE3	; 227
    434a:	92 e0       	ldi	r25, 0x02	; 2
    434c:	91 83       	std	Z+1, r25	; 0x01
    434e:	80 83       	st	Z, r24
    4350:	08 95       	ret

00004352 <_ZN7TwoWire5beginEv>:
    4352:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <_ZN7TwoWire13rxBufferIndexE>
    4356:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <_ZN7TwoWire14rxBufferLengthE>
    435a:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <_ZN7TwoWire13txBufferIndexE>
    435e:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <_ZN7TwoWire14txBufferLengthE>
    4362:	0e 94 4d 22 	call	0x449a	; 0x449a <twi_init>
    4366:	81 e3       	ldi	r24, 0x31	; 49
    4368:	91 e2       	ldi	r25, 0x21	; 33
    436a:	0e 94 9c 22 	call	0x4538	; 0x4538 <twi_attachSlaveTxEvent>
    436e:	87 e0       	ldi	r24, 0x07	; 7
    4370:	91 e2       	ldi	r25, 0x21	; 33
    4372:	0c 94 97 22 	jmp	0x452e	; 0x452e <twi_attachSlaveRxEvent>

00004376 <_ZN7TwoWire5beginEh>:
    4376:	cf 93       	push	r28
    4378:	c6 2f       	mov	r28, r22
    437a:	0e 94 a9 21 	call	0x4352	; 0x4352 <_ZN7TwoWire5beginEv>
    437e:	8c 2f       	mov	r24, r28
    4380:	cf 91       	pop	r28
    4382:	0c 94 6b 22 	jmp	0x44d6	; 0x44d6 <twi_setAddress>

00004386 <_ZN7TwoWire5beginEi>:
    4386:	0c 94 bb 21 	jmp	0x4376	; 0x4376 <_ZN7TwoWire5beginEh>

0000438a <_ZN7TwoWire9onRequestEPFvvE>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    438a:	70 93 9d 04 	sts	0x049D, r23	; 0x80049d <_ZN7TwoWire14user_onRequestE+0x1>
    438e:	60 93 9c 04 	sts	0x049C, r22	; 0x80049c <_ZN7TwoWire14user_onRequestE>
    4392:	08 95       	ret

00004394 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    4394:	8e e8       	ldi	r24, 0x8E	; 142
    4396:	94 e0       	ldi	r25, 0x04	; 4
    4398:	0c 94 99 21 	jmp	0x4332	; 0x4332 <_ZN7TwoWireC1Ev>

0000439c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    439c:	08 95       	ret

0000439e <pb_field_iter_begin>:
 */

#include "pb_common.h"

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_field_t *fields, void *dest_struct)
{
    439e:	fc 01       	movw	r30, r24
    43a0:	db 01       	movw	r26, r22
    iter->start = fields;
    43a2:	71 83       	std	Z+1, r23	; 0x01
    43a4:	60 83       	st	Z, r22
    iter->pos = fields;
    43a6:	73 83       	std	Z+3, r23	; 0x03
    43a8:	62 83       	std	Z+2, r22	; 0x02
    iter->required_field_index = 0;
    43aa:	15 82       	std	Z+5, r1	; 0x05
    43ac:	14 82       	std	Z+4, r1	; 0x04
    iter->dest_struct = dest_struct;
    43ae:	57 83       	std	Z+7, r21	; 0x07
    43b0:	46 83       	std	Z+6, r20	; 0x06
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
    43b2:	12 96       	adiw	r26, 0x02	; 2
    43b4:	8c 91       	ld	r24, X
    43b6:	12 97       	sbiw	r26, 0x02	; 2
    43b8:	48 0f       	add	r20, r24
    43ba:	51 1d       	adc	r21, r1
    43bc:	51 87       	std	Z+9, r21	; 0x09
    43be:	40 87       	std	Z+8, r20	; 0x08
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
    43c0:	13 96       	adiw	r26, 0x03	; 3
    43c2:	8c 91       	ld	r24, X
    43c4:	13 97       	sbiw	r26, 0x03	; 3
    43c6:	48 0f       	add	r20, r24
    43c8:	51 1d       	adc	r21, r1
    43ca:	87 fd       	sbrc	r24, 7
    43cc:	5a 95       	dec	r21
    43ce:	53 87       	std	Z+11, r21	; 0x0b
    43d0:	42 87       	std	Z+10, r20	; 0x0a
    
    return (iter->pos->tag != 0);
    43d2:	81 e0       	ldi	r24, 0x01	; 1
    43d4:	9c 91       	ld	r25, X
    43d6:	91 11       	cpse	r25, r1
    43d8:	01 c0       	rjmp	.+2      	; 0x43dc <pb_field_iter_begin+0x3e>
    43da:	80 e0       	ldi	r24, 0x00	; 0
}
    43dc:	08 95       	ret

000043de <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
    43de:	fc 01       	movw	r30, r24
    const pb_field_t *prev_field = iter->pos;
    43e0:	a2 81       	ldd	r26, Z+2	; 0x02
    43e2:	b3 81       	ldd	r27, Z+3	; 0x03

    if (prev_field->tag == 0)
    43e4:	8c 91       	ld	r24, X
    43e6:	88 23       	and	r24, r24
    43e8:	09 f4       	brne	.+2      	; 0x43ec <pb_field_iter_next+0xe>
    43ea:	53 c0       	rjmp	.+166    	; 0x4492 <pb_field_iter_next+0xb4>
        /* Handle empty message types, where the first field is already the terminator.
         * In other cases, the iter->pos never points to the terminator. */
        return false;
    }
    
    iter->pos++;
    43ec:	cd 01       	movw	r24, r26
    43ee:	08 96       	adiw	r24, 0x08	; 8
    43f0:	93 83       	std	Z+3, r25	; 0x03
    43f2:	82 83       	std	Z+2, r24	; 0x02
    
    if (iter->pos->tag == 0)
    43f4:	18 96       	adiw	r26, 0x08	; 8
    43f6:	8c 91       	ld	r24, X
    43f8:	18 97       	sbiw	r26, 0x08	; 8
    43fa:	81 11       	cpse	r24, r1
    43fc:	08 c0       	rjmp	.+16     	; 0x440e <pb_field_iter_next+0x30>
    {
        /* Wrapped back to beginning, reinitialize */
        (void)pb_field_iter_begin(iter, iter->start, iter->dest_struct);
    43fe:	46 81       	ldd	r20, Z+6	; 0x06
    4400:	57 81       	ldd	r21, Z+7	; 0x07
    4402:	60 81       	ld	r22, Z
    4404:	71 81       	ldd	r23, Z+1	; 0x01
    4406:	cf 01       	movw	r24, r30
    4408:	0e 94 cf 21 	call	0x439e	; 0x439e <pb_field_iter_begin>
    440c:	42 c0       	rjmp	.+132    	; 0x4492 <pb_field_iter_next+0xb4>
        return false;
    }
    else
    {
        /* Increment the pointers based on previous field size */
        size_t prev_size = prev_field->data_size;
    440e:	14 96       	adiw	r26, 0x04	; 4
    4410:	5c 91       	ld	r21, X
    4412:	14 97       	sbiw	r26, 0x04	; 4
    4414:	85 2f       	mov	r24, r21
    4416:	90 e0       	ldi	r25, 0x00	; 0
    
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
    4418:	11 96       	adiw	r26, 0x01	; 1
    441a:	2c 91       	ld	r18, X
    441c:	11 97       	sbiw	r26, 0x01	; 1
    441e:	32 2f       	mov	r19, r18
    4420:	30 73       	andi	r19, 0x30	; 48
    4422:	30 33       	cpi	r19, 0x30	; 48
    4424:	59 f4       	brne	.+22     	; 0x443c <pb_field_iter_next+0x5e>
    4426:	19 96       	adiw	r26, 0x09	; 9
    4428:	4c 91       	ld	r20, X
    442a:	19 97       	sbiw	r26, 0x09	; 9
    442c:	40 73       	andi	r20, 0x30	; 48
    442e:	40 33       	cpi	r20, 0x30	; 48
    4430:	29 f4       	brne	.+10     	; 0x443c <pb_field_iter_next+0x5e>
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
    4432:	1a 96       	adiw	r26, 0x0a	; 10
    4434:	4c 91       	ld	r20, X
    4436:	1a 97       	sbiw	r26, 0x0a	; 10
    4438:	4f 3f       	cpi	r20, 0xFF	; 255
    443a:	69 f1       	breq	.+90     	; 0x4496 <pb_field_iter_next+0xb8>
    443c:	20 7c       	andi	r18, 0xC0	; 192
            iter->pos->data_offset == PB_SIZE_MAX)
        {
            /* Don't advance pointers inside unions */
            return true;
        }
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
    443e:	49 f4       	brne	.+18     	; 0x4452 <pb_field_iter_next+0x74>
    4440:	30 32       	cpi	r19, 0x20	; 32
    4442:	59 f4       	brne	.+22     	; 0x445a <pb_field_iter_next+0x7c>
                 PB_HTYPE(prev_field->type) == PB_HTYPE_REPEATED)
        {
            /* In static arrays, the data_size tells the size of a single entry and
             * array_size is the number of entries */
            prev_size *= prev_field->array_size;
    4444:	15 96       	adiw	r26, 0x05	; 5
    4446:	8c 91       	ld	r24, X
    4448:	15 97       	sbiw	r26, 0x05	; 5
    444a:	58 9f       	mul	r21, r24
    444c:	c0 01       	movw	r24, r0
    444e:	11 24       	eor	r1, r1
    4450:	0c c0       	rjmp	.+24     	; 0x446a <pb_field_iter_next+0x8c>
        }
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_POINTER)
    4452:	20 38       	cpi	r18, 0x80	; 128
    4454:	11 f4       	brne	.+4      	; 0x445a <pb_field_iter_next+0x7c>
        {
            /* Pointer fields always have a constant size in the main structure.
             * The data_size only applies to the dynamically allocated area. */
            prev_size = sizeof(void*);
    4456:	82 e0       	ldi	r24, 0x02	; 2
    4458:	90 e0       	ldi	r25, 0x00	; 0
        }

        if (PB_HTYPE(prev_field->type) == PB_HTYPE_REQUIRED)
    445a:	31 11       	cpse	r19, r1
    445c:	06 c0       	rjmp	.+12     	; 0x446a <pb_field_iter_next+0x8c>
        {
            /* Count the required fields, in order to check their presence in the
             * decoder. */
            iter->required_field_index++;
    445e:	24 81       	ldd	r18, Z+4	; 0x04
    4460:	35 81       	ldd	r19, Z+5	; 0x05
    4462:	2f 5f       	subi	r18, 0xFF	; 255
    4464:	3f 4f       	sbci	r19, 0xFF	; 255
    4466:	35 83       	std	Z+5, r19	; 0x05
    4468:	24 83       	std	Z+4, r18	; 0x04
        }
    
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
    446a:	1a 96       	adiw	r26, 0x0a	; 10
    446c:	2c 91       	ld	r18, X
    446e:	1a 97       	sbiw	r26, 0x0a	; 10
    4470:	82 0f       	add	r24, r18
    4472:	91 1d       	adc	r25, r1
    4474:	20 85       	ldd	r18, Z+8	; 0x08
    4476:	31 85       	ldd	r19, Z+9	; 0x09
    4478:	82 0f       	add	r24, r18
    447a:	93 1f       	adc	r25, r19
    447c:	91 87       	std	Z+9, r25	; 0x09
    447e:	80 87       	std	Z+8, r24	; 0x08
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
    4480:	1b 96       	adiw	r26, 0x0b	; 11
    4482:	2c 91       	ld	r18, X
    4484:	82 0f       	add	r24, r18
    4486:	91 1d       	adc	r25, r1
    4488:	27 fd       	sbrc	r18, 7
    448a:	9a 95       	dec	r25
    448c:	93 87       	std	Z+11, r25	; 0x0b
    448e:	82 87       	std	Z+10, r24	; 0x0a
    4490:	02 c0       	rjmp	.+4      	; 0x4496 <pb_field_iter_next+0xb8>

    if (prev_field->tag == 0)
    {
        /* Handle empty message types, where the first field is already the terminator.
         * In other cases, the iter->pos never points to the terminator. */
        return false;
    4492:	80 e0       	ldi	r24, 0x00	; 0
    4494:	08 95       	ret
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
            iter->pos->data_offset == PB_SIZE_MAX)
        {
            /* Don't advance pointers inside unions */
            return true;
    4496:	81 e0       	ldi	r24, 0x01	; 1
    
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
        return true;
    }
}
    4498:	08 95       	ret

0000449a <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    449a:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <twi_state>
    449e:	81 e0       	ldi	r24, 0x01	; 1
    44a0:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <twi_sendStop>
    44a4:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <twi_inRepStart>
    44a8:	61 e0       	ldi	r22, 0x01	; 1
    44aa:	82 e1       	ldi	r24, 0x12	; 18
    44ac:	0e 94 29 0a 	call	0x1452	; 0x1452 <digitalWrite>
    44b0:	61 e0       	ldi	r22, 0x01	; 1
    44b2:	83 e1       	ldi	r24, 0x13	; 19
    44b4:	0e 94 29 0a 	call	0x1452	; 0x1452 <digitalWrite>
    44b8:	e9 eb       	ldi	r30, 0xB9	; 185
    44ba:	f0 e0       	ldi	r31, 0x00	; 0
    44bc:	80 81       	ld	r24, Z
    44be:	8e 7f       	andi	r24, 0xFE	; 254
    44c0:	80 83       	st	Z, r24
    44c2:	80 81       	ld	r24, Z
    44c4:	8d 7f       	andi	r24, 0xFD	; 253
    44c6:	80 83       	st	Z, r24
    44c8:	80 e2       	ldi	r24, 0x20	; 32
    44ca:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    44ce:	85 e4       	ldi	r24, 0x45	; 69
    44d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    44d4:	08 95       	ret

000044d6 <twi_setAddress>:
    44d6:	88 0f       	add	r24, r24
    44d8:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    44dc:	08 95       	ret

000044de <twi_transmit>:
    44de:	40 91 05 05 	lds	r20, 0x0505	; 0x800505 <twi_txBufferLength>
    44e2:	26 2f       	mov	r18, r22
    44e4:	30 e0       	ldi	r19, 0x00	; 0
    44e6:	24 0f       	add	r18, r20
    44e8:	31 1d       	adc	r19, r1
    44ea:	21 32       	cpi	r18, 0x21	; 33
    44ec:	31 05       	cpc	r19, r1
    44ee:	dc f4       	brge	.+54     	; 0x4526 <twi_transmit+0x48>
    44f0:	20 91 50 05 	lds	r18, 0x0550	; 0x800550 <twi_state>
    44f4:	24 30       	cpi	r18, 0x04	; 4
    44f6:	c9 f4       	brne	.+50     	; 0x452a <twi_transmit+0x4c>
    44f8:	fc 01       	movw	r30, r24
    44fa:	80 e0       	ldi	r24, 0x00	; 0
    44fc:	90 e0       	ldi	r25, 0x00	; 0
    44fe:	86 17       	cp	r24, r22
    4500:	58 f4       	brcc	.+22     	; 0x4518 <twi_transmit+0x3a>
    4502:	30 91 05 05 	lds	r19, 0x0505	; 0x800505 <twi_txBufferLength>
    4506:	21 91       	ld	r18, Z+
    4508:	dc 01       	movw	r26, r24
    450a:	a9 5f       	subi	r26, 0xF9	; 249
    450c:	ba 4f       	sbci	r27, 0xFA	; 250
    450e:	a3 0f       	add	r26, r19
    4510:	b1 1d       	adc	r27, r1
    4512:	2c 93       	st	X, r18
    4514:	01 96       	adiw	r24, 0x01	; 1
    4516:	f3 cf       	rjmp	.-26     	; 0x44fe <twi_transmit+0x20>
    4518:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <twi_txBufferLength>
    451c:	68 0f       	add	r22, r24
    451e:	60 93 05 05 	sts	0x0505, r22	; 0x800505 <twi_txBufferLength>
    4522:	80 e0       	ldi	r24, 0x00	; 0
    4524:	08 95       	ret
    4526:	81 e0       	ldi	r24, 0x01	; 1
    4528:	08 95       	ret
    452a:	82 e0       	ldi	r24, 0x02	; 2
    452c:	08 95       	ret

0000452e <twi_attachSlaveRxEvent>:
    452e:	90 93 4a 05 	sts	0x054A, r25	; 0x80054a <twi_onSlaveReceive+0x1>
    4532:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <twi_onSlaveReceive>
    4536:	08 95       	ret

00004538 <twi_attachSlaveTxEvent>:
    4538:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <twi_onSlaveTransmit+0x1>
    453c:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <twi_onSlaveTransmit>
    4540:	08 95       	ret

00004542 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4542:	85 ed       	ldi	r24, 0xD5	; 213
    4544:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4548:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    454c:	84 fd       	sbrc	r24, 4
    454e:	fc cf       	rjmp	.-8      	; 0x4548 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    4550:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <twi_state>
    4554:	08 95       	ret

00004556 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    4556:	85 ec       	ldi	r24, 0xC5	; 197
    4558:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    455c:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <twi_state>
    4560:	08 95       	ret

00004562 <__vector_24>:
}

ISR(TWI_vect)
{
    4562:	1f 92       	push	r1
    4564:	0f 92       	push	r0
    4566:	0f b6       	in	r0, 0x3f	; 63
    4568:	0f 92       	push	r0
    456a:	11 24       	eor	r1, r1
    456c:	2f 93       	push	r18
    456e:	3f 93       	push	r19
    4570:	4f 93       	push	r20
    4572:	5f 93       	push	r21
    4574:	6f 93       	push	r22
    4576:	7f 93       	push	r23
    4578:	8f 93       	push	r24
    457a:	9f 93       	push	r25
    457c:	af 93       	push	r26
    457e:	bf 93       	push	r27
    4580:	ef 93       	push	r30
    4582:	ff 93       	push	r31
  switch(TW_STATUS){
    4584:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    4588:	88 7f       	andi	r24, 0xF8	; 248
    458a:	80 36       	cpi	r24, 0x60	; 96
    458c:	09 f4       	brne	.+2      	; 0x4590 <__vector_24+0x2e>
    458e:	9e c0       	rjmp	.+316    	; 0x46cc <__vector_24+0x16a>
    4590:	78 f5       	brcc	.+94     	; 0x45f0 <__vector_24+0x8e>
    4592:	88 32       	cpi	r24, 0x28	; 40
    4594:	09 f4       	brne	.+2      	; 0x4598 <__vector_24+0x36>
    4596:	5d c0       	rjmp	.+186    	; 0x4652 <__vector_24+0xf0>
    4598:	90 f4       	brcc	.+36     	; 0x45be <__vector_24+0x5c>
    459a:	80 31       	cpi	r24, 0x10	; 16
    459c:	09 f4       	brne	.+2      	; 0x45a0 <__vector_24+0x3e>
    459e:	56 c0       	rjmp	.+172    	; 0x464c <__vector_24+0xea>
    45a0:	38 f4       	brcc	.+14     	; 0x45b0 <__vector_24+0x4e>
    45a2:	88 23       	and	r24, r24
    45a4:	09 f4       	brne	.+2      	; 0x45a8 <__vector_24+0x46>
    45a6:	f5 c0       	rjmp	.+490    	; 0x4792 <__vector_24+0x230>
    45a8:	88 30       	cpi	r24, 0x08	; 8
    45aa:	09 f4       	brne	.+2      	; 0x45ae <__vector_24+0x4c>
    45ac:	4f c0       	rjmp	.+158    	; 0x464c <__vector_24+0xea>
    45ae:	f5 c0       	rjmp	.+490    	; 0x479a <__vector_24+0x238>
    45b0:	88 31       	cpi	r24, 0x18	; 24
    45b2:	09 f4       	brne	.+2      	; 0x45b6 <__vector_24+0x54>
    45b4:	4e c0       	rjmp	.+156    	; 0x4652 <__vector_24+0xf0>
    45b6:	80 32       	cpi	r24, 0x20	; 32
    45b8:	09 f4       	brne	.+2      	; 0x45bc <__vector_24+0x5a>
    45ba:	5f c0       	rjmp	.+190    	; 0x467a <__vector_24+0x118>
    45bc:	ee c0       	rjmp	.+476    	; 0x479a <__vector_24+0x238>
    45be:	80 34       	cpi	r24, 0x40	; 64
    45c0:	09 f4       	brne	.+2      	; 0x45c4 <__vector_24+0x62>
    45c2:	6a c0       	rjmp	.+212    	; 0x4698 <__vector_24+0x136>
    45c4:	58 f4       	brcc	.+22     	; 0x45dc <__vector_24+0x7a>
    45c6:	80 33       	cpi	r24, 0x30	; 48
    45c8:	09 f4       	brne	.+2      	; 0x45cc <__vector_24+0x6a>
    45ca:	57 c0       	rjmp	.+174    	; 0x467a <__vector_24+0x118>
    45cc:	88 33       	cpi	r24, 0x38	; 56
    45ce:	09 f0       	breq	.+2      	; 0x45d2 <__vector_24+0x70>
    45d0:	e4 c0       	rjmp	.+456    	; 0x479a <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    45d2:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <twi_error>
      twi_releaseBus();
    45d6:	0e 94 ab 22 	call	0x4556	; 0x4556 <twi_releaseBus>
      break;
    45da:	df c0       	rjmp	.+446    	; 0x479a <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    45dc:	80 35       	cpi	r24, 0x50	; 80
    45de:	09 f4       	brne	.+2      	; 0x45e2 <__vector_24+0x80>
    45e0:	4f c0       	rjmp	.+158    	; 0x4680 <__vector_24+0x11e>
    45e2:	88 35       	cpi	r24, 0x58	; 88
    45e4:	09 f4       	brne	.+2      	; 0x45e8 <__vector_24+0x86>
    45e6:	5d c0       	rjmp	.+186    	; 0x46a2 <__vector_24+0x140>
    45e8:	88 34       	cpi	r24, 0x48	; 72
    45ea:	09 f0       	breq	.+2      	; 0x45ee <__vector_24+0x8c>
    45ec:	d6 c0       	rjmp	.+428    	; 0x479a <__vector_24+0x238>
    45ee:	d3 c0       	rjmp	.+422    	; 0x4796 <__vector_24+0x234>
    45f0:	88 39       	cpi	r24, 0x98	; 152
    45f2:	09 f4       	brne	.+2      	; 0x45f6 <__vector_24+0x94>
    45f4:	c4 c0       	rjmp	.+392    	; 0x477e <__vector_24+0x21c>
    45f6:	a8 f4       	brcc	.+42     	; 0x4622 <__vector_24+0xc0>
    45f8:	88 37       	cpi	r24, 0x78	; 120
    45fa:	09 f4       	brne	.+2      	; 0x45fe <__vector_24+0x9c>
    45fc:	67 c0       	rjmp	.+206    	; 0x46cc <__vector_24+0x16a>
    45fe:	38 f4       	brcc	.+14     	; 0x460e <__vector_24+0xac>
    4600:	88 36       	cpi	r24, 0x68	; 104
    4602:	09 f4       	brne	.+2      	; 0x4606 <__vector_24+0xa4>
    4604:	63 c0       	rjmp	.+198    	; 0x46cc <__vector_24+0x16a>
    4606:	80 37       	cpi	r24, 0x70	; 112
    4608:	09 f4       	brne	.+2      	; 0x460c <__vector_24+0xaa>
    460a:	60 c0       	rjmp	.+192    	; 0x46cc <__vector_24+0x16a>
    460c:	c6 c0       	rjmp	.+396    	; 0x479a <__vector_24+0x238>
    460e:	88 38       	cpi	r24, 0x88	; 136
    4610:	09 f4       	brne	.+2      	; 0x4614 <__vector_24+0xb2>
    4612:	b5 c0       	rjmp	.+362    	; 0x477e <__vector_24+0x21c>
    4614:	80 39       	cpi	r24, 0x90	; 144
    4616:	09 f4       	brne	.+2      	; 0x461a <__vector_24+0xb8>
    4618:	5f c0       	rjmp	.+190    	; 0x46d8 <__vector_24+0x176>
    461a:	80 38       	cpi	r24, 0x80	; 128
    461c:	09 f0       	breq	.+2      	; 0x4620 <__vector_24+0xbe>
    461e:	bd c0       	rjmp	.+378    	; 0x479a <__vector_24+0x238>
    4620:	5b c0       	rjmp	.+182    	; 0x46d8 <__vector_24+0x176>
    4622:	80 3b       	cpi	r24, 0xB0	; 176
    4624:	09 f4       	brne	.+2      	; 0x4628 <__vector_24+0xc6>
    4626:	83 c0       	rjmp	.+262    	; 0x472e <__vector_24+0x1cc>
    4628:	38 f4       	brcc	.+14     	; 0x4638 <__vector_24+0xd6>
    462a:	80 3a       	cpi	r24, 0xA0	; 160
    462c:	09 f4       	brne	.+2      	; 0x4630 <__vector_24+0xce>
    462e:	66 c0       	rjmp	.+204    	; 0x46fc <__vector_24+0x19a>
    4630:	88 3a       	cpi	r24, 0xA8	; 168
    4632:	09 f4       	brne	.+2      	; 0x4636 <__vector_24+0xd4>
    4634:	7c c0       	rjmp	.+248    	; 0x472e <__vector_24+0x1cc>
    4636:	b1 c0       	rjmp	.+354    	; 0x479a <__vector_24+0x238>
    4638:	80 3c       	cpi	r24, 0xC0	; 192
    463a:	09 f4       	brne	.+2      	; 0x463e <__vector_24+0xdc>
    463c:	a4 c0       	rjmp	.+328    	; 0x4786 <__vector_24+0x224>
    463e:	88 3c       	cpi	r24, 0xC8	; 200
    4640:	09 f4       	brne	.+2      	; 0x4644 <__vector_24+0xe2>
    4642:	a1 c0       	rjmp	.+322    	; 0x4786 <__vector_24+0x224>
    4644:	88 3b       	cpi	r24, 0xB8	; 184
    4646:	09 f4       	brne	.+2      	; 0x464a <__vector_24+0xe8>
    4648:	87 c0       	rjmp	.+270    	; 0x4758 <__vector_24+0x1f6>
    464a:	a7 c0       	rjmp	.+334    	; 0x479a <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    464c:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <twi_slarw>
    4650:	10 c0       	rjmp	.+32     	; 0x4672 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4652:	90 91 28 05 	lds	r25, 0x0528	; 0x800528 <twi_masterBufferIndex>
    4656:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <twi_masterBufferLength>
    465a:	98 17       	cp	r25, r24
    465c:	70 f5       	brcc	.+92     	; 0x46ba <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    465e:	e0 91 28 05 	lds	r30, 0x0528	; 0x800528 <twi_masterBufferIndex>
    4662:	81 e0       	ldi	r24, 0x01	; 1
    4664:	8e 0f       	add	r24, r30
    4666:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <twi_masterBufferIndex>
    466a:	f0 e0       	ldi	r31, 0x00	; 0
    466c:	e7 5d       	subi	r30, 0xD7	; 215
    466e:	fa 4f       	sbci	r31, 0xFA	; 250
    4670:	80 81       	ld	r24, Z
    4672:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4676:	85 ec       	ldi	r24, 0xC5	; 197
    4678:	83 c0       	rjmp	.+262    	; 0x4780 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    467a:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <twi_error>
    467e:	8b c0       	rjmp	.+278    	; 0x4796 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4680:	e0 91 28 05 	lds	r30, 0x0528	; 0x800528 <twi_masterBufferIndex>
    4684:	81 e0       	ldi	r24, 0x01	; 1
    4686:	8e 0f       	add	r24, r30
    4688:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <twi_masterBufferIndex>
    468c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    4690:	f0 e0       	ldi	r31, 0x00	; 0
    4692:	e7 5d       	subi	r30, 0xD7	; 215
    4694:	fa 4f       	sbci	r31, 0xFA	; 250
    4696:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4698:	90 91 28 05 	lds	r25, 0x0528	; 0x800528 <twi_masterBufferIndex>
    469c:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <twi_masterBufferLength>
    46a0:	6b c0       	rjmp	.+214    	; 0x4778 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    46a2:	e0 91 28 05 	lds	r30, 0x0528	; 0x800528 <twi_masterBufferIndex>
    46a6:	81 e0       	ldi	r24, 0x01	; 1
    46a8:	8e 0f       	add	r24, r30
    46aa:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <twi_masterBufferIndex>
    46ae:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    46b2:	f0 e0       	ldi	r31, 0x00	; 0
    46b4:	e7 5d       	subi	r30, 0xD7	; 215
    46b6:	fa 4f       	sbci	r31, 0xFA	; 250
    46b8:	80 83       	st	Z, r24
	if (twi_sendStop)
    46ba:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <twi_sendStop>
    46be:	81 11       	cpse	r24, r1
    46c0:	6a c0       	rjmp	.+212    	; 0x4796 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    46c2:	81 e0       	ldi	r24, 0x01	; 1
    46c4:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    46c8:	84 ea       	ldi	r24, 0xA4	; 164
    46ca:	5e c0       	rjmp	.+188    	; 0x4788 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    46cc:	83 e0       	ldi	r24, 0x03	; 3
    46ce:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    46d2:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <twi_rxBufferIndex>
    46d6:	cf cf       	rjmp	.-98     	; 0x4676 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    46d8:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <twi_rxBufferIndex>
    46dc:	80 32       	cpi	r24, 0x20	; 32
    46de:	08 f0       	brcs	.+2      	; 0x46e2 <__vector_24+0x180>
    46e0:	4e c0       	rjmp	.+156    	; 0x477e <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    46e2:	e0 91 e4 04 	lds	r30, 0x04E4	; 0x8004e4 <twi_rxBufferIndex>
    46e6:	81 e0       	ldi	r24, 0x01	; 1
    46e8:	8e 0f       	add	r24, r30
    46ea:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <twi_rxBufferIndex>
    46ee:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    46f2:	f0 e0       	ldi	r31, 0x00	; 0
    46f4:	eb 51       	subi	r30, 0x1B	; 27
    46f6:	fb 4f       	sbci	r31, 0xFB	; 251
    46f8:	80 83       	st	Z, r24
    46fa:	bd cf       	rjmp	.-134    	; 0x4676 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    46fc:	0e 94 ab 22 	call	0x4556	; 0x4556 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4700:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <twi_rxBufferIndex>
    4704:	80 32       	cpi	r24, 0x20	; 32
    4706:	30 f4       	brcc	.+12     	; 0x4714 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4708:	e0 91 e4 04 	lds	r30, 0x04E4	; 0x8004e4 <twi_rxBufferIndex>
    470c:	f0 e0       	ldi	r31, 0x00	; 0
    470e:	eb 51       	subi	r30, 0x1B	; 27
    4710:	fb 4f       	sbci	r31, 0xFB	; 251
    4712:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    4714:	60 91 e4 04 	lds	r22, 0x04E4	; 0x8004e4 <twi_rxBufferIndex>
    4718:	70 e0       	ldi	r23, 0x00	; 0
    471a:	e0 91 49 05 	lds	r30, 0x0549	; 0x800549 <twi_onSlaveReceive>
    471e:	f0 91 4a 05 	lds	r31, 0x054A	; 0x80054a <twi_onSlaveReceive+0x1>
    4722:	85 ee       	ldi	r24, 0xE5	; 229
    4724:	94 e0       	ldi	r25, 0x04	; 4
    4726:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4728:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <twi_rxBufferIndex>
      break;
    472c:	36 c0       	rjmp	.+108    	; 0x479a <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    472e:	84 e0       	ldi	r24, 0x04	; 4
    4730:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    4734:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4738:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    473c:	e0 91 4b 05 	lds	r30, 0x054B	; 0x80054b <twi_onSlaveTransmit>
    4740:	f0 91 4c 05 	lds	r31, 0x054C	; 0x80054c <twi_onSlaveTransmit+0x1>
    4744:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4746:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <twi_txBufferLength>
    474a:	81 11       	cpse	r24, r1
    474c:	05 c0       	rjmp	.+10     	; 0x4758 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    474e:	81 e0       	ldi	r24, 0x01	; 1
    4750:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    4754:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4758:	e0 91 06 05 	lds	r30, 0x0506	; 0x800506 <twi_txBufferIndex>
    475c:	81 e0       	ldi	r24, 0x01	; 1
    475e:	8e 0f       	add	r24, r30
    4760:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <twi_txBufferIndex>
    4764:	f0 e0       	ldi	r31, 0x00	; 0
    4766:	e9 5f       	subi	r30, 0xF9	; 249
    4768:	fa 4f       	sbci	r31, 0xFA	; 250
    476a:	80 81       	ld	r24, Z
    476c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4770:	90 91 06 05 	lds	r25, 0x0506	; 0x800506 <twi_txBufferIndex>
    4774:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <twi_txBufferLength>
    4778:	98 17       	cp	r25, r24
    477a:	08 f4       	brcc	.+2      	; 0x477e <__vector_24+0x21c>
    477c:	7c cf       	rjmp	.-264    	; 0x4676 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    477e:	85 e8       	ldi	r24, 0x85	; 133
    4780:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4784:	0a c0       	rjmp	.+20     	; 0x479a <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4786:	85 ec       	ldi	r24, 0xC5	; 197
    4788:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    478c:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <twi_state>
      break;
    4790:	04 c0       	rjmp	.+8      	; 0x479a <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    4792:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <twi_error>
      twi_stop();
    4796:	0e 94 a1 22 	call	0x4542	; 0x4542 <twi_stop>
      break;
  }
}
    479a:	ff 91       	pop	r31
    479c:	ef 91       	pop	r30
    479e:	bf 91       	pop	r27
    47a0:	af 91       	pop	r26
    47a2:	9f 91       	pop	r25
    47a4:	8f 91       	pop	r24
    47a6:	7f 91       	pop	r23
    47a8:	6f 91       	pop	r22
    47aa:	5f 91       	pop	r21
    47ac:	4f 91       	pop	r20
    47ae:	3f 91       	pop	r19
    47b0:	2f 91       	pop	r18
    47b2:	0f 90       	pop	r0
    47b4:	0f be       	out	0x3f, r0	; 63
    47b6:	0f 90       	pop	r0
    47b8:	1f 90       	pop	r1
    47ba:	18 95       	reti

000047bc <__udivmodsi4>:
    47bc:	a1 e2       	ldi	r26, 0x21	; 33
    47be:	1a 2e       	mov	r1, r26
    47c0:	aa 1b       	sub	r26, r26
    47c2:	bb 1b       	sub	r27, r27
    47c4:	fd 01       	movw	r30, r26
    47c6:	0d c0       	rjmp	.+26     	; 0x47e2 <__udivmodsi4_ep>

000047c8 <__udivmodsi4_loop>:
    47c8:	aa 1f       	adc	r26, r26
    47ca:	bb 1f       	adc	r27, r27
    47cc:	ee 1f       	adc	r30, r30
    47ce:	ff 1f       	adc	r31, r31
    47d0:	a2 17       	cp	r26, r18
    47d2:	b3 07       	cpc	r27, r19
    47d4:	e4 07       	cpc	r30, r20
    47d6:	f5 07       	cpc	r31, r21
    47d8:	20 f0       	brcs	.+8      	; 0x47e2 <__udivmodsi4_ep>
    47da:	a2 1b       	sub	r26, r18
    47dc:	b3 0b       	sbc	r27, r19
    47de:	e4 0b       	sbc	r30, r20
    47e0:	f5 0b       	sbc	r31, r21

000047e2 <__udivmodsi4_ep>:
    47e2:	66 1f       	adc	r22, r22
    47e4:	77 1f       	adc	r23, r23
    47e6:	88 1f       	adc	r24, r24
    47e8:	99 1f       	adc	r25, r25
    47ea:	1a 94       	dec	r1
    47ec:	69 f7       	brne	.-38     	; 0x47c8 <__udivmodsi4_loop>
    47ee:	60 95       	com	r22
    47f0:	70 95       	com	r23
    47f2:	80 95       	com	r24
    47f4:	90 95       	com	r25
    47f6:	9b 01       	movw	r18, r22
    47f8:	ac 01       	movw	r20, r24
    47fa:	bd 01       	movw	r22, r26
    47fc:	cf 01       	movw	r24, r30
    47fe:	08 95       	ret

00004800 <__tablejump2__>:
    4800:	ee 0f       	add	r30, r30
    4802:	ff 1f       	adc	r31, r31
    4804:	05 90       	lpm	r0, Z+
    4806:	f4 91       	lpm	r31, Z
    4808:	e0 2d       	mov	r30, r0
    480a:	09 94       	ijmp

0000480c <__ashldi3>:
    480c:	0f 93       	push	r16
    480e:	08 30       	cpi	r16, 0x08	; 8
    4810:	90 f0       	brcs	.+36     	; 0x4836 <__ashldi3+0x2a>
    4812:	98 2f       	mov	r25, r24
    4814:	87 2f       	mov	r24, r23
    4816:	76 2f       	mov	r23, r22
    4818:	65 2f       	mov	r22, r21
    481a:	54 2f       	mov	r21, r20
    481c:	43 2f       	mov	r20, r19
    481e:	32 2f       	mov	r19, r18
    4820:	22 27       	eor	r18, r18
    4822:	08 50       	subi	r16, 0x08	; 8
    4824:	f4 cf       	rjmp	.-24     	; 0x480e <__ashldi3+0x2>
    4826:	22 0f       	add	r18, r18
    4828:	33 1f       	adc	r19, r19
    482a:	44 1f       	adc	r20, r20
    482c:	55 1f       	adc	r21, r21
    482e:	66 1f       	adc	r22, r22
    4830:	77 1f       	adc	r23, r23
    4832:	88 1f       	adc	r24, r24
    4834:	99 1f       	adc	r25, r25
    4836:	0a 95       	dec	r16
    4838:	b2 f7       	brpl	.-20     	; 0x4826 <__ashldi3+0x1a>
    483a:	0f 91       	pop	r16
    483c:	08 95       	ret

0000483e <__ashrdi3>:
    483e:	97 fb       	bst	r25, 7
    4840:	10 f8       	bld	r1, 0

00004842 <__lshrdi3>:
    4842:	16 94       	lsr	r1
    4844:	00 08       	sbc	r0, r0
    4846:	0f 93       	push	r16
    4848:	08 30       	cpi	r16, 0x08	; 8
    484a:	98 f0       	brcs	.+38     	; 0x4872 <__lshrdi3+0x30>
    484c:	08 50       	subi	r16, 0x08	; 8
    484e:	23 2f       	mov	r18, r19
    4850:	34 2f       	mov	r19, r20
    4852:	45 2f       	mov	r20, r21
    4854:	56 2f       	mov	r21, r22
    4856:	67 2f       	mov	r22, r23
    4858:	78 2f       	mov	r23, r24
    485a:	89 2f       	mov	r24, r25
    485c:	90 2d       	mov	r25, r0
    485e:	f4 cf       	rjmp	.-24     	; 0x4848 <__lshrdi3+0x6>
    4860:	05 94       	asr	r0
    4862:	97 95       	ror	r25
    4864:	87 95       	ror	r24
    4866:	77 95       	ror	r23
    4868:	67 95       	ror	r22
    486a:	57 95       	ror	r21
    486c:	47 95       	ror	r20
    486e:	37 95       	ror	r19
    4870:	27 95       	ror	r18
    4872:	0a 95       	dec	r16
    4874:	aa f7       	brpl	.-22     	; 0x4860 <__lshrdi3+0x1e>
    4876:	0f 91       	pop	r16
    4878:	08 95       	ret

0000487a <__cmpdi2_s8>:
    487a:	00 24       	eor	r0, r0
    487c:	a7 fd       	sbrc	r26, 7
    487e:	00 94       	com	r0
    4880:	2a 17       	cp	r18, r26
    4882:	30 05       	cpc	r19, r0
    4884:	40 05       	cpc	r20, r0
    4886:	50 05       	cpc	r21, r0
    4888:	60 05       	cpc	r22, r0
    488a:	70 05       	cpc	r23, r0
    488c:	80 05       	cpc	r24, r0
    488e:	90 05       	cpc	r25, r0
    4890:	08 95       	ret

00004892 <malloc>:
    4892:	0f 93       	push	r16
    4894:	1f 93       	push	r17
    4896:	cf 93       	push	r28
    4898:	df 93       	push	r29
    489a:	82 30       	cpi	r24, 0x02	; 2
    489c:	91 05       	cpc	r25, r1
    489e:	10 f4       	brcc	.+4      	; 0x48a4 <malloc+0x12>
    48a0:	82 e0       	ldi	r24, 0x02	; 2
    48a2:	90 e0       	ldi	r25, 0x00	; 0
    48a4:	e0 91 53 05 	lds	r30, 0x0553	; 0x800553 <__flp>
    48a8:	f0 91 54 05 	lds	r31, 0x0554	; 0x800554 <__flp+0x1>
    48ac:	20 e0       	ldi	r18, 0x00	; 0
    48ae:	30 e0       	ldi	r19, 0x00	; 0
    48b0:	a0 e0       	ldi	r26, 0x00	; 0
    48b2:	b0 e0       	ldi	r27, 0x00	; 0
    48b4:	30 97       	sbiw	r30, 0x00	; 0
    48b6:	19 f1       	breq	.+70     	; 0x48fe <malloc+0x6c>
    48b8:	40 81       	ld	r20, Z
    48ba:	51 81       	ldd	r21, Z+1	; 0x01
    48bc:	02 81       	ldd	r16, Z+2	; 0x02
    48be:	13 81       	ldd	r17, Z+3	; 0x03
    48c0:	48 17       	cp	r20, r24
    48c2:	59 07       	cpc	r21, r25
    48c4:	c8 f0       	brcs	.+50     	; 0x48f8 <malloc+0x66>
    48c6:	84 17       	cp	r24, r20
    48c8:	95 07       	cpc	r25, r21
    48ca:	69 f4       	brne	.+26     	; 0x48e6 <malloc+0x54>
    48cc:	10 97       	sbiw	r26, 0x00	; 0
    48ce:	31 f0       	breq	.+12     	; 0x48dc <malloc+0x4a>
    48d0:	12 96       	adiw	r26, 0x02	; 2
    48d2:	0c 93       	st	X, r16
    48d4:	12 97       	sbiw	r26, 0x02	; 2
    48d6:	13 96       	adiw	r26, 0x03	; 3
    48d8:	1c 93       	st	X, r17
    48da:	27 c0       	rjmp	.+78     	; 0x492a <malloc+0x98>
    48dc:	00 93 53 05 	sts	0x0553, r16	; 0x800553 <__flp>
    48e0:	10 93 54 05 	sts	0x0554, r17	; 0x800554 <__flp+0x1>
    48e4:	22 c0       	rjmp	.+68     	; 0x492a <malloc+0x98>
    48e6:	21 15       	cp	r18, r1
    48e8:	31 05       	cpc	r19, r1
    48ea:	19 f0       	breq	.+6      	; 0x48f2 <malloc+0x60>
    48ec:	42 17       	cp	r20, r18
    48ee:	53 07       	cpc	r21, r19
    48f0:	18 f4       	brcc	.+6      	; 0x48f8 <malloc+0x66>
    48f2:	9a 01       	movw	r18, r20
    48f4:	bd 01       	movw	r22, r26
    48f6:	ef 01       	movw	r28, r30
    48f8:	df 01       	movw	r26, r30
    48fa:	f8 01       	movw	r30, r16
    48fc:	db cf       	rjmp	.-74     	; 0x48b4 <malloc+0x22>
    48fe:	21 15       	cp	r18, r1
    4900:	31 05       	cpc	r19, r1
    4902:	f9 f0       	breq	.+62     	; 0x4942 <malloc+0xb0>
    4904:	28 1b       	sub	r18, r24
    4906:	39 0b       	sbc	r19, r25
    4908:	24 30       	cpi	r18, 0x04	; 4
    490a:	31 05       	cpc	r19, r1
    490c:	80 f4       	brcc	.+32     	; 0x492e <malloc+0x9c>
    490e:	8a 81       	ldd	r24, Y+2	; 0x02
    4910:	9b 81       	ldd	r25, Y+3	; 0x03
    4912:	61 15       	cp	r22, r1
    4914:	71 05       	cpc	r23, r1
    4916:	21 f0       	breq	.+8      	; 0x4920 <malloc+0x8e>
    4918:	fb 01       	movw	r30, r22
    491a:	93 83       	std	Z+3, r25	; 0x03
    491c:	82 83       	std	Z+2, r24	; 0x02
    491e:	04 c0       	rjmp	.+8      	; 0x4928 <malloc+0x96>
    4920:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <__flp+0x1>
    4924:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <__flp>
    4928:	fe 01       	movw	r30, r28
    492a:	32 96       	adiw	r30, 0x02	; 2
    492c:	44 c0       	rjmp	.+136    	; 0x49b6 <malloc+0x124>
    492e:	fe 01       	movw	r30, r28
    4930:	e2 0f       	add	r30, r18
    4932:	f3 1f       	adc	r31, r19
    4934:	81 93       	st	Z+, r24
    4936:	91 93       	st	Z+, r25
    4938:	22 50       	subi	r18, 0x02	; 2
    493a:	31 09       	sbc	r19, r1
    493c:	39 83       	std	Y+1, r19	; 0x01
    493e:	28 83       	st	Y, r18
    4940:	3a c0       	rjmp	.+116    	; 0x49b6 <malloc+0x124>
    4942:	20 91 51 05 	lds	r18, 0x0551	; 0x800551 <__brkval>
    4946:	30 91 52 05 	lds	r19, 0x0552	; 0x800552 <__brkval+0x1>
    494a:	23 2b       	or	r18, r19
    494c:	41 f4       	brne	.+16     	; 0x495e <malloc+0xcc>
    494e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    4952:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4956:	30 93 52 05 	sts	0x0552, r19	; 0x800552 <__brkval+0x1>
    495a:	20 93 51 05 	sts	0x0551, r18	; 0x800551 <__brkval>
    495e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    4962:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4966:	21 15       	cp	r18, r1
    4968:	31 05       	cpc	r19, r1
    496a:	41 f4       	brne	.+16     	; 0x497c <malloc+0xea>
    496c:	2d b7       	in	r18, 0x3d	; 61
    496e:	3e b7       	in	r19, 0x3e	; 62
    4970:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4974:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4978:	24 1b       	sub	r18, r20
    497a:	35 0b       	sbc	r19, r21
    497c:	e0 91 51 05 	lds	r30, 0x0551	; 0x800551 <__brkval>
    4980:	f0 91 52 05 	lds	r31, 0x0552	; 0x800552 <__brkval+0x1>
    4984:	e2 17       	cp	r30, r18
    4986:	f3 07       	cpc	r31, r19
    4988:	a0 f4       	brcc	.+40     	; 0x49b2 <malloc+0x120>
    498a:	2e 1b       	sub	r18, r30
    498c:	3f 0b       	sbc	r19, r31
    498e:	28 17       	cp	r18, r24
    4990:	39 07       	cpc	r19, r25
    4992:	78 f0       	brcs	.+30     	; 0x49b2 <malloc+0x120>
    4994:	ac 01       	movw	r20, r24
    4996:	4e 5f       	subi	r20, 0xFE	; 254
    4998:	5f 4f       	sbci	r21, 0xFF	; 255
    499a:	24 17       	cp	r18, r20
    499c:	35 07       	cpc	r19, r21
    499e:	48 f0       	brcs	.+18     	; 0x49b2 <malloc+0x120>
    49a0:	4e 0f       	add	r20, r30
    49a2:	5f 1f       	adc	r21, r31
    49a4:	50 93 52 05 	sts	0x0552, r21	; 0x800552 <__brkval+0x1>
    49a8:	40 93 51 05 	sts	0x0551, r20	; 0x800551 <__brkval>
    49ac:	81 93       	st	Z+, r24
    49ae:	91 93       	st	Z+, r25
    49b0:	02 c0       	rjmp	.+4      	; 0x49b6 <malloc+0x124>
    49b2:	e0 e0       	ldi	r30, 0x00	; 0
    49b4:	f0 e0       	ldi	r31, 0x00	; 0
    49b6:	cf 01       	movw	r24, r30
    49b8:	df 91       	pop	r29
    49ba:	cf 91       	pop	r28
    49bc:	1f 91       	pop	r17
    49be:	0f 91       	pop	r16
    49c0:	08 95       	ret

000049c2 <free>:
    49c2:	cf 93       	push	r28
    49c4:	df 93       	push	r29
    49c6:	00 97       	sbiw	r24, 0x00	; 0
    49c8:	09 f4       	brne	.+2      	; 0x49cc <free+0xa>
    49ca:	81 c0       	rjmp	.+258    	; 0x4ace <free+0x10c>
    49cc:	fc 01       	movw	r30, r24
    49ce:	32 97       	sbiw	r30, 0x02	; 2
    49d0:	13 82       	std	Z+3, r1	; 0x03
    49d2:	12 82       	std	Z+2, r1	; 0x02
    49d4:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <__flp>
    49d8:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <__flp+0x1>
    49dc:	10 97       	sbiw	r26, 0x00	; 0
    49de:	81 f4       	brne	.+32     	; 0x4a00 <free+0x3e>
    49e0:	20 81       	ld	r18, Z
    49e2:	31 81       	ldd	r19, Z+1	; 0x01
    49e4:	82 0f       	add	r24, r18
    49e6:	93 1f       	adc	r25, r19
    49e8:	20 91 51 05 	lds	r18, 0x0551	; 0x800551 <__brkval>
    49ec:	30 91 52 05 	lds	r19, 0x0552	; 0x800552 <__brkval+0x1>
    49f0:	28 17       	cp	r18, r24
    49f2:	39 07       	cpc	r19, r25
    49f4:	51 f5       	brne	.+84     	; 0x4a4a <free+0x88>
    49f6:	f0 93 52 05 	sts	0x0552, r31	; 0x800552 <__brkval+0x1>
    49fa:	e0 93 51 05 	sts	0x0551, r30	; 0x800551 <__brkval>
    49fe:	67 c0       	rjmp	.+206    	; 0x4ace <free+0x10c>
    4a00:	ed 01       	movw	r28, r26
    4a02:	20 e0       	ldi	r18, 0x00	; 0
    4a04:	30 e0       	ldi	r19, 0x00	; 0
    4a06:	ce 17       	cp	r28, r30
    4a08:	df 07       	cpc	r29, r31
    4a0a:	40 f4       	brcc	.+16     	; 0x4a1c <free+0x5a>
    4a0c:	4a 81       	ldd	r20, Y+2	; 0x02
    4a0e:	5b 81       	ldd	r21, Y+3	; 0x03
    4a10:	9e 01       	movw	r18, r28
    4a12:	41 15       	cp	r20, r1
    4a14:	51 05       	cpc	r21, r1
    4a16:	f1 f0       	breq	.+60     	; 0x4a54 <free+0x92>
    4a18:	ea 01       	movw	r28, r20
    4a1a:	f5 cf       	rjmp	.-22     	; 0x4a06 <free+0x44>
    4a1c:	d3 83       	std	Z+3, r29	; 0x03
    4a1e:	c2 83       	std	Z+2, r28	; 0x02
    4a20:	40 81       	ld	r20, Z
    4a22:	51 81       	ldd	r21, Z+1	; 0x01
    4a24:	84 0f       	add	r24, r20
    4a26:	95 1f       	adc	r25, r21
    4a28:	c8 17       	cp	r28, r24
    4a2a:	d9 07       	cpc	r29, r25
    4a2c:	59 f4       	brne	.+22     	; 0x4a44 <free+0x82>
    4a2e:	88 81       	ld	r24, Y
    4a30:	99 81       	ldd	r25, Y+1	; 0x01
    4a32:	84 0f       	add	r24, r20
    4a34:	95 1f       	adc	r25, r21
    4a36:	02 96       	adiw	r24, 0x02	; 2
    4a38:	91 83       	std	Z+1, r25	; 0x01
    4a3a:	80 83       	st	Z, r24
    4a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    4a3e:	9b 81       	ldd	r25, Y+3	; 0x03
    4a40:	93 83       	std	Z+3, r25	; 0x03
    4a42:	82 83       	std	Z+2, r24	; 0x02
    4a44:	21 15       	cp	r18, r1
    4a46:	31 05       	cpc	r19, r1
    4a48:	29 f4       	brne	.+10     	; 0x4a54 <free+0x92>
    4a4a:	f0 93 54 05 	sts	0x0554, r31	; 0x800554 <__flp+0x1>
    4a4e:	e0 93 53 05 	sts	0x0553, r30	; 0x800553 <__flp>
    4a52:	3d c0       	rjmp	.+122    	; 0x4ace <free+0x10c>
    4a54:	e9 01       	movw	r28, r18
    4a56:	fb 83       	std	Y+3, r31	; 0x03
    4a58:	ea 83       	std	Y+2, r30	; 0x02
    4a5a:	49 91       	ld	r20, Y+
    4a5c:	59 91       	ld	r21, Y+
    4a5e:	c4 0f       	add	r28, r20
    4a60:	d5 1f       	adc	r29, r21
    4a62:	ec 17       	cp	r30, r28
    4a64:	fd 07       	cpc	r31, r29
    4a66:	61 f4       	brne	.+24     	; 0x4a80 <free+0xbe>
    4a68:	80 81       	ld	r24, Z
    4a6a:	91 81       	ldd	r25, Z+1	; 0x01
    4a6c:	84 0f       	add	r24, r20
    4a6e:	95 1f       	adc	r25, r21
    4a70:	02 96       	adiw	r24, 0x02	; 2
    4a72:	e9 01       	movw	r28, r18
    4a74:	99 83       	std	Y+1, r25	; 0x01
    4a76:	88 83       	st	Y, r24
    4a78:	82 81       	ldd	r24, Z+2	; 0x02
    4a7a:	93 81       	ldd	r25, Z+3	; 0x03
    4a7c:	9b 83       	std	Y+3, r25	; 0x03
    4a7e:	8a 83       	std	Y+2, r24	; 0x02
    4a80:	e0 e0       	ldi	r30, 0x00	; 0
    4a82:	f0 e0       	ldi	r31, 0x00	; 0
    4a84:	12 96       	adiw	r26, 0x02	; 2
    4a86:	8d 91       	ld	r24, X+
    4a88:	9c 91       	ld	r25, X
    4a8a:	13 97       	sbiw	r26, 0x03	; 3
    4a8c:	00 97       	sbiw	r24, 0x00	; 0
    4a8e:	19 f0       	breq	.+6      	; 0x4a96 <free+0xd4>
    4a90:	fd 01       	movw	r30, r26
    4a92:	dc 01       	movw	r26, r24
    4a94:	f7 cf       	rjmp	.-18     	; 0x4a84 <free+0xc2>
    4a96:	8d 91       	ld	r24, X+
    4a98:	9c 91       	ld	r25, X
    4a9a:	11 97       	sbiw	r26, 0x01	; 1
    4a9c:	9d 01       	movw	r18, r26
    4a9e:	2e 5f       	subi	r18, 0xFE	; 254
    4aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    4aa2:	82 0f       	add	r24, r18
    4aa4:	93 1f       	adc	r25, r19
    4aa6:	20 91 51 05 	lds	r18, 0x0551	; 0x800551 <__brkval>
    4aaa:	30 91 52 05 	lds	r19, 0x0552	; 0x800552 <__brkval+0x1>
    4aae:	28 17       	cp	r18, r24
    4ab0:	39 07       	cpc	r19, r25
    4ab2:	69 f4       	brne	.+26     	; 0x4ace <free+0x10c>
    4ab4:	30 97       	sbiw	r30, 0x00	; 0
    4ab6:	29 f4       	brne	.+10     	; 0x4ac2 <free+0x100>
    4ab8:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <__flp+0x1>
    4abc:	10 92 53 05 	sts	0x0553, r1	; 0x800553 <__flp>
    4ac0:	02 c0       	rjmp	.+4      	; 0x4ac6 <free+0x104>
    4ac2:	13 82       	std	Z+3, r1	; 0x03
    4ac4:	12 82       	std	Z+2, r1	; 0x02
    4ac6:	b0 93 52 05 	sts	0x0552, r27	; 0x800552 <__brkval+0x1>
    4aca:	a0 93 51 05 	sts	0x0551, r26	; 0x800551 <__brkval>
    4ace:	df 91       	pop	r29
    4ad0:	cf 91       	pop	r28
    4ad2:	08 95       	ret

00004ad4 <memcpy>:
    4ad4:	fb 01       	movw	r30, r22
    4ad6:	dc 01       	movw	r26, r24
    4ad8:	02 c0       	rjmp	.+4      	; 0x4ade <memcpy+0xa>
    4ada:	01 90       	ld	r0, Z+
    4adc:	0d 92       	st	X+, r0
    4ade:	41 50       	subi	r20, 0x01	; 1
    4ae0:	50 40       	sbci	r21, 0x00	; 0
    4ae2:	d8 f7       	brcc	.-10     	; 0x4ada <memcpy+0x6>
    4ae4:	08 95       	ret

00004ae6 <memset>:
    4ae6:	dc 01       	movw	r26, r24
    4ae8:	01 c0       	rjmp	.+2      	; 0x4aec <memset+0x6>
    4aea:	6d 93       	st	X+, r22
    4aec:	41 50       	subi	r20, 0x01	; 1
    4aee:	50 40       	sbci	r21, 0x00	; 0
    4af0:	e0 f7       	brcc	.-8      	; 0x4aea <memset+0x4>
    4af2:	08 95       	ret

00004af4 <_exit>:
    4af4:	f8 94       	cli

00004af6 <__stop_program>:
    4af6:	ff cf       	rjmp	.-2      	; 0x4af6 <__stop_program>
